В веб приложении для тренировки навыка слепой печати есть уроки и финальный тест:
resources/js/components/Lesson.vue
<template>
    <div class="min-h-screen bg-gray-100 p-8">
        <div class="max-w-4xl mx-auto bg-white p-6 rounded shadow-md">
            <div class="relative flex items-center mb-4">
                <h2 class="text-2xl font-bold">Lesson {{ lesson.number }}/{{ totalLessons }}</h2>
                <span v-if="isLessonCompleted" class="absolute left-1/2 transform -translate-x-1/2 text-green-500 text-3xl font-bold">
                    Completed!
                </span>
            </div>
            <div class="flex flex-row items-stretch space-x-4 mb-4">
                <NewCharacters :new-chars="lesson.new_chars" class="flex items-center justify-center" />
                <Statistics :language :time :speed :errors :progress />
            </div>
            <div class="mt-4">
                <div ref="textContainer" class="text-lg font-mono break-words whitespace-pre-wrap h-28 overflow-y-auto bg-gray-50 p-2">
                    <span v-for="(char, index) in text"
                          :key="index"
                          :class="{ 'error-char': typed[index] && typed[index] !== char, 'current-word': isCurrentWord[index], 'space': char === ' ', 'line-break': char === '\n' }"
                    >
                        {{ char }}
                    </span>
                </div>
                <textarea
                    v-model="typed"
                    v-focus
                    @input="handleInput"
                    class="w-full p-2 border rounded mt-4 resize-none"
                    ref="input"
                    :disabled="isLessonCompleted"
                    rows="4"
                    spellcheck="false"
                />
                <VirtualKeyboard :language :typed :text />
                <div v-if="isLessonCompleted" class="flex justify-center mt-4">
                    <router-link
                        v-if="nextLesson"
                        :to="`/lesson/${language}/${nextLesson}`"
                        @click="resetAndLoadNext"
                        class="bg-blue-500 text-white p-2 rounded"
                    >
                        Next Lesson
                    </router-link>
                    <router-link
                        v-else
                        :to="`/test/${language}`"
                        class="bg-green-500 text-white p-2 rounded"
                    >
                        Take Final Test
                    </router-link>
                </div>
            </div>
        </div>
    </div>
</template>

<script lang="ts" setup>
import NewCharacters from './NewCharacters.vue';
import Statistics from './Statistics.vue';
import VirtualKeyboard from './VirtualKeyboard.vue';
import axios from 'axios';
import { KeyboardLanguageEnum } from '@/enums/KeyboardEnums';
import { getCurrentTypingUnit } from '@/helpers/StringHelper';
import { ref, computed, onMounted } from 'vue';
import { useHandleTypingInput } from '@/composables/TypingLogicComposable';
import { useRoute } from 'vue-router';

const route = useRoute();
const { handleTypingInput } = useHandleTypingInput();

const errors = ref(0);
const input = ref<HTMLTextAreaElement | null>(null);
const isLessonCompleted = ref(false);
const language = route.params.language as KeyboardLanguageEnum;
const lessonNumber = ref(parseInt(route.params.number as string));
const lesson = ref<{ id: number; number: number; new_chars: string }>({ id: 0, number: lessonNumber.value, new_chars: '' });
const speed = ref(0);
const startTime = ref(0);
const text = ref('');
const textContainer = ref<HTMLElement | null>(null);
const time = ref(0);
const totalLessons = ref(0);
const typed = ref('');

const currentTypingUnit = computed(() => getCurrentTypingUnit(text.value, typed.value.length));

const isCurrentWord = computed(() => {
    const range = currentTypingUnit.value;
    const arr = Array(text.value.length).fill(false);

    if (!range) { return arr; }

    for (let i = range.start; i <= range.end; i++) { arr[i] = true; }

    return arr;
});

const nextLesson = computed(() => (totalLessons.value - lessonNumber.value) ? lessonNumber.value + 1 : 0);

const progress = computed(() => {
    if (isLessonCompleted.value) { return 100; }

    return text.value.length ? Math.floor((typed.value.length / text.value.length) * 100) : 0;
});

const resetState = () => {
    errors.value = 0;
    isLessonCompleted.value = false;
    speed.value = 0;
    startTime.value = 0;
    text.value = '';
    time.value = 0;
    typed.value = '';
    lesson.value = { id: 0, number: lessonNumber.value, new_chars: '' };
};

const fetchLesson = async () => {
    const response = await axios.get(`/lessons/${language}/${lessonNumber.value}`);

    lesson.value = response.data.lesson;
    totalLessons.value = response.data.lesson.total;
    text.value = response.data.lesson.text;
};

const handleInput = async () => {
    await handleTypingInput(
        {
            errors,
            isCompleted: isLessonCompleted,
            language,
            speed,
            startTime,
            text,
            textContainer,
            time,
            typed,
            progress,
        },
        '/lessons/progress',
        {
            lesson_id: lesson.value.id,
            language,
            time_seconds: time.value,
            speed_wpm: speed.value,
            errors: errors.value,
        }
    );
};

const resetAndLoadNext = async () => {
    if (!isLessonCompleted.value) { return; }

    lessonNumber.value++;

    resetState();

    await fetchLesson();

    if (input.value) { input.value.focus(); }
};

onMounted(async () => {
    resetState();

    await fetchLesson();
});
</script>
resources/js/components/FinalTest.vue
<template>
    <div class="min-h-screen bg-gray-100 p-8">
        <div class="max-w-4xl mx-auto bg-white p-6 rounded shadow-md">
            <div class="relative flex items-center mb-4">
                <h2 class="text-2xl font-bold">Final Test</h2>
                <span v-if="isTestCompleted"
                      class="absolute left-1/2 transform -translate-x-1/2 text-green-500 text-3xl font-bold"
                >
                    Completed!
                </span>
            </div>
            <FinalTestSetup v-if="!text" :upload-file="uploadFile" @start-test="fetchText" />
            <Statistics v-if="text" :language :time :speed :errors :progress />
            <div v-if="text" class="mt-4">
                <div ref="textContainer" class="text-lg font-mono break-words whitespace-pre-wrap h-28 overflow-y-auto bg-gray-50 p-2">
                    <span v-for="(char, index) in text"
                          :key="index"
                          :class="{ 'error-char': typed[index] && typed[index] !== char, 'current-word': isCurrentWord[index], 'space': char === ' ', 'line-break': char === '\n' }"
                    >
                        {{ char }}
                    </span>
                </div>
                <textarea
                    v-model="typed"
                    v-focus
                    @input="handleInput"
                    class="w-full p-2 border rounded mt-4 resize-none"
                    :disabled="isTestCompleted"
                    rows="4"
                    spellcheck="false"
                />
                <VirtualKeyboard :language :typed :text :is-minimized="true" />
                <div v-if="isTestCompleted" class="flex justify-center mt-2">
                    <router-link to="/" class="bg-blue-500 text-white p-2 rounded">Back to Home</router-link>
                </div>
            </div>
        </div>
    </div>
</template>

<script lang="ts" setup>
import FinalTestSetup from './FinalTestSetup.vue';
import Statistics from './Statistics.vue';
import VirtualKeyboard from './VirtualKeyboard.vue';
import axios from 'axios';
import { KeyboardLanguageEnum } from '@/enums/KeyboardEnums';
import { getCurrentTypingUnit } from '@/helpers/StringHelper';
import { ref, computed } from 'vue';
import { useHandleTypingInput } from '@/composables/TypingLogicComposable';
import { useRoute } from 'vue-router';

const route = useRoute();
const { handleTypingInput } = useHandleTypingInput();

const errors = ref(0);
const genre = ref('');
const isTestCompleted = ref(false);
const language = route.params.language as KeyboardLanguageEnum;
const speed = ref(0);
const startTime = ref(0);
const text = ref('');
const textContainer = ref<HTMLElement | null>(null);
const time = ref(0);
const typed = ref('');

const currentTypingUnit = computed(() => getCurrentTypingUnit(text.value, typed.value.length));

const isCurrentWord = computed(() => {
    const range = currentTypingUnit.value;
    const arr = Array(text.value.length).fill(false);

    if (!range) { return arr; }

    for (let i = range.start; i <= range.end; i++) { arr[i] = true; }

    return arr;
});

const progress = computed(() => {
    if (isTestCompleted.value) { return 100; }

    return text.value.length ? Math.floor((typed.value.length / text.value.length) * 100) : 0;
});

const fetchText = async (selectedGenre: string) => {
    genre.value = selectedGenre;

    const response = await axios.get('/test/text', { params: { language, genre: genre.value } });

    text.value = response.data.text;

    errors.value = 0;
    isTestCompleted.value = false;
    speed.value = 0;
    startTime.value = 0;
    time.value = 0;
    typed.value = '';
};

const uploadFile = async (event: Event) => {
    const file = (event.target as HTMLInputElement).files?.[0];

    if (file) {
        const formData = new FormData();

        formData.append('file', file);
        formData.append('language', language);

        await axios.post('/test/upload', formData);
        await fetchText(genre.value);
    }
};

const handleInput = async () => {
    await handleTypingInput(
        {
            errors,
            isCompleted: isTestCompleted,
            language,
            speed,
            startTime,
            text,
            textContainer,
            time,
            typed,
            progress,
        },
        '/test/result',
        {
            language,
            time_seconds: time.value,
            speed_wpm: speed.value,
            errors: errors.value,
        }
    );
};
</script>
resources/js/composables/TypingLogicComposable.ts
import LessonsProgressPayloadInterface from '@/interfaces/LessonsProgressPayloadInterface';
import TestResultPayloadInterface from '@/interfaces/TestResultPayloadInterface';
import TypingStateInterface from '@/interfaces/TypingStateInterface';
import axios from 'axios';
import { scrollToCurrentChar } from '@/helpers/DomHelper';

export function useHandleTypingInput(): any {
    const handleTypingInput = async (
        state: TypingStateInterface,
        postUrl: string,
        payload: LessonsProgressPayloadInterface | TestResultPayloadInterface
    ): Promise<void> => {
        if (!state.startTime.value) { state.startTime.value = Date.now(); }

        const typedChars = state.typed.value.split('');
        let errorCount = 0;

        for (let i = 0; i < Math.min(typedChars.length, state.text.value.length); i++) {
            if (typedChars[i] !== state.text.value[i]) { errorCount++; }
        }

        state.errors.value = errorCount;

        if (state.typed.value.length >= state.text.value.length) {
            state.typed.value = state.typed.value.slice(0, state.text.value.length);
            state.isCompleted.value = true;

            await axios.post(postUrl, payload);

            return;
        }

        state.time.value = Math.round((Date.now() - state.startTime.value) / 1000);
        const words = state.typed.value.length / 5;
        state.speed.value = state.time.value > 0 ? Math.round((words / state.time.value) * 60) : 0;

        scrollToCurrentChar(state.textContainer.value, state.typed.value.length);
    };

    return { handleTypingInput };
}
Сейчас логика определения isCurrentWord в обоих компонентах дублируется. Нужно это исправить. Нужно реализовать эту логику через механизм composables Vue 3, и затем, переиспользовать в компонентах. Минимальные изменения. Основная логика должна остаться без изменений. В коде не должно быть комментариев. Выведи полный обновленный код всех компонентов.




vue

Копировать
import LessonsProgressPayloadInterface from '@/interfaces/LessonsProgressPayloadInterface';
import TestResultPayloadInterface from '@/interfaces/TestResultPayloadInterface';
import TypingStateInterface from '@/interfaces/TypingStateInterface';
import axios from 'axios';
import { scrollToCurrentChar } from '@/helpers/DomHelper';
import { getCurrentTypingUnit } from '@/helpers/StringHelper';
import { computed } from 'vue';

export function useHandleTypingInput() {
    const handleTypingInput = async (
        state: TypingStateInterface,
        postUrl: string,
        payload: LessonsProgressPayloadInterface | TestResultPayloadInterface
    ): Promise<void> => {
        if (!state.startTime.value) { state.startTime.value = Date.now(); }

        const typedChars = state.typed.value.split('');
        let errorCount = 0;

        for (let i = 0; i < Math.min(typedChars.length, state.text.value.length); i++) {
            if (typedChars[i] !== state.text.value[i]) { errorCount++; }
        }

        state.errors.value = errorCount;

        if (state.typed.value.length >= state.text.value.length) {
            state.typed.value = state.typed.value.slice(0, state.text.value.length);
            state.isCompleted.value = true;

            await axios.post(postUrl, payload);

            return;
        }

        state.time.value = Math.round((Date.now() - state.startTime.value) / 1000);
        const words = state.typed.value.length / 5;
        state.speed.value = state.time.value > 0 ? Math.round((words / state.time.value) * 60) : 0;

        scrollToCurrentChar(state.textContainer.value, state.typed.value.length);
    };

    return { handleTypingInput };
}

export function useCurrentWord(text: any, typed: any) {
    const currentTypingUnit = computed(() => getCurrentTypingUnit(text.value, typed.value.length));

    const isCurrentWord = computed(() => {
        const range = currentTypingUnit.value;
        const arr = Array(text.value.length).fill(false);

        if (!range) { return arr; }

        for (let i = range.start; i <= range.end; i++) { arr[i] = true; }

        return arr;
    });

    return { isCurrentWord };
}
vue

Копировать
<template>
    <div class="min-h-screen bg-gray-100 p-8">
        <div class="max-w-4xl mx-auto bg-white p-6 rounded shadow-md">
            <div class="relative flex items-center mb-4">
                <h2 class="text-2xl font-bold">Lesson {{ lesson.number }}/{{ totalLessons }}</h2>
                <span v-if="isLessonCompleted" class="absolute left-1/2 transform -translate-x-1/2 text-green-500 text-3xl font-bold">
                    Completed!
                </span>
            </div>
            <div class="flex flex-row items-stretch space-x-4 mb-4">
                <NewCharacters :new-chars="lesson.new_chars" class="flex items-center justify-center" />
                <Statistics :language :time :speed :errors :progress />
            </div>
            <div class="mt-4">
                <div ref="textContainer" class="text-lg font-mono break-words whitespace-pre-wrap h-28 overflow-y-auto bg-gray-50 p-2">
                    <span v-for="(char, index) in text"
                          :key="index"
                          :class="{ 'error-char': typed[index] && typed[index] !== char, 'current-word': isCurrentWord[index], 'space': char === ' ', 'line-break': char === '\n' }"
                    >
                        {{ char }}
                    </span>
                </div>
                <textarea
                    v-model="typed"
                    v-focus
                    @input="handleInput"
                    class="w-full p-2 border rounded mt-4 resize-none"
                    ref="input"
                    :disabled="isLessonCompleted"
                    rows="4"
                    spellcheck="false"
                />
                <VirtualKeyboard :language :typed :text />
                <div v-if="isLessonCompleted" class="flex justify-center mt-4">
                    <router-link
                        v-if="nextLesson"
                        :to="`/lesson/${language}/${nextLesson}`"
                        @click="resetAndLoadNext"
                        class="bg-blue-500 text-white p-2 rounded"
                    >
                        Next Lesson
                    </router-link>
                    <router-link
                        v-else
                        :to="`/test/${language}`"
                        class="bg-green-500 text-white p-2 rounded"
                    >
                        Take Final Test
                    </router-link>
                </div>
            </div>
        </div>
    </div>
</template>

<script lang="ts" setup>
import NewCharacters from './NewCharacters.vue';
import Statistics from './Statistics.vue';
import VirtualKeyboard from './VirtualKeyboard.vue';
import axios from 'axios';
import { KeyboardLanguageEnum } from '@/enums/KeyboardEnums';
import { ref, computed, onMounted } from 'vue';
import { useHandleTypingInput, useCurrentWord } from '@/composables/TypingLogicComposable';
import { useRoute } from 'vue-router';

const route = useRoute();
const { handleTypingInput } = useHandleTypingInput();
const { isCurrentWord } = useCurrentWord(text, typed);

const errors = ref(0);
const input = ref<HTMLTextAreaElement | null>(null);
const isLessonCompleted = ref(false);
const language = route.params.language as KeyboardLanguageEnum;
const lessonNumber = ref(parseInt(route.params.number as string));
const lesson = ref<{ id: number; number: number; new_chars: string }>({ id: 0, number: lessonNumber.value, new_chars: '' });
const speed = ref(0);
const startTime = ref(0);
const text = ref('');
const textContainer = ref<HTMLElement | null>(null);
const time = ref(0);
const totalLessons = ref(0);
const typed = ref('');

const nextLesson = computed(() => (totalLessons.value - lessonNumber.value) ? lessonNumber.value + 1 : 0);

const progress = computed(() => {
    if (isLessonCompleted.value) { return 100; }

    return text.value.length ? Math.floor((typed.value.length / text.value.length) * 100) : 0;
});

const resetState = () => {
    errors.value = 0;
    isLessonCompleted.value = false;
    speed.value = 0;
    startTime.value = 0;
    text.value = '';
    time.value = 0;
    typed.value = '';
    lesson.value = { id: 0, number: lessonNumber.value, new_chars: '' };
};

const fetchLesson = async () => {
    const response = await axios.get(`/lessons/${language}/${lessonNumber.value}`);

    lesson.value = response.data.lesson;
    totalLessons.value = response.data.lesson.total;
    text.value = response.data.lesson.text;
};

const handleInput = async () => {
    await handleTypingInput(
        {
            errors,
            isCompleted: isLessonCompleted,
            language,
            speed,
            startTime,
            text,
            textContainer,
            time,
            typed,
            progress,
        },
        '/lessons/progress',
        {
            lesson_id: lesson.value.id,
            language,
            time_seconds: time.value,
            speed_wpm: speed.value,
            errors: errors.value,
        }
    );
};

const resetAndLoadNext = async () => {
    if (!isLessonCompleted.value) { return; }

    lessonNumber.value++;

    resetState();

    await fetchLesson();

    if (input.value) { input.value.focus(); }
};

onMounted(async () => {
    resetState();

    await fetchLesson();
});
</script>
vue

Копировать
<template>
    <div class="min-h-screen bg-gray-100 p-8">
        <div class="max-w-4xl mx-auto bg-white p-6 rounded shadow-md">
            <div class="relative flex items-center mb-4">
                <h2 class="text-2xl font-bold">Final Test</h2>
                <span v-if="isTestCompleted"
                      class="absolute left-1/2 transform -translate-x-1/2 text-green-500 text-3xl font-bold"
                >
                    Completed!
                </span>
            </div>
            <FinalTestSetup v-if="!text" :upload-file="uploadFile" @start-test="fetchText" />
            <Statistics v-if="text" :language :time :speed :errors :progress />
            <div v-if="text" class="mt-4">
                <div ref="textContainer" class="text-lg font-mono break-words whitespace-pre-wrap h-28 overflow-y-auto bg-gray-50 p-2">
                    <span v-for="(char, index) in text"
                          :key="index"
                          :class="{ 'error-char': typed[index] && typed[index] !== char, 'current-word': isCurrentWord[index], 'space': char === ' ', 'line-break': char === '\n' }"
                    >
                        {{ char }}
                    </span>
                </div>
                <textarea
                    v-model="typed"
                    v-focus
                    @input="handleInput"
                    class="w-full p-2 border rounded mt-4 resize-none"
                    :disabled="isTestCompleted"
                    rows="4"
                    spellcheck="false"
                />
                <VirtualKeyboard :language :typed :text :is-minimized="true" />
                <div v-if="isTestCompleted" class="flex justify-center mt-2">
                    <router-link to="/" class="bg-blue-500 text-white p-2 rounded">Back to Home</router-link>
                </div>
            </div>
        </div>
    </div>
</template>

<script lang="ts" setup>
import FinalTestSetup from './FinalTestSetup.vue';
import Statistics from './Statistics.vue';
import VirtualKeyboard from './VirtualKeyboard.vue';
import axios from 'axios';
import { KeyboardLanguageEnum } from '@/enums/KeyboardEnums';
import { ref, computed } from 'vue';
import { useHandleTypingInput, useCurrentWord } from '@/composables/TypingLogicComposable';
import { useRoute } from 'vue-router';

const route = useRoute();
const { handleTypingInput } = useHandleTypingInput();
const { isCurrentWord } = useCurrentWord(text, typed);

const errors = ref(0);
const genre = ref('');
const isTestCompleted = ref(false);
const language = route.params.language as KeyboardLanguageEnum;
const speed = ref(0);
const startTime = ref(0);
const text = ref('');
const textContainer = ref<HTMLElement | null>(null);
const time = ref(0);
const typed = ref('');

const progress = computed(() => {
    if (isTestCompleted.value) { return 100; }

    return text.value.length ? Math.floor((typed.value.length / text.value.length) * 100) : 0;
});

const fetchText = async (selectedGenre: string) => {
    genre.value = selectedGenre;

    const response = await axios.get('/test/text', { params: { language, genre: genre.value } });

    text.value = response.data.text;

    errors.value = 0;
    isTestCompleted.value = false;
    speed.value = 0;
    startTime.value = 0;
    time.value = 0;
    typed.value = '';
};

const uploadFile = async (event: Event) => {
    const file = (event.target as HTMLInputElement).files?.[0];

    if (file) {
        const formData = new FormData();

        formData.append('file', file);
        formData.append('language', language);

        await axios.post('/test/upload', formData);
        await fetchText(genre.value);
    }
};

const handleInput = async () => {
    await handleTypingInput(
        {
            errors,
            isCompleted: isTestCompleted,
            language,
            speed,
            startTime,
            text,
            textContainer,
            time,
            typed,
            progress,
        },
        '/test/result',
        {
            language,
            time_seconds: time.value,
            speed_wpm: speed.value,
            errors: errors.value,
        }
    );
};
</script>






Чем я могу помочь?


DeepSearch


Think

Grok 3
