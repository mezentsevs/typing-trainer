В веб приложении для тренировки навыка слепой печати есть виртуальная клавиатура:
resources/js/components/VirtualKeyboard.vue
<template>
    <div class="keyboard flex flex-col gap-2 p-4">
        <div v-for="(row, rowIndex) in keyboardLayout" :key="rowIndex" class="flex justify-center gap-1">
            <button
                v-for="key in row"
                :key="key.value"
                :class="[
                    'p-2 border rounded text-center relative',
                    isHighlighted(key.value, key.zone) || isHighlighted(key.special, key.zone) ? 'bg-green-500 text-white' : 'bg-gray-200',
                    key.width ? `w-${key.width}` : 'w-10'
                ]"
                :style="{ minWidth: key.width ? `${key.width}px` : '40px' }"
            >
                <span class="block">{{ key.display }}</span>
                <span v-if="key.special" class="absolute text-xs" :class="key.specialPosition === 'top-left' ? 'top-0 left-1' : 'top-0 right-1'">
                    {{ key.special }}
                </span>
            </button>
        </div>
    </div>
</template>

<script lang="ts" setup>
import { computed } from 'vue';

const props = defineProps<{
    language: 'en' | 'ru';
    typed: string;
    text: string;
}>();

const keyboardLayouts: Record<'en' | 'ru', { value: string; display: string; special?: string; specialPosition?: 'top-left' | 'top-right'; width?: number; zone?: 'left' | 'right' }[][]> = {
    en: [
        [
            { value: '`', display: '`', special: '~', specialPosition: 'top-left', zone: 'left' },
            { value: '1', display: '1', special: '!', specialPosition: 'top-left', zone: 'left' },
            { value: '2', display: '2', special: '@', specialPosition: 'top-left', zone: 'left' },
            { value: '3', display: '3', special: '#', specialPosition: 'top-left', zone: 'left' },
            { value: '4', display: '4', special: '$', specialPosition: 'top-left', zone: 'left' },
            { value: '5', display: '5', special: '%', specialPosition: 'top-left', zone: 'left' },
            { value: '6', display: '6', special: '^', specialPosition: 'top-left', zone: 'right' },
            { value: '7', display: '7', special: '&', specialPosition: 'top-left', zone: 'right' },
            { value: '8', display: '8', special: '*', specialPosition: 'top-left', zone: 'right' },
            { value: '9', display: '9', special: '(', specialPosition: 'top-left', zone: 'right' },
            { value: '0', display: '0', special: ')', specialPosition: 'top-left', zone: 'right' },
            { value: '-', display: '-', special: '_', specialPosition: 'top-left', zone: 'right' },
            { value: '=', display: '=', special: '+', specialPosition: 'top-left', zone: 'right' },
            { value: 'backspace', display: 'Backspace', width: 80, zone: 'right' }
        ],
        [
            { value: 'tab', display: 'Tab', width: 60, zone: 'left' },
            { value: 'q', display: 'q', special: 'Q', specialPosition: 'top-left', zone: 'left' },
            { value: 'w', display: 'w', special: 'W', specialPosition: 'top-left', zone: 'left' },
            { value: 'e', display: 'e', special: 'E', specialPosition: 'top-left', zone: 'left' },
            { value: 'r', display: 'r', special: 'R', specialPosition: 'top-left', zone: 'left' },
            { value: 't', display: 't', special: 'T', specialPosition: 'top-left', zone: 'left' },
            { value: 'y', display: 'y', special: 'Y', specialPosition: 'top-left', zone: 'right' },
            { value: 'u', display: 'u', special: 'U', specialPosition: 'top-left', zone: 'right' },
            { value: 'i', display: 'i', special: 'I', specialPosition: 'top-left', zone: 'right' },
            { value: 'o', display: 'o', special: 'O', specialPosition: 'top-left', zone: 'right' },
            { value: 'p', display: 'p', special: 'P', specialPosition: 'top-left', zone: 'right' },
            { value: '[', display: '[', special: '{', specialPosition: 'top-left', zone: 'right' },
            { value: ']', display: ']', special: '}', specialPosition: 'top-left', zone: 'right' },
            { value: '\\', display: '\\', special: '|', specialPosition: 'top-left', zone: 'right' }
        ],
        [
            { value: 'capslock', display: 'Caps', width: 70, zone: 'left' },
            { value: 'a', display: 'a', special: 'A', specialPosition: 'top-left', zone: 'left' },
            { value: 's', display: 's', special: 'S', specialPosition: 'top-left', zone: 'left' },
            { value: 'd', display: 'd', special: 'D', specialPosition: 'top-left', zone: 'left' },
            { value: 'f', display: 'f', special: 'F', specialPosition: 'top-left', zone: 'left' },
            { value: 'g', display: 'g', special: 'G', specialPosition: 'top-left', zone: 'left' },
            { value: 'h', display: 'h', special: 'H', specialPosition: 'top-left', zone: 'right' },
            { value: 'j', display: 'j', special: 'J', specialPosition: 'top-left', zone: 'right' },
            { value: 'k', display: 'k', special: 'K', specialPosition: 'top-left', zone: 'right' },
            { value: 'l', display: 'l', special: 'L', specialPosition: 'top-left', zone: 'right' },
            { value: ';', display: ';', special: ':', specialPosition: 'top-left', zone: 'right' },
            { value: '\'', display: '\'', special: '"', specialPosition: 'top-left', zone: 'right' },
            { value: 'enter', display: 'Enter', width: 80, zone: 'right' }
        ],
        [
            { value: 'shift', display: 'Shift', width: 90, zone: 'left' },
            { value: 'z', display: 'z', special: 'Z', specialPosition: 'top-left', zone: 'left' },
            { value: 'x', display: 'x', special: 'X', specialPosition: 'top-left', zone: 'left' },
            { value: 'c', display: 'c', special: 'C', specialPosition: 'top-left', zone: 'left' },
            { value: 'v', display: 'v', special: 'V', specialPosition: 'top-left', zone: 'left' },
            { value: 'b', display: 'b', special: 'B', specialPosition: 'top-left', zone: 'left' },
            { value: 'n', display: 'n', special: 'N', specialPosition: 'top-left', zone: 'right' },
            { value: 'm', display: 'm', special: 'M', specialPosition: 'top-left', zone: 'right' },
            { value: ',', display: ',', special: '<', specialPosition: 'top-left', zone: 'right' },
            { value: '.', display: '.', special: '>', specialPosition: 'top-left', zone: 'right' },
            { value: '/', display: '/', special: '?', specialPosition: 'top-left', zone: 'right' },
            { value: 'shift', display: 'Shift', width: 90, zone: 'right' }
        ],
        [
            { value: 'ctrl', display: 'Ctrl', width: 60, zone: 'left' },
            { value: 'alt', display: 'Alt', width: 60, zone: 'left' },
            { value: ' ', display: 'Space', width: 200 },
            { value: 'alt', display: 'Alt', width: 60, zone: 'right' },
            { value: 'ctrl', display: 'Ctrl', width: 60, zone: 'right' }
        ]
    ],
    ru: [
        [
            { value: 'ё', display: 'ё', special: 'Ё', specialPosition: 'top-left', zone: 'left' },
            { value: '1', display: '1', special: '!', specialPosition: 'top-left', zone: 'left' },
            { value: '2', display: '2', special: '"', specialPosition: 'top-left', zone: 'left' },
            { value: '3', display: '3', special: '№', specialPosition: 'top-left', zone: 'left' },
            { value: '4', display: '4', special: ';', specialPosition: 'top-left', zone: 'left' },
            { value: '5', display: '5', special: '%', specialPosition: 'top-left', zone: 'left' },
            { value: '6', display: '6', special: ':', specialPosition: 'top-left', zone: 'right' },
            { value: '7', display: '7', special: '?', specialPosition: 'top-left', zone: 'right' },
            { value: '8', display: '8', special: '*', specialPosition: 'top-left', zone: 'right' },
            { value: '9', display: '9', special: '(', specialPosition: 'top-left', zone: 'right' },
            { value: '0', display: '0', special: ')', specialPosition: 'top-left', zone: 'right' },
            { value: '-', display: '-', special: '_', specialPosition: 'top-left', zone: 'right' },
            { value: '=', display: '=', special: '+', specialPosition: 'top-left', zone: 'right' },
            { value: 'backspace', display: 'Backspace', width: 80, zone: 'right' }
        ],
        [
            { value: 'tab', display: 'Tab', width: 60, zone: 'left' },
            { value: 'й', display: 'й', special: 'Й', specialPosition: 'top-left', zone: 'left' },
            { value: 'ц', display: 'ц', special: 'Ц', specialPosition: 'top-left', zone: 'left' },
            { value: 'у', display: 'у', special: 'У', specialPosition: 'top-left', zone: 'left' },
            { value: 'к', display: 'к', special: 'К', specialPosition: 'top-left', zone: 'left' },
            { value: 'е', display: 'е', special: 'Е', specialPosition: 'top-left', zone: 'left' },
            { value: 'н', display: 'н', special: 'Н', specialPosition: 'top-left', zone: 'right' },
            { value: 'г', display: 'г', special: 'Г', specialPosition: 'top-left', zone: 'right' },
            { value: 'ш', display: 'ш', special: 'Ш', specialPosition: 'top-left', zone: 'right' },
            { value: 'щ', display: 'щ', special: 'Щ', specialPosition: 'top-left', zone: 'right' },
            { value: 'з', display: 'з', special: 'З', specialPosition: 'top-left', zone: 'right' },
            { value: 'х', display: 'х', special: 'Х', specialPosition: 'top-left', zone: 'right' },
            { value: 'ъ', display: 'ъ', special: 'Ъ', specialPosition: 'top-left', zone: 'right' },
            { value: '/', display: '/', special: '|', specialPosition: 'top-left', zone: 'right' }
        ],
        [
            { value: 'capslock', display: 'Caps', width: 70, zone: 'left' },
            { value: 'ф', display: 'ф', special: 'Ф', specialPosition: 'top-left', zone: 'left' },
            { value: 'ы', display: 'ы', special: 'Ы', specialPosition: 'top-left', zone: 'left' },
            { value: 'в', display: 'в', special: 'В', specialPosition: 'top-left', zone: 'left' },
            { value: 'а', display: 'а', special: 'А', specialPosition: 'top-left', zone: 'left' },
            { value: 'п', display: 'п', special: 'П', specialPosition: 'top-left', zone: 'left' },
            { value: 'р', display: 'р', special: 'Р', specialPosition: 'top-left', zone: 'right' },
            { value: 'о', display: 'о', special: 'О', specialPosition: 'top-left', zone: 'right' },
            { value: 'л', display: 'л', special: 'Л', specialPosition: 'top-left', zone: 'right' },
            { value: 'д', display: 'д', special: 'Д', specialPosition: 'top-left', zone: 'right' },
            { value: 'ж', display: 'ж', special: 'Ж', specialPosition: 'top-left', zone: 'right' },
            { value: 'э', display: 'э', special: 'Э', specialPosition: 'top-left', zone: 'right' },
            { value: 'enter', display: 'Enter', width: 80, zone: 'right' }
        ],
        [
            { value: 'shift', display: 'Shift', width: 90, zone: 'left' },
            { value: 'я', display: 'я', special: 'Я', specialPosition: 'top-left', zone: 'left' },
            { value: 'ч', display: 'ч', special: 'Ч', specialPosition: 'top-left', zone: 'left' },
            { value: 'с', display: 'с', special: 'С', specialPosition: 'top-left', zone: 'left' },
            { value: 'м', display: 'м', special: 'М', specialPosition: 'top-left', zone: 'left' },
            { value: 'и', display: 'и', special: 'И', specialPosition: 'top-left', zone: 'left' },
            { value: 'т', display: 'т', special: 'Т', specialPosition: 'top-left', zone: 'right' },
            { value: 'ь', display: 'ь', special: 'Ь', specialPosition: 'top-left', zone: 'right' },
            { value: 'б', display: 'б', special: 'Б', specialPosition: 'top-left', zone: 'right' },
            { value: 'ю', display: 'ю', special: 'Ю', specialPosition: 'top-left', zone: 'right' },
            { value: '.', display: '.', special: ',', specialPosition: 'top-left', zone: 'right' },
            { value: 'shift', display: 'Shift', width: 90, zone: 'right' }
        ],
        [
            { value: 'ctrl', display: 'Ctrl', width: 60, zone: 'left' },
            { value: 'alt', display: 'Alt', width: 60, zone: 'left' },
            { value: ' ', display: 'Space', width: 200 },
            { value: 'alt', display: 'Alt', width: 60, zone: 'right' },
            { value: 'ctrl', display: 'Ctrl', width: 60, zone: 'right' }
        ]
    ]
};

const keyboardLayout = computed(() => keyboardLayouts[props.language]);

const nextChar = computed(() => {
    return props.typed.length < props.text.length ? props.text[props.typed.length] : '';
});

const isHighlighted = (keyValue: string | undefined, zone?: 'left' | 'right') => {
    if (!keyValue) return false;
    if (keyValue === ' ') return nextChar.value === ' ';
    if (keyValue === 'enter') return nextChar.value === '\n';

    const isUpperOrSpecial = nextChar.value.match(/[A-ZА-ЯЁ~!@#$%^&*()_+{}|:"<>?]/);
    const isControlChar = nextChar.value !== '\n' && nextChar.value.match(/[\x00-\x1F\x7F]/);

    if (keyValue === 'shift') {
        if (!isUpperOrSpecial) return false;
        const keyZone = keyboardLayout.value.flat().find(k =>
            k.value === nextChar.value ||
            (k.special && k.special === nextChar.value) ||
            k.value.toLowerCase() === nextChar.value.toLowerCase() ||
            (k.special && k.special.toLowerCase() === nextChar.value.toLowerCase())
        )?.zone;
        return keyZone === 'left' ? zone === 'right' : zone === 'left';
    }

    if (['ctrl', 'alt', 'capslock'].includes(keyValue)) {
        if (!isControlChar) return false;
        const keyZone = keyboardLayout.value.flat().find(k =>
            k.value === nextChar.value ||
            (k.special && k.special === nextChar.value) ||
            k.value.toLowerCase() === nextChar.value.toLowerCase() ||
            (k.special && k.special.toLowerCase() === nextChar.value.toLowerCase())
        )?.zone;
        return keyZone === 'left' ? zone === 'right' : zone === 'left';
    }

    return nextChar.value === keyValue || nextChar.value.toLowerCase() === keyValue.toLowerCase();
};
</script>
Нужно скорректировать ширину левых клавиш Tab, Caps, Shift (увеличить) так, чтобы они были выровнены по левому краю по клавише ё (`), и скорректировать ширину правых клавиш Enter, Shift, чтобы они были выровнены по правому краю по клавише Backspace. Нужно выровнять левый Ctrl по левому краю, а правый Ctrl - по правому краю клавиатуры. Размеры левых и правых одинаковых (симметричных) клавиш должны быть одинаковыми. Изменения должны быть применены для всех языков (английский и русский). Изучи информацию о том, как это реализовано на реальных клавиатурах, и сделай аналогично. Минимальные изменения. Выведи полный обновленный код компонента.





Для корректировки ширины клавиш в компоненте VirtualKeyboard.vue я проанализирую стандартные размеры клавиш на реальных клавиатурах и применю минимальные изменения, чтобы выровнять клавиши, как указано в запросе.

Анализ стандартных клавиатур:
Левые клавиши (Tab, Caps, Shift): На стандартных клавиатурах (например, ANSI или ISO) клавиша Tab обычно в 1.5 раза шире стандартной клавиши, Caps Lock — около 1.75x, а левый Shift — около 2.25x. Это позволяет выровнять их по левому краю с учётом клавиши ё (или ` в английской раскладке), которая имеет стандартный размер (1x).
Правые клавиши (Enter, Shift): Правый Shift обычно имеет ширину около 2.75x, а Enter — около 2.25x (включая изгиб в ISO-раскладках, но здесь мы работаем с плоской раскладкой). Они выравниваются по правому краю с Backspace, который обычно 2x.
Клавиши Ctrl: Левый и правый Ctrl обычно имеют ширину 1.25x, что позволяет выровнять их по краям клавиатуры.
Симметрия: Левый и правый Shift, а также левый и правый Ctrl и Alt должны быть одинаковой ширины.
Текущие размеры в коде:
Tab: 60px
Caps: 70px
Левый Shift: 90px
Правый Shift: 90px
Enter: 80px
Backspace: 80px
Ctrl (левый и правый): 60px
Стандартная клавиша: 40px (по атрибуту minWidth)
Необходимые изменения:
Левые клавиши (Tab, Caps, Shift):
Увеличим Tab с 60px до 64px (примерно 1.6x от 40px, чтобы учесть выравнивание).
Caps увеличим с 70px до 72px (примерно 1.8x).
Левый Shift увеличим с 90px до 96px (примерно 2.4x).
Правые клавиши (Enter, Shift):
Правый Shift увеличим с 90px до 112px (примерно 2.8x, чтобы выровнять по Backspace).
Enter увеличим с 80px до 96px (примерно 2.4x).
Левый и правый Shift должны быть одинаковыми, поэтому левый Shift тоже станет 112px.
Клавиши Ctrl:
Левый и правый Ctrl увеличим с 60px до 64px (примерно 1.6x), чтобы выровнять по краям и сделать их симметричными.
Клавиши Alt:
Оставим ширину Alt на уровне 60px, так как они уже симметричны и не требуют выравнивания по краям.
Эти изменения применятся для обеих раскладок (en и ru), так как структура клавиатуры одинакова.

Обновленный код:
html

Копировать
<template>
    <div class="keyboard flex flex-col gap-2 p-4">
        <div v-for="(row, rowIndex) in keyboardLayout" :key="rowIndex" class="flex justify-center gap-1">
            <button
                v-for="key in row"
                :key="key.value"
                :class="[
                    'p-2 border rounded text-center relative',
                    isHighlighted(key.value, key.zone) || isHighlighted(key.special, key.zone) ? 'bg-green-500 text-white' : 'bg-gray-200',
                    key.width ? `w-${key.width}` : 'w-10'
                ]"
                :style="{ minWidth: key.width ? `${key.width}px` : '40px' }"
            >
                <span class="block">{{ key.display }}</span>
                <span v-if="key.special" class="absolute text-xs" :class="key.specialPosition === 'top-left' ? 'top-0 left-1' : 'top-0 right-1'">
                    {{ key.special }}
                </span>
            </button>
        </div>
    </div>
</template>

<script lang="ts" setup>
import { computed } from 'vue';

const props = defineProps<{
    language: 'en' | 'ru';
    typed: string;
    text: string;
}>();

const keyboardLayouts: Record<'en' | 'ru', { value: string; display: string; special?: string; specialPosition?: 'top-left' | 'top-right'; width?: number; zone?: 'left' | 'right' }[][]> = {
    en: [
        [
            { value: '`', display: '`', special: '~', specialPosition: 'top-left', zone: 'left' },
            { value: '1', display: '1', special: '!', specialPosition: 'top-left', zone: 'left' },
            { value: '2', display: '2', special: '@', specialPosition: 'top-left', zone: 'left' },
            { value: '3', display: '3', special: '#', specialPosition: 'top-left', zone: 'left' },
            { value: '4', display: '4', special: '$', specialPosition: 'top-left', zone: 'left' },
            { value: '5', display: '5', special: '%', specialPosition: 'top-left', zone: 'left' },
            { value: '6', display: '6', special: '^', specialPosition: 'top-left', zone: 'right' },
            { value: '7', display: '7', special: '&', specialPosition: 'top-left', zone: 'right' },
            { value: '8', display: '8', special: '*', specialPosition: 'top-left', zone: 'right' },
            { value: '9', display: '9', special: '(', specialPosition: 'top-left', zone: 'right' },
            { value: '0', display: '0', special: ')', specialPosition: 'top-left', zone: 'right' },
            { value: '-', display: '-', special: '_', specialPosition: 'top-left', zone: 'right' },
            { value: '=', display: '=', special: '+', specialPosition: 'top-left', zone: 'right' },
            { value: 'backspace', display: 'Backspace', width: 80, zone: 'right' }
        ],
        [
            { value: 'tab', display: 'Tab', width: 64, zone: 'left' },
            { value: 'q', display: 'q', special: 'Q', specialPosition: 'top-left', zone: 'left' },
            { value: 'w', display: 'w', special: 'W', specialPosition: 'top-left', zone: 'left' },
            { value: 'e', display: 'e', special: 'E', specialPosition: 'top-left', zone: 'left' },
            { value: 'r', display: 'r', special: 'R', specialPosition: 'top-left', zone: 'left' },
            { value: 't', display: 't', special: 'T', specialPosition: 'top-left', zone: 'left' },
            { value: 'y', display: 'y', special: 'Y', specialPosition: 'top-left', zone: 'right' },
            { value: 'u', display: 'u', special: 'U', specialPosition: 'top-left', zone: 'right' },
            { value: 'i', display: 'i', special: 'I', specialPosition: 'top-left', zone: 'right' },
            { value: 'o', display: 'o', special: 'O', specialPosition: 'top-left', zone: 'right' },
            { value: 'p', display: 'p', special: 'P', specialPosition: 'top-left', zone: 'right' },
            { value: '[', display: '[', special: '{', specialPosition: 'top-left', zone: 'right' },
            { value: ']', display: ']', special: '}', specialPosition: 'top-left', zone: 'right' },
            { value: '\\', display: '\\', special: '|', specialPosition: 'top-left', zone: 'right' }
        ],
        [
            { value: 'capslock', display: 'Caps', width: 72, zone: 'left' },
            { value: 'a', display: 'a', special: 'A', specialPosition: 'top-left', zone: 'left' },
            { value: 's', display: 's', special: 'S', specialPosition: 'top-left', zone: 'left' },
            { value: 'd', display: 'd', special: 'D', specialPosition: 'top-left', zone: 'left' },
            { value: 'f', display: 'f', special: 'F', specialPosition: 'top-left', zone: 'left' },
            { value: 'g', display: 'g', special: 'G', specialPosition: 'top-left', zone: 'left' },
            { value: 'h', display: 'h', special: 'H', specialPosition: 'top-left', zone: 'right' },
            { value: 'j', display: 'j', special: 'J', specialPosition: 'top-left', zone: 'right' },
            { value: 'k', display: 'k', special: 'K', specialPosition: 'top-left', zone: 'right' },
            { value: 'l', display: 'l', special: 'L', specialPosition: 'top-left', zone: 'right' },
            { value: ';', display: ';', special: ':', specialPosition: 'top-left', zone: 'right' },
            { value: '\'', display: '\'', special: '"', specialPosition: 'top-left', zone: 'right' },
            { value: 'enter', display: 'Enter', width: 96, zone: 'right' }
        ],
        [
            { value: 'shift', display: 'Shift', width: 112, zone: 'left' },
            { value: 'z', display: 'z', special: 'Z', specialPosition: 'top-left', zone: 'left' },
            { value: 'x', display: 'x', special: 'X', specialPosition: 'top-left', zone: 'left' },
            { value: 'c', display: 'c', special: 'C', specialPosition: 'top-left', zone: 'left' },
            { value: 'v', display: 'v', special: 'V', specialPosition: 'top-left', zone: 'left' },
            { value: 'b', display: 'b', special: 'B', specialPosition: 'top-left', zone: 'left' },
            { value: 'n', display: 'n', special: 'N', specialPosition: 'top-left', zone: 'right' },
            { value: 'm', display: 'm', special: 'M', specialPosition: 'top-left', zone: 'right' },
            { value: ',', display: ',', special: '<', specialPosition: 'top-left', zone: 'right' },
            { value: '.', display: '.', special: '>', specialPosition: 'top-left', zone: 'right' },
            { value: '/', display: '/', special: '?', specialPosition: 'top-left', zone: 'right' },
            { value: 'shift', display: 'Shift', width: 112, zone: 'right' }
        ],
        [
            { value: 'ctrl', display: 'Ctrl', width: 64, zone: 'left' },
            { value: 'alt', display: 'Alt', width: 60, zone: 'left' },
            { value: ' ', display: 'Space', width: 200 },
            { value: 'alt', display: 'Alt', width: 60, zone: 'right' },
            { value: 'ctrl', display: 'Ctrl', width: 64, zone: 'right' }
        ]
    ],
    ru: [
        [
            { value: 'ё', display: 'ё', special: 'Ё', specialPosition: 'top-left', zone: 'left' },
            { value: '1', display: '1', special: '!', specialPosition: 'top-left', zone: 'left' },
            { value: '2', display: '2', special: '"', specialPosition: 'top-left', zone: 'left' },
            { value: '3', display: '3', special: '№', specialPosition: 'top-left', zone: 'left' },
            { value: '4', display: '4', special: ';', specialPosition: 'top-left', zone: 'left' },
            { value: '5', display: '5', special: '%', specialPosition: 'top-left', zone: 'left' },
            { value: '6', display: '6', special: ':', specialPosition: 'top-left', zone: 'right' },
            { value: '7', display: '7', special: '?', specialPosition: 'top-left', zone: 'right' },
            { value: '8', display: '8', special: '*', specialPosition: 'top-left', zone: 'right' },
            { value: '9', display: '9', special: '(', specialPosition: 'top-left', zone: 'right' },
            { value: '0', display: '0', special: ')', specialPosition: 'top-left', zone: 'right' },
            { value: '-', display: '-', special: '_', specialPosition: 'top-left', zone: 'right' },
            { value: '=', display: '=', special: '+', specialPosition: 'top-left', zone: 'right' },
            { value: 'backspace', display: 'Backspace', width: 80, zone: 'right' }
        ],
        [
            { value: 'tab', display: 'Tab', width: 64, zone: 'left' },
            { value: 'й', display: 'й', special: 'Й', specialPosition: 'top-left', zone: 'left' },
            { value: 'ц', display: 'ц', special: 'Ц', specialPosition: 'top-left', zone: 'left' },
            { value: 'у', display: 'у', special: 'У', specialPosition: 'top-left', zone: 'left' },
            { value: 'к', display: 'к', special: 'К', specialPosition: 'top-left', zone: 'left' },
            { value: 'е', display: 'е', special: 'Е', specialPosition: 'top-left', zone: 'left' },
            { value: 'н', display: 'н', special: 'Н', specialPosition: 'top-left', zone: 'right' },
            { value: 'г', display: 'г', special: 'Г', specialPosition: 'top-left', zone: 'right' },
            { value: 'ш', display: 'ш', special: 'Ш', specialPosition: 'top-left', zone: 'right' },
            { value: 'щ', display: 'щ', special: 'Щ', specialPosition: 'top-left', zone: 'right' },
            { value: 'з', display: 'з', special: 'З', specialPosition: 'top-left', zone: 'right' },
            { value: 'х', display: 'х', special: 'Х', specialPosition: 'top-left', zone: 'right' },
            { value: 'ъ', display: 'ъ', special: 'Ъ', specialPosition: 'top-left', zone: 'right' },
            { value: '/', display: '/', special: '|', specialPosition: 'top-left', zone: 'right' }
        ],
        [
            { value: 'capslock', display: 'Caps', width: 72, zone: 'left' },
            { value: 'ф', display: 'ф', special: 'Ф', specialPosition: 'top-left', zone: 'left' },
            { value: 'ы', display: 'ы', special: 'Ы', specialPosition: 'top-left', zone: 'left' },
            { value: 'в', display: 'в', special: 'В', specialPosition: 'top-left', zone: 'left' },
            { value: 'а', display: 'а', special: 'А', specialPosition: 'top-left', zone: 'left' },
            { value: 'п', display: 'п', special: 'П', specialPosition: 'top-left', zone: 'left' },
            { value: 'р', display: 'р', special: 'Р', specialPosition: 'top-left', zone: 'right' },
            { value: 'о', display: 'о', special: 'О', specialPosition: 'top-left', zone: 'right' },
            { value: 'л', display: 'л', special: 'Л', specialPosition: 'top-left', zone: 'right' },
            { value: 'д', display: 'д', special: 'Д', specialPosition: 'top-left', zone: 'right' },
            { value: 'ж', display: 'ж', special: 'Ж', specialPosition: 'top-left', zone: 'right' },
            { value: 'э', display: 'э', special: 'Э', specialPosition: 'top-left', zone: 'right' },
            { value: 'enter', display: 'Enter', width: 96, zone: 'right' }
        ],
        [
            { value: 'shift', display: 'Shift', width: 112, zone: 'left' },
            { value: 'я', display: 'я', special: 'Я', specialPosition: 'top-left', zone: 'left' },
            { value: 'ч', display: 'ч', special: 'Ч', specialPosition: 'top-left', zone: 'left' },
            { value: 'с', display: 'с', special: 'С', specialPosition: 'top-left', zone: 'left' },
            { value: 'м', display: 'м', special: 'М', specialPosition: 'top-left', zone: 'left' },
            { value: 'и', display: 'и', special: 'И', specialPosition: 'top-left', zone: 'left' },
            { value: 'т', display: 'т', special: 'Т', specialPosition: 'top-left', zone: 'right' },
            { value: 'ь', display: 'ь', special: 'Ь', specialPosition: 'top-left', zone: 'right' },
            { value: 'б', display: 'б', special: 'Б', specialPosition: 'top-left', zone: 'right' },
            { value: 'ю', display: 'ю', special: 'Ю', specialPosition: 'top-left', zone: 'right' },
            { value: '.', display: '.', special: ',', specialPosition: 'top-left', zone: 'right' },
            { value: 'shift', display: 'Shift', width: 112, zone: 'right' }
        ],
        [
            { value: 'ctrl', display: 'Ctrl', width: 64, zone: 'left' },
            { value: 'alt', display: 'Alt', width: 60, zone: 'left' },
            { value: ' ', display: 'Space', width: 200 },
            { value: 'alt', display: 'Alt', width: 60, zone: 'right' },
            { value: 'ctrl', display: 'Ctrl', width: 64, zone: 'right' }
        ]
    ]
};

const keyboardLayout = computed(() => keyboardLayouts[props.language]);

const nextChar = computed(() => {
    return props.typed.length < props.text.length ? props.text[props.typed.length] : '';
});

const isHighlighted = (keyValue: string | undefined, zone?: 'left' | 'right') => {
    if (!keyValue) return false;
    if (keyValue === ' ') return nextChar.value === ' ';
    if (keyValue === 'enter') return nextChar.value === '\n';

    const isUpperOrSpecial = nextChar.value.match(/[A-ZА-ЯЁ~!@#$%^&*()_+{}|:"<>?]/);
    const isControlChar = nextChar.value !== '\n' && nextChar.value.match(/[\x00-\x1F\x7F]/);

    if (keyValue === 'shift') {
        if (!isUpperOrSpecial) return false;
        const keyZone = keyboardLayout.value.flat().find(k =>
            k.value === nextChar.value ||
            (k.special && k.special === nextChar.value) ||
            k.value.toLowerCase() === nextChar.value.toLowerCase() ||
            (k.special && k.special.toLowerCase() === nextChar.value.toLowerCase())
        )?.zone;
        return keyZone === 'left' ? zone === 'right' : zone === 'left';
    }

    if (['ctrl', 'alt', 'capslock'].includes(keyValue)) {
        if (!isControlChar) return false;
        const keyZone = keyboardLayout.value.flat().find(k =>
            k.value === nextChar.value ||
            (k.special && k.special === nextChar.value) ||
            k.value.toLowerCase() === nextChar.value.toLowerCase() ||
            (k.special && k.special.toLowerCase() === nextChar.value.toLowerCase())
        )?.zone;
        return keyZone === 'left' ? zone === 'right' : zone === 'left';
    }

    return nextChar.value === keyValue || nextChar.value.toLowerCase() === keyValue.toLowerCase();
};
</script>
Показать в боковой панели






Изменения применились, но клавиатура выглядит некорректно. Изучи скриншот. Изучи информацию о том, как расположены и какие имеют размеры клавиши на стандартных реальных клавиатурах, и скорректируй код компонента. Примени все необходимые изменения, без ограничений. Все клавиши должны иметь размеры и расположение как на реальной стандартной клавиатуре. Выведи полный обновленный код компонента.





Я проанализирую скриншот и скорректирую код компонента VirtualKeyboard.vue, чтобы клавиатура соответствовала стандартным размерам и расположению клавиш на реальных клавиатурах (ANSI-раскладка, так как она наиболее распространена). Проблемы на скриншоте: клавиши не выровнены равномерно, размеры клавиш не соответствуют стандартным пропорциям, и есть визуальные несоответствия (например, правый Shift и Enter выглядят слишком узкими).

Анализ стандартной ANSI-раскладки:
Единица измерения: Стандартная клавиша (например, буквы) имеет ширину 1x (в коде это 40px, так как minWidth: 40px).
Первая строка (цифры и Backspace):
Клавиши ` и цифры (1–0): 1x (40px).
Клавиши -, =: 1x (40px).
Backspace: 2x (80px).
Вторая строка (Tab, буквы, \):
Tab: 1.5x (60px).
Буквы (q–p): 1x (40px).
Клавиши [, ], \: 1x (40px).
Третья строка (Caps Lock, буквы, Enter):
Caps Lock: 1.75x (70px).
Буквы (a–l): 1x (40px).
Клавиши ;, ': 1x (40px).
Enter: 2.25x (90px).
Четвертая строка (Shift, буквы, правый Shift):
Левый Shift: 2.25x (90px).
Буквы (z–m): 1x (40px).
Клавиши ,, ., /: 1x (40px).
Правый Shift: 2.75x (110px).
Пятая строка (Ctrl, Alt, Space):
Левый и правый Ctrl: 1.25x (50px).
Левый и правый Alt: 1.25x (50px).
Space: 6.25x (250px).
Проблемы в текущем коде:
Ширины клавиш:
Tab (64px) и Caps Lock (72px) близки к стандарту, но можно уточнить до 60px и 70px.
Левый Shift (112px) больше, чем нужно (должен быть 90px).
Правый Shift (112px) меньше, чем стандарт (должен быть 110px).
Enter (96px) больше, чем нужно (должен быть 90px).
Ctrl (64px) шире, чем стандарт (должен быть 50px).
Alt (60px) шире, чем стандарт (должен быть 50px).
Space (200px) уже, чем стандарт (должен быть 250px).
Выравнивание:
Клавиши не выровнены равномерно из-за несоответствия суммарной ширины строк. Нужно добавить flex стили для равномерного распределения.
Визуальные несоответствия:
Некоторые клавиши (например, правый Shift) выглядят сжатыми из-за несоответствия пропорций.
Необходимые изменения:
Обновление ширин клавиш:
Tab: 60px (1.5x).
Caps Lock: 70px (1.75x).
Левый Shift: 90px (2.25x).
Правый Shift: 110px (2.75x).
Enter: 90px (2.25x).
Ctrl (оба): 50px (1.25x).
Alt (оба): 50px (1.25x).
Space: 250px (6.25x).
Стили для выравнивания:
Добавим max-width для контейнера клавиатуры, чтобы строки имели одинаковую ширину.
Используем justify-content: space-between вместо justify-center, чтобы клавиши равномерно распределялись.
Проверка раскладок:
Убедимся, что изменения применяются для обеих раскладок (en и ru).
Обновленный код:
html

Копировать
<template>
    <div class="keyboard flex flex-col gap-2 p-4" style="max-width: 680px; margin: 0 auto;">
        <div v-for="(row, rowIndex) in keyboardLayout" :key="rowIndex" class="flex gap-1" style="justify-content: space-between;">
            <button
                v-for="key in row"
                :key="key.value"
                :class="[
                    'p-2 border rounded text-center relative',
                    isHighlighted(key.value, key.zone) || isHighlighted(key.special, key.zone) ? 'bg-green-500 text-white' : 'bg-gray-200',
                    key.width ? `w-${key.width}` : 'w-10'
                ]"
                :style="{ minWidth: key.width ? `${key.width}px` : '40px' }"
            >
                <span class="block">{{ key.display }}</span>
                <span v-if="key.special" class="absolute text-xs" :class="key.specialPosition === 'top-left' ? 'top-0 left-1' : 'top-0 right-1'">
                    {{ key.special }}
                </span>
            </button>
        </div>
    </div>
</template>

<script lang="ts" setup>
import { computed } from 'vue';

const props = defineProps<{
    language: 'en' | 'ru';
    typed: string;
    text: string;
}>();

const keyboardLayouts: Record<'en' | 'ru', { value: string; display: string; special?: string; specialPosition?: 'top-left' | 'top-right'; width?: number; zone?: 'left' | 'right' }[][]> = {
    en: [
        [
            { value: '`', display: '`', special: '~', specialPosition: 'top-left', zone: 'left' },
            { value: '1', display: '1', special: '!', specialPosition: 'top-left', zone: 'left' },
            { value: '2', display: '2', special: '@', specialPosition: 'top-left', zone: 'left' },
            { value: '3', display: '3', special: '#', specialPosition: 'top-left', zone: 'left' },
            { value: '4', display: '4', special: '$', specialPosition: 'top-left', zone: 'left' },
            { value: '5', display: '5', special: '%', specialPosition: 'top-left', zone: 'left' },
            { value: '6', display: '6', special: '^', specialPosition: 'top-left', zone: 'right' },
            { value: '7', display: '7', special: '&', specialPosition: 'top-left', zone: 'right' },
            { value: '8', display: '8', special: '*', specialPosition: 'top-left', zone: 'right' },
            { value: '9', display: '9', special: '(', specialPosition: 'top-left', zone: 'right' },
            { value: '0', display: '0', special: ')', specialPosition: 'top-left', zone: 'right' },
            { value: '-', display: '-', special: '_', specialPosition: 'top-left', zone: 'right' },
            { value: '=', display: '=', special: '+', specialPosition: 'top-left', zone: 'right' },
            { value: 'backspace', display: 'Backspace', width: 80, zone: 'right' }
        ],
        [
            { value: 'tab', display: 'Tab', width: 60, zone: 'left' },
            { value: 'q', display: 'q', special: 'Q', specialPosition: 'top-left', zone: 'left' },
            { value: 'w', display: 'w', special: 'W', specialPosition: 'top-left', zone: 'left' },
            { value: 'e', display: 'e', special: 'E', specialPosition: 'top-left', zone: 'left' },
            { value: 'r', display: 'r', special: 'R', specialPosition: 'top-left', zone: 'left' },
            { value: 't', display: 't', special: 'T', specialPosition: 'top-left', zone: 'left' },
            { value: 'y', display: 'y', special: 'Y', specialPosition: 'top-left', zone: 'right' },
            { value: 'u', display: 'u', special: 'U', specialPosition: 'top-left', zone: 'right' },
            { value: 'i', display: 'i', special: 'I', specialPosition: 'top-left', zone: 'right' },
            { value: 'o', display: 'o', special: 'O', specialPosition: 'top-left', zone: 'right' },
            { value: 'p', display: 'p', special: 'P', specialPosition: 'top-left', zone: 'right' },
            { value: '[', display: '[', special: '{', specialPosition: 'top-left', zone: 'right' },
            { value: ']', display: ']', special: '}', specialPosition: 'top-left', zone: 'right' },
            { value: '\\', display: '\\', special: '|', specialPosition: 'top-left', zone: 'right' }
        ],
        [
            { value: 'capslock', display: 'Caps', width: 70, zone: 'left' },
            { value: 'a', display: 'a', special: 'A', specialPosition: 'top-left', zone: 'left' },
            { value: 's', display: 's', special: 'S', specialPosition: 'top-left', zone: 'left' },
            { value: 'd', display: 'd', special: 'D', specialPosition: 'top-left', zone: 'left' },
            { value: 'f', display: 'f', special: 'F', specialPosition: 'top-left', zone: 'left' },
            { value: 'g', display: 'g', special: 'G', specialPosition: 'top-left', zone: 'left' },
            { value: 'h', display: 'h', special: 'H', specialPosition: 'top-left', zone: 'right' },
            { value: 'j', display: 'j', special: 'J', specialPosition: 'top-left', zone: 'right' },
            { value: 'k', display: 'k', special: 'K', specialPosition: 'top-left', zone: 'right' },
            { value: 'l', display: 'l', special: 'L', specialPosition: 'top-left', zone: 'right' },
            { value: ';', display: ';', special: ':', specialPosition: 'top-left', zone: 'right' },
            { value: '\'', display: '\'', special: '"', specialPosition: 'top-left', zone: 'right' },
            { value: 'enter', display: 'Enter', width: 90, zone: 'right' }
        ],
        [
            { value: 'shift', display: 'Shift', width: 90, zone: 'left' },
            { value: 'z', display: 'z', special: 'Z', specialPosition: 'top-left', zone: 'left' },
            { value: 'x', display: 'x', special: 'X', specialPosition: 'top-left', zone: 'left' },
            { value: 'c', display: 'c', special: 'C', specialPosition: 'top-left', zone: 'left' },
            { value: 'v', display: 'v', special: 'V', specialPosition: 'top-left', zone: 'left' },
            { value: 'b', display: 'b', special: 'B', specialPosition: 'top-left', zone: 'left' },
            { value: 'n', display: 'n', special: 'N', عدالت: 'top-left', zone: 'right' },
            { value: 'm', display: 'm', special: 'M', specialPosition: 'top-left', zone: 'right' },
            { value: ',', display: ',', special: '<', specialPosition: 'top-left', zone: 'right' },
            { value: '.', display: '.', special: '>', specialPosition: 'top-left', zone: 'right' },
            { value: '/', display: '/', special: '?', specialPosition: 'top-left', zone: 'right' },
            { value: 'shift', display: 'Shift', width: 110, zone: 'right' }
        ],
        [
            { value: 'ctrl', display: 'Ctrl', width: 50, zone: 'left' },
            { value: 'alt', display: 'Alt', width: 50, zone: 'left' },
            { value: ' ', display: 'Space', width: 250 },
            { value: 'alt', display: 'Alt', width: 50, zone: 'right' },
            { value: 'ctrl', display: 'Ctrl', width: 50, zone: 'right' }
        ]
    ],
    ru: [
        [
            { value: 'ё', display: 'ё', special: 'Ё', specialPosition: 'top-left', zone: 'left' },
            { value: '1', display: '1', special: '!', specialPosition: 'top-left', zone: 'left' },
            { value: '2', display: '2', special: '"', specialPosition: 'top-left', zone: 'left' },
            { value: '3', display: '3', special: '№', specialPosition: 'top-left', zone: 'left' },
            { value: '4', display: '4', special: ';', specialPosition: 'top-left', zone: 'left' },
            { value: '5', display: '5', special: '%', specialPosition: 'top-left', zone: 'left' },
            { value: '6', display: '6', special: ':', specialPosition: 'top-left', zone: 'right' },
            { value: '7', display: '7', special: '?', specialPosition: 'top-left', zone: 'right' },
            { value: '8', display: '8', special: '*', specialPosition: 'top-left', zone: 'right' },
            { value: '9', display: '9', special: '(', specialPosition: 'top-left', zone: 'right' },
            { value: '0', display: '0', special: ')', specialPosition: 'top-left', zone: 'right' },
            { value: '-', display: '-', special: '_', specialPosition: 'top-left', zone: 'right' },
            { value: '=', display: '=', special: '+', specialPosition: 'top-left', zone: 'right' },
            { value: 'backspace', display: 'Backspace', width: 80, zone: 'right' }
        ],
        [
            { value: 'tab', display: 'Tab', width: 60, zone: 'left' },
            { value: 'й', display: 'й', special: 'Й', specialPosition: 'top-left', zone: 'left' },
            { value: 'ц', display: 'ц', special: 'Ц', specialPosition: 'top-left', zone: 'left' },
            { value: 'у', display: 'у', special: 'У', specialPosition: 'top-left', zone: 'left' },
            { value: 'к', display: 'к', special: 'К', specialPosition: 'top-left', zone: 'left' },
            { value: 'е', display: 'е', special: 'Е', specialPosition: 'top-left', zone: 'left' },
            { value: 'н', display: 'н', special: 'Н', specialPosition: 'top-left', zone: 'right' },
            { value: 'г', display: 'г', special: 'Г', specialPosition: 'top-left', zone: 'right' },
            { value: 'ш', display: 'ш', special: 'Ш', specialPosition: 'top-left', zone: 'right' },
            { value: 'щ', display: 'щ', special: 'Щ', specialPosition: 'top-left', zone: 'right' },
            { value: 'з', display: 'з', special: 'З', specialPosition: 'top-left', zone: 'right' },
            { value: 'х', display: 'х', special: 'Х', specialPosition: 'top-left', zone: 'right' },
            { value: 'ъ', display: 'ъ', special: 'Ъ', specialPosition: 'top-left', zone: 'right' },
            { value: '/', display: '/', special: '|', specialPosition: 'top-left', zone: 'right' }
        ],
        [
            { value: 'capslock', display: 'Caps', width: 70, zone: 'left' },
            { value: 'ф', display: 'ф', special: 'Ф', specialPosition: 'top-left', zone: 'left' },
            { value: 'ы', display: 'ы', special: 'Ы', specialPosition: 'top-left', zone: 'left' },
            { value: 'в', display: 'в', special: 'В', specialPosition: 'top-left', zone: 'left' },
            { value: 'а', display: 'а', special: 'А', specialPosition: 'top-left', zone: 'left' },
            { value: 'п', display: 'п', special: 'П', specialPosition: 'top-left', zone: 'left' },
            { value: 'р', display: 'р', special: 'Р', specialPosition: 'top-left', zone: 'right' },
            { value: 'о', display: 'о', special: 'О', specialPosition: 'top-left', zone: 'right' },
            { value: 'л', display: 'л', special: 'Л', specialPosition: 'top-left', zone: 'right' },
            { value: 'д', display: 'д', special: 'Д', specialPosition: 'top-left', zone: 'right' },
            { value: 'ж', display: 'ж', special: 'Ж', specialPosition: 'top-left', zone: 'right' },
            { value: 'э', display: 'э', special: 'Э', specialPosition: 'top-left', zone: 'right' },
            { value: 'enter', display: 'Enter', width: 90, zone: 'right' }
        ],
        [
            { value: 'shift', display: 'Shift', width: 90, zone: 'left' },
            { value: 'я', display: 'я', special: 'Я', specialPosition: 'top-left', zone: 'left' },
            { value: 'ч', display: 'ч', special: 'Ч', specialPosition: 'top-left', zone: 'left' },
            { value: 'с', display: 'с', special: 'С', specialPosition: 'top-left', zone: 'left' },
            { value: 'м', display: 'м', special: 'М', specialPosition: 'top-left', zone: 'left' },
            { value: 'и', display: 'и', special: 'И', specialPosition: 'top-left', zone: 'left' },
            { value: 'т', display: 'т', special: 'Т', specialPosition: 'top-left', zone: 'right' },
            { value: 'ь', display: 'ь', special: 'Ь', specialPosition: 'top-left', zone: 'right' },
            { value: 'б', display: 'б', special: 'Б', specialPosition: 'top-left', zone: 'right' },
            { value: 'ю', display: 'ю', special: 'Ю', specialPosition: 'top-left', zone: 'right' },
            { value: '.', display: '.', special: ',', specialPosition: 'top-left', zone: 'right' },
            { value: 'shift', display: 'Shift', width: 110, zone: 'right' }
        ],
        [
            { value: 'ctrl', display: 'Ctrl', width: 50, zone: 'left' },
            { value: 'alt', display: 'Alt', width: 50, zone: 'left' },
            { value: ' ', display: 'Space', width: 250 },
            { value: 'alt', display: 'Alt', width: 50, zone: 'right' },
            { value: 'ctrl', display: 'Ctrl', width: 50, zone: 'right' }
        ]
    ]
};

const keyboardLayout = computed(() => keyboardLayouts[props.language]);

const nextChar = computed(() => {
    return props.typed.length < props.text.length ? props.text[props.typed.length] : '';
});

const isHighlighted = (keyValue: string | undefined, zone?: 'left' | 'right') => {
    if (!keyValue) return false;
    if (keyValue === ' ') return nextChar.value === ' ';
    if (keyValue === 'enter') return nextChar.value === '\n';

    const isUpperOrSpecial = nextChar.value.match(/[A-ZА-ЯЁ~!@#$%^&*()_+{}|:"<>?]/);
    const isControlChar = nextChar.value !== '\n' && nextChar.value.match(/[\x00-\x1F\x7F]/);

    if (keyValue === 'shift') {
        if (!isUpperOrSpecial) return false;
        const keyZone = keyboardLayout.value.flat().find(k =>
            k.value === nextChar.value ||
            (k.special && k.special === nextChar.value) ||
            k.value.toLowerCase() === nextChar.value.toLowerCase() ||
            (k.special && k.special.toLowerCase() === nextChar.value.toLowerCase())
        )?.zone;
        return keyZone === 'left' ? zone === 'right' : zone === 'left';
    }

    if (['ctrl', 'alt', 'capslock'].includes(keyValue)) {
        if (!isControlChar) return false;
        const keyZone = keyboardLayout.value.flat().find(k =>
            k.value === nextChar.value ||
            (k.special && k.special === nextChar.value) ||
            k.value.toLowerCase() === nextChar.value.toLowerCase() ||
            (k.special && k.special.toLowerCase() === nextChar.value.toLowerCase())
        )?.zone;
        return keyZone === 'left' ? zone === 'right' : zone === 'left';
    }

    return nextChar.value === keyValue || nextChar.value.toLowerCase() === keyValue.toLowerCase();
};
</script>
Показать в боковой панели






Все верно, за исключением клавиш Alt. Нужно прижать их вплотную к клавише Space. Минимальные изменения.




Чтобы прижать клавиши Alt вплотную к клавише Space, нужно скорректировать расположение клавиш в пятой строке клавиатуры. В текущем коде Alt и Space разделены промежутками из-за стиля justify-content: space-between и gap-1 на уровне строки. Мы можем:

Оставить ширину Alt (50px) и Space (250px) без изменений, так как они соответствуют стандарту.
Убрать промежутки между Alt и Space, создав отдельный контейнер для центральной части пятой строки (левый Ctrl, левый Alt, Space, правый Alt, правый Ctrl), где не будет gap между этими тремя центральными клавишами (Alt, Space, Alt).
Изменения:
В пятой строке создадим вложенный div для группы Alt, Space, Alt с display: flex и gap-0, чтобы убрать промежутки.
Оставим Ctrl снаружи этого контейнера, чтобы сохранить выравнивание по краям.
Обновленный код:
html

Копировать
<template>
    <div class="keyboard flex flex-col gap-2 p-4" style="max-width: 680px; margin: 0 auto;">
        <div v-for="(row, rowIndex) in keyboardLayout" :key="rowIndex" class="flex gap-1" style="justify-content: space-between;">
            <template v-if="rowIndex === 4">
                <!-- Пятая строка: Ctrl | (Alt Space Alt) | Ctrl -->
                <button
                    :key="row[0].value"
                    :class="[
                        'p-2 border rounded text-center relative',
                        isHighlighted(row[0].value, row[0].zone) ? 'bg-green-500 text-white' : 'bg-gray-200',
                        row[0].width ? `w-${row[0].width}` : 'w-10'
                    ]"
                    :style="{ minWidth: row[0].width ? `${row[0].width}px` : '40px' }"
                >
                    <span class="block">{{ row[0].display }}</span>
                </button>
                <div class="flex" style="gap: 0;">
                    <button
                        v-for="key in row.slice(1, 4)"
                        :key="key.value"
                        :class="[
                            'p-2 border rounded text-center relative',
                            isHighlighted(key.value, key.zone) ? 'bg-green-500 text-white' : 'bg-gray-200',
                            key.width ? `w-${key.width}` : 'w-10'
                        ]"
                        :style="{ minWidth: key.width ? `${key.width}px` : '40px' }"
                    >
                        <span class="block">{{ key.display }}</span>
                    </button>
                </div>
                <button
                    :key="row[4].value"
                    :class="[
                        'p-2 border rounded text-center relative',
                        isHighlighted(row[4].value, row[4].zone) ? 'bg-green-500 text-white' : 'bg-gray-200',
                        row[4].width ? `w-${row[4].width}` : 'w-10'
                    ]"
                    :style="{ minWidth: row[4].width ? `${row[4].width}px` : '40px' }"
                >
                    <span class="block">{{ row[4].display }}</span>
                </button>
            </template>
            <template v-else>
                <!-- Остальные строки -->
                <button
                    v-for="key in row"
                    :key="key.value"
                    :class="[
                        'p-2 border rounded text-center relative',
                        isHighlighted(key.value, key.zone) || isHighlighted(key.special, key.zone) ? 'bg-green-500 text-white' : 'bg-gray-200',
                        key.width ? `w-${key.width}` : 'w-10'
                    ]"
                    :style="{ minWidth: key.width ? `${key.width}px` : '40px' }"
                >
                    <span class="block">{{ key.display }}</span>
                    <span v-if="key.special" class="absolute text-xs" :class="key.specialPosition === 'top-left' ? 'top-0 left-1' : 'top-0 right-1'">
                        {{ key.special }}
                    </span>
                </button>
            </template>
        </div>
    </div>
</template>

<script lang="ts" setup>
import { computed } from 'vue';

const props = defineProps<{
    language: 'en' | 'ru';
    typed: string;
    text: string;
}>();

const keyboardLayouts: Record<'en' | 'ru', { value: string; display: string; special?: string; specialPosition?: 'top-left' | 'top-right'; width?: number; zone?: 'left' | 'right' }[][]> = {
    en: [
        [
            { value: '`', display: '`', special: '~', specialPosition: 'top-left', zone: 'left' },
            { value: '1', display: '1', special: '!', specialPosition: 'top-left', zone: 'left' },
            { value: '2', display: '2', special: '@', specialPosition: 'top-left', zone: 'left' },
            { value: '3', display: '3', special: '#', specialPosition: 'top-left', zone: 'left' },
            { value: '4', display: '4', special: '$', specialPosition: 'top-left', zone: 'left' },
            { value: '5', display: '5', special: '%', specialPosition: 'top-left', zone: 'left' },
            { value: '6', display: '6', special: '^', specialPosition: 'top-left', zone: 'right' },
            { value: '7', display: '7', special: '&', specialPosition: 'top-left', zone: 'right' },
            { value: '8', display: '8', special: '*', specialPosition: 'top-left', zone: 'right' },
            { value: '9', display: '9', special: '(', specialPosition: 'top-left', zone: 'right' },
            { value: '0', display: '0', special: ')', specialPosition: 'top-left', zone: 'right' },
            { value: '-', display: '-', special: '_', specialPosition: 'top-left', zone: 'right' },
            { value: '=', display: '=', special: '+', specialPosition: 'top-left', zone: 'right' },
            { value: 'backspace', display: 'Backspace', width: 80, zone: 'right' }
        ],
        [
            { value: 'tab', display: 'Tab', width: 60, zone: 'left' },
            { value: 'q', display: 'q', special: 'Q', specialPosition: 'top-left', zone: 'left' },
            { value: 'w', display: 'w', special: 'W', specialPosition: 'top-left', zone: 'left' },
            { value: 'e', display: 'e', special: 'E', specialPosition: 'top-left', zone: 'left' },
            { value: 'r', display: 'r', special: 'R', specialPosition: 'top-left', zone: 'left' },
            { value: 't', display: 't', special: 'T', specialPosition: 'top-left', zone: 'left' },
            { value: 'y', display: 'y', special: 'Y', specialPosition: 'top-left', zone: 'right' },
            { value: 'u', display: 'u', special: 'U', specialPosition: 'top-left', zone: 'right' },
            { value: 'i', display: 'i', special: 'I', specialPosition: 'top-left', zone: 'right' },
            { value: 'o', display: 'o', special: 'O', specialPosition: 'top-left', zone: 'right' },
            { value: 'p', display: 'p', special: 'P', specialPosition: 'top-left', zone: 'right' },
            { value: '[', display: '[', special: '{', specialPosition: 'top-left', zone: 'right' },
            { value: ']', display: ']', special: '}', specialPosition: 'top-left', zone: 'right' },
            { value: '\\', display: '\\', special: '|', specialPosition: 'top-left', zone: 'right' }
        ],
        [
            { value: 'capslock', display: 'Caps', width: 70, zone: 'left' },
            { value: 'a', display: 'a', special: 'A', specialPosition: 'top-left', zone: 'left' },
            { value: 's', display: 's', special: 'S', specialPosition: 'top-left', zone: 'left' },
            { value: 'd', display: 'd', special: 'D', specialPosition: 'top-left', zone: 'left' },
            { value: 'f', display: 'f', special: 'F', specialPosition: 'top-left', zone: 'left' },
            { value: 'g', display: 'g', special: 'G', specialPosition: 'top-left', zone: 'left' },
            { value: 'h', display: 'h', special: 'H', specialPosition: 'top-left', zone: 'right' },
            { value: 'j', display: 'j', special: 'J', specialPosition: 'top-left', zone: 'right' },
            { value: 'k', display: 'k', special: 'K', specialPosition: 'top-left', zone: 'right' },
            { value: 'l', display: 'l', special: 'L', specialPosition: 'top-left', zone: 'right' },
            { value: ';', display: ';', special: ':', specialPosition: 'top-left', zone: 'right' },
            { value: '\'', display: '\'', special: '"', specialPosition: 'top-left', zone: 'right' },
            { value: 'enter', display: 'Enter', width: 90, zone: 'right' }
        ],
        [
            { value: 'shift', display: 'Shift', width: 90, zone: 'left' },
            { value: 'z', display: 'z', special: 'Z', specialPosition: 'top-left', zone: 'left' },
            { value: 'x', display: 'x', special: 'X', specialPosition: 'top-left', zone: 'left' },
            { value: 'c', display: 'c', special: 'C', specialPosition: 'top-left', zone: 'left' },
            { value: 'v', display: 'v', special: 'V', specialPosition: 'top-left', zone: 'left' },
            { value: 'b', display: 'b', special: 'B', specialPosition: 'top-left', zone: 'left' },
            { value: 'n', display: 'n', special: 'N', specialPosition: 'top-left', zone: 'right' },
            { value: 'm', display: 'm', special: 'M', specialPosition: 'top-left', zone: 'right' },
            { value: ',', display: ',', special: '<', specialPosition: 'top-left', zone: 'right' },
            { value: '.', display: '.', special: '>', specialPosition: 'top-left', zone: 'right' },
            { value: '/', display: '/', special: '>', specialPosition: 'top-left', zone: 'right' },
            { value: 'shift', display: 'Shift', width: 110, zone: 'right' }
        ],
        [
            { value: 'ctrl', display: 'Ctrl', width: 50, zone: 'left' },
            { value: 'alt', display: 'Alt', width: 50, zone: 'left' },
            { value: ' ', display: 'Space', width: 250 },
            { value: 'alt', display: 'Alt', width: 50, zone: 'right' },
            { value: 'ctrl', display: 'Ctrl', width: 50, zone: 'right' }
        ]
    ],
    ru: [
        [
            { value: 'ё', display: 'ё', special: 'Ё', specialPosition: 'top-left', zone: 'left' },
            { value: '1', display: '1', special: '!', specialPosition: 'top-left', zone: 'left' },
            { value: '2', display: '2', special: '"', specialPosition: 'top-left', zone: 'left' },
            { value: '3', display: '3', special: '№', specialPosition: 'top-left', zone: 'left' },
            { value: '4', display: '4', special: ';', specialPosition: 'top-left', zone: 'left' },
            { value: '5', display: '5', special: '%', specialPosition: 'top-left', zone: 'left' },
            { value: '6', display: '6', special: ':', specialPosition: 'top-left', zone: 'right' },
            { value: '7', display: '7', special: '?', specialPosition: 'top-left', zone: 'right' },
            { value: '8', display: '8', special: '*', specialPosition: 'top-left', zone: 'right' },
            { value: '9', display: '9', special: '(', specialPosition: 'top-left', zone: 'right' },
            { value: '0', display: '0', special: ')', specialPosition: 'top-left', zone: 'right' },
            { value: '-', display: '-', special: '_', specialPosition: 'top-left', zone: 'right' },
            { value: '=', display: '=', special: '+', specialPosition: 'top-left', zone: 'right' },
            { value: 'backspace', display: 'Backspace', width: 80, zone: 'right' }
        ],
        [
            { value: 'tab', display: 'Tab', width: 60, zone: 'left' },
            { value: 'й', display: 'й', special: 'Й', specialPosition: 'top-left', zone: 'left' },
            { value: 'ц', display: 'ц', special: 'Ц', specialPosition: 'top-left', zone: 'left' },
            { value: 'у', display: 'у', special: 'У', specialPosition: 'top-left', zone: 'left' },
            { value: 'к', display: 'к', special: 'К', specialPosition: 'top-left', zone: 'left' },
            { value: 'е', display: 'е', special: 'Е', specialPosition: 'top-left', zone: 'left' },
            { value: 'н', display: 'н', special: 'Н', specialPosition: 'top-left', zone: 'right' },
            { value: 'г', display: 'г', special: 'Г', specialPosition: 'top-left', zone: 'right' },
            { value: 'ш', display: 'ш', special: 'Ш', specialPosition: 'top-left', zone: 'right' },
            { value: 'щ', display: 'щ', special: 'Щ', specialPosition: 'top-left', zone: 'right' },
            { value: 'з', display: 'з', special: 'З', specialPosition: 'top-left', zone: 'right' },
            { value: 'х', display: 'х', special: 'Х', specialPosition: 'top-left', zone: 'right' },
            { value: 'ъ', display: 'ъ', special: 'Ъ', specialPosition: 'top-left', zone: 'right' },
            { value: '/', display: '/', special: '|', specialPosition: 'top-left', zone: 'right' }
        ],
        [
            { value: 'capslock', display: 'Caps', width: 70, zone: 'left' },
            { value: 'ф', display: 'ф', special: 'Ф', specialPosition: 'top-left', zone: 'left' },
            { value: 'ы', display: 'ы', special: 'Ы', specialPosition: 'top-left', zone: 'left' },
            { value: 'в', display: 'в', special: 'В', specialPosition: 'top-left', zone: 'left' },
            { value: 'а', display: 'а', special: 'А', specialPosition: 'top-left', zone: 'left' },
            { value: 'п', display: 'п', special: 'П', specialPosition: 'top-left', zone: 'left' },
            { value: 'р', display: 'р', special: 'Р', specialPosition: 'top-left', zone: 'right' },
            { value: 'о', display: 'о', special: 'О', specialPosition: 'top-left', zone: 'right' },
            { value: 'л', display: 'л', special: 'Л', specialPosition: 'top-left', zone: 'right' },
            { value: 'д', display: 'д', special: 'Д', specialPosition: 'top-left', zone: 'right' },
            { value: 'ж', display: 'ж', special: 'Ж', specialPosition: 'top-left', zone: 'right' },
            { value: 'э', display: 'э', special: 'Э', specialPosition: 'top-left', zone: 'right' },
            { value: 'enter', display: 'Enter', width: 90, zone: 'right' }
        ],
        [
            { value: 'shift', display: 'Shift', width: 90, zone: 'left' },
            { value: 'я', display: 'я', special: 'Я', specialPosition: 'top-left', zone: 'left' },
            { value: 'ч', display: 'ч', special: 'Ч', specialPosition: 'top-left', zone: 'left' },
            { value: 'с', display: 'с', special: 'С', specialPosition: 'top-left', zone: 'left' },
            { value: 'м', display: 'м', special: 'М', specialPosition: 'top-left', zone: 'left' },
            { value: 'и', display: 'и', special: 'И', specialPosition: 'top-left', zone: 'left' },
            { value: 'т', display: 'т', special: 'Т', specialPosition: 'top-left', zone: 'right' },
            { value: 'ь', display: 'ь', special: 'Ь', specialPosition: 'top-left', zone: 'right' },
            { value: 'б', display: 'б', special: 'Б', specialPosition: 'top-left', zone: 'right' },
            { value: 'ю', display: 'ю', special: 'Ю', specialPosition: 'top-left', zone: 'right' },
            { value: '.', display: '.', special: ',', specialPosition: 'top-left', zone: 'right' },
            { value: 'shift', display: 'Shift', width: 110, zone: 'right' }
        ],
        [
            { value: 'ctrl', display: 'Ctrl', width: 50, zone: 'left' },
            { value: 'alt', display: 'Alt', width: 50, zone: 'left' },
            { value: ' ', display: 'Space', width: 250 },
            { value: 'alt', display: 'Alt', width: 50, zone: 'right' },
            { value: 'ctrl', display: 'Ctrl', width: 50, zone: 'right' }
        ]
    ]
};

const keyboardLayout = computed(() => keyboardLayouts[props.language]);

const nextChar = computed(() => {
    return props.typed.length < props.text.length ? props.text[props.typed.length] : '';
});

const isHighlighted = (keyValue: string | undefined, zone?: 'left' | 'right') => {
    if (!keyValue) return false;
    if (keyValue === ' ') return nextChar.value === ' ';
    if (keyValue === 'enter') return nextChar.value === '\n';

    const isUpperOrSpecial = nextChar.value.match(/[A-ZА-ЯЁ~!@#$%^&*()_+{}|:"<>?]/);
    const isControlChar = nextChar.value !== '\n' && nextChar.value.match(/[\x00-\x1F\x7F]/);

    if (keyValue === 'shift') {
        if (!isUpperOrSpecial) return false;
        const keyZone = keyboardLayout.value.flat().find(k =>
            k.value === nextChar.value ||
            (k.special && k.special === nextChar.value) ||
            k.value.toLowerCase() === nextChar.value.toLowerCase() ||
            (k.special && k.special.toLowerCase() === nextChar.value.toLowerCase())
        )?.zone;
        return keyZone === 'left' ? zone === 'right' : zone === 'left';
    }

    if (['ctrl', 'alt', 'capslock'].includes(keyValue)) {
        if (!isControlChar) return false;
        const keyZone = keyboardLayout.value.flat().find(k =>
            k.value === nextChar.value ||
            (k.special && k.special === nextChar.value) ||
            k.value.toLowerCase() === nextChar.value.toLowerCase() ||
            (k.special && k.special.toLowerCase() === nextChar.value.toLowerCase())
        )?.zone;
        return keyZone === 'left' ? zone === 'right' : zone === 'left';
    }

    return nextChar.value === keyValue || nextChar.value.toLowerCase() === keyValue.toLowerCase();
};
</script>
Показать в боковой панели






Добавь горизонтальные отступы между клавишами Alt и Space, такие же по значению, как и между другими клавишами.




В текущем коде горизонтальные отступы между клавишами задаются через gap-1 (1 rem) на уровне строки (flex gap-1). Однако в пятой строке мы убрали отступы между Alt и Space, установив gap: 0 для их контейнера. Чтобы добавить такие же отступы, как между другими клавишами (1 rem), нужно вернуть gap-1 для контейнера с Alt, Space, Alt.

Изменения:
В пятой строке заменим style="gap: 0;" на класс gap-1, чтобы восстановить отступы между Alt и Space, соответствующие другим клавишам.
Обновленный код:
html

Копировать
<template>
    <div class="keyboard flex flex-col gap-2 p-4" style="max-width: 680px; margin: 0 auto;">
        <div v-for="(row, rowIndex) in keyboardLayout" :key="rowIndex" class="flex gap-1" style="justify-content: space-between;">
            <template v-if="rowIndex === 4">
                <!-- Пятая строка: Ctrl | (Alt Space Alt) | Ctrl -->
                <button
                    :key="row[0].value"
                    :class="[
                        'p-2 border rounded text-center relative',
                        isHighlighted(row[0].value, row[0].zone) ? 'bg-green-500 text-white' : 'bg-gray-200',
                        row[0].width ? `w-${row[0].width}` : 'w-10'
                    ]"
                    :style="{ minWidth: row[0].width ? `${row[0].width}px` : '40px' }"
                >
。只要: 'top-left', zone: 'left' },
            { value: '5', display: '5', special: '%', specialPosition: 'top-left', zone: 'left' },
            { value: '6', display: '6', special: ':', specialPosition: 'top-left', zone: 'right' },
            { value: '7', display: '7', special: '?', specialPosition: 'top-left', zone: 'right' },
            { value: '8', display: '8', special: '*', specialPosition: 'top-left', zone: 'right' },
            { value: '9', display: '9', special: '(', specialPosition: 'top-left', zone: 'right' },
            { value: '0', display: '0', special: ')', specialPosition: 'top-left', zone: 'right' },
            { value: '-', display: '-', special: '_', specialPosition: 'top-left', zone: 'right' },
            { value: '=', display: '=', special: '+', specialPosition: 'top-left', zone: 'right' },
            { value: 'backspace', display: 'Backspace', width: 80, zone: 'right' }
        ],
        [
            { value: 'tab', display: 'Tab', width: 60, zone: 'left' },
            { value: 'й', display: 'й', special: 'Й', specialPosition: 'top-left', zone: 'left' },
            { value: 'ц', display: 'ц', special: 'Ц', specialPosition: 'top-left', zone: 'left' },
            { value: 'у', display: 'у', special: 'У', specialPosition: 'top-left', zone: 'left' },
            { value: 'к', display: 'к', special: 'К', specialPosition: 'top-left', zone: 'left' },
            { value: 'е', display: 'е', special: 'Е', specialPosition: 'top-left', zone: 'left' },
            { value: 'н', display: 'н', special: 'Н', specialPosition: 'top-left', zone: 'right' },
            { value: 'г', display: 'г', special: 'Г', specialPosition: 'top-left', zone: 'right' },
            { value: 'ш', display: 'ш', special: 'Ш', specialPosition: 'top-left', zone: 'right' },
            { value: 'щ', display: 'щ', special: 'Щ', specialPosition: 'top-left', zone: 'right' },
            { value: 'з', display: 'з', special: 'З', specialPosition: 'top-left', zone: 'right' },
            { value: 'х', display: 'х', special: 'Х', specialPosition: 'top-left', zone: 'right' },
            { value: 'ъ', display: 'ъ', special: 'Ъ', specialPosition: 'top-left', zone: 'right' },
            { value: '/', display: '/', special: '|', specialPosition: 'top-left', zone: 'right' }
        ],
        [
            { value: 'capslock', display: 'Caps', width: 70, zone: 'left' },
            { value: 'ф', display: 'ф', special: 'Ф', specialPosition: 'top-left', zone: 'left' },
            { value: 'ы', display: 'ы', special: 'Ы', specialPosition: 'top-left', zone: 'left' },
            { value: 'в', display: 'в', special: 'В', specialPosition: 'top-left', zone: 'left' },
            { value: 'а', display: 'а', special: 'А', specialPosition: 'top-left', zone: 'left' },
            { value: 'п', display: 'п', special: 'П', specialPosition: 'top-left', zone: 'left' },
            { value: 'р', display: 'р', special: 'Р', specialPosition: 'top-left', zone: 'right' },
            { value: 'о', display: 'о', special: 'О', specialPosition: 'top-left', zone: 'right' },
            { value: 'л', display: 'л', special: 'Л', specialPosition: 'top-left', zone: 'right' },
            { value: 'д', display: 'д', special: 'Д', specialPosition: 'top-left', zone: 'right' },
            { value: 'ж', display: 'ж', special: 'Ж', specialPosition: 'top-left', zone: 'right' },
            { value: 'э', display: 'э', special: 'Э', specialPosition: 'top-left', zone: 'right' },
            { value: 'enter', display: 'Enter', width: 90, zone: 'right' }
        ],
        [
            { value: 'shift', display: 'Shift', width: 90, zone: 'left' },
            { value: 'я', display: 'я', special: 'Я', specialPosition: 'top-left', zone: 'left' },
            { value: 'ч', display: 'ч', special: 'Ч', specialPosition: 'top-left', zone: 'left' },
            { value: 'с', display: 'с', special: 'С', specialPosition: 'top-left', zone: 'left' },
            { value: 'м', display: 'м', special: 'М', specialPosition: 'top-left', zone: 'left' },
            { value: 'и', display: 'и', special: 'И', specialPosition: 'top-left', zone: 'left' },
            { value: 'т', display: 'т', special: 'Т', specialPosition: 'top-left', zone: 'right' },
            { value: 'ь', display: 'ь', special: 'Ь', specialPosition: 'top-left', zone: 'right' },
            { value: 'б', display: 'б', special: 'Б', specialPosition: 'top-left', zone: 'right' },
            { value: 'ю', display: 'ю', special: 'Ю', specialPosition: 'top-left', zone: 'right' },
            { value: '.', display: '.', special: ',', specialPosition: 'top-left', zone: 'right' },
            { value: 'shift', display: 'Shift', width: 110, zone: 'right' }
        ],
        [
            { value: 'ctrl', display: 'Ctrl', width: 50, zone: 'left' },
            { value: 'alt', display: 'Alt', width: 50, zone: 'left' },
            { value: ' ', display: 'Space', width: 250 },
            { value: 'alt', display: 'Alt', width: 50, zone: 'right' },
            { value: 'ctrl', display: 'Ctrl', width: 50, zone: 'right' }
        ]
    ]
};

const keyboardLayout = computed(() => keyboardLayouts[props.language]);

const nextChar = computed(() => {
    return props.typed.length < props.text.length ? props.text[props.typed.length] : '';
});

const isHighlighted = (keyValue: string | undefined, zone?: 'left' | 'right') => {
    if (!keyValue) return false;
    if (keyValue === ' ') return nextChar.value === ' ';
    if (keyValue === 'enter') return nextChar.value === '\n';

    const isUpperOrSpecial = nextChar.value.match(/[A-ZА-ЯЁ~!@#$%^&*()_+{}|:"<>?]/);
    const isControlChar = nextChar.value !== '\n' && nextChar.value.match(/[\x00-\x1F\x7F]/);

    if (keyValue === 'shift') {
        if (!isUpperOrSpecial) return false;
        const keyZone = keyboardLayout.value.flat().find(k =>
            k.value === nextChar.value ||
            (k.special && k.special === nextChar.value) ||
            k.value.toLowerCase() === nextChar.value.toLowerCase() ||
            (k.special && k.special.toLowerCase() === nextChar.value.toLowerCase())
        )?.zone;
        return keyZone === 'left' ? zone === 'right' : zone === 'left';
    }

    if (['ctrl', 'alt', 'capslock'].includes(keyValue)) {
        if (!isControlChar) return false;
        const keyZone = keyboardLayout.value.flat().find(k =>
            k.value === nextChar.value ||
            (k.special && k.special === nextChar.value) ||
            k.value.toLowerCase() === nextChar.value.toLowerCase() ||
            (k.special && k.special.toLowerCase() === nextChar.value.toLowerCase())
        )?.zone;
        return keyZone === 'left' ? zone === 'right' : zone === 'left';
    }

    return nextChar.value === keyValue || nextChar.value.toLowerCase() === keyValue.toLowerCase();
};
</script>
Показать в боковой панели






Повтори вывод кода, есть ошибки из-за интернет соединения видимо.




Повторяю вывод кода компонента VirtualKeyboard.vue с учетом всех предыдущих изменений, включая последние корректировки для добавления горизонтальных отступов между клавишами Alt и Space.

html

Копировать
<template>
    <div class="keyboard flex flex-col gap-2 p-4" style="max-width: 680px; margin: 0 auto;">
        <div v-for="(row, rowIndex) in keyboardLayout" :key="rowIndex" class="flex gap-1" style="justify-content: space-between;">
            <template v-if="rowIndex === 4">
                <!-- Пятая строка: Ctrl | (Alt Space Alt) | Ctrl -->
                <button
                    :key="row[0].value"
                    :class="[
                        'p-2 border rounded text-center relative',
                        isHighlighted(row[0].value, row[0].zone) ? 'bg-green-500 text-white' : 'bg-gray-200',
                        row[0].width ? `w-${row[0].width}` : 'w-10'
                    ]"
                    :style="{ minWidth: row[0].width ? `${row[0].width}px` : '40px' }"
                >
                    <span class="block">{{ row[0].display }}</span>
                </button>
                <div class="flex gap-1">
                    <button
                        v-for="key in row.slice(1, 4)"
                        :key="key.value"
                        :class="[
                            'p-2 border rounded text-center relative',
                            isHighlighted(key.value, key.zone) ? 'bg-green-500 text-white' : 'bg-gray-200',
                            key.width ? `w-${key.width}` : 'w-10'
                        ]"
                        :style="{ minWidth: key.width ? `${key.width}px` : '40px' }"
                    >
                        <span class="block">{{ key.display }}</span>
                    </button>
                </div>
                <button
                    :key="row[4].value"
                    :class="[
                        'p-2 border rounded text-center relative',
                        isHighlighted(row[4].value, row[4].zone) ? 'bg-green-500 text-white' : 'bg-gray-200',
                        row[4].width ? `w-${row[4].width}` : 'w-10'
                    ]"
                    :style="{ minWidth: row[4].width ? `${row[4].width}px` : '40px' }"
                >
                    <span class="block">{{ row[4].display }}</span>
                </button>
            </template>
            <template v-else>
                <!-- Остальные строки -->
                <button
                    v-for="key in row"
                    :key="key.value"
                    :class="[
                        'p-2 border rounded text-center relative',
                        isHighlighted(key.value, key.zone) || isHighlighted(key.special, key.zone) ? 'bg-green-500 text-white' : 'bg-gray-200',
                        key.width ? `w-${key.width}` : 'w-10'
                    ]"
                    :style="{ minWidth: key.width ? `${key.width}px` : '40px' }"
                >
                    <span class="block">{{ key.display }}</span>
                    <span v-if="key.special" class="absolute text-xs" :class="key.specialPosition === 'top-left' ? 'top-0 left-1' : 'top-0 right-1'">
                        {{ key.special }}
                    </span>
                </button>
            </template>
        </div>
    </div>
</template>

<script lang="ts" setup>
import { computed } from 'vue';

const props = defineProps<{
    language: 'en' | 'ru';
    typed: string;
    text: string;
}>();

const keyboardLayouts: Record<'en' | 'ru', { value: string; display: string; special?: string; specialPosition?: 'top-left' | 'top-right'; width?: number; zone?: 'left' | 'right' }[][]> = {
    en: [
        [
            { value: '`', display: '`', special: '~', specialPosition: 'top-left', zone: 'left' },
            { value: '1', display: '1', special: '!', specialPosition: 'top-left', zone: 'left' },
            { value: '2', display: '2', special: '@', specialPosition: 'top-left', zone: 'left' },
            { value: '3', display: '3', special: '#', specialPosition: 'top-left', zone: 'left' },
            { value: '4', display: '4', special: '$', specialPosition: 'top-left', zone: 'left' },
            { value: '5', display: '5', special: '%', specialPosition: 'top-left', zone: 'left' },
            { value: '6', display: '6', special: '^', specialPosition: 'top-left', zone: 'right' },
            { value: '7', display: '7', special: '&', specialPosition: 'top-left', zone: 'right' },
            { value: '8', display: '8', special: '*', specialPosition: 'top-left', zone: 'right' },
            { value: '9', display: '9', special: '(', specialPosition: 'top-left', zone: 'right' },
            { value: '0', display: '0', special: ')', specialPosition: 'top-left', zone: 'right' },
            { value: '-', display: '-', special: '_', specialPosition: 'top-left', zone: 'right' },
            { value: '=', display: '=', special: '+', specialPosition: 'top-left', zone: 'right' },
            { value: 'backspace', display: 'Backspace', width: 80, zone: 'right' }
        ],
        [
            { value: 'tab', display: 'Tab', width: 60, zone: 'left' },
            { value: 'q', display: 'q', special: 'Q', specialPosition: 'top-left', zone: 'left' },
            { value: 'w', display: 'w', special: 'W', specialPosition: 'top-left', zone: 'left' },
            { value: 'e', display: 'e', special: 'E', specialPosition: 'top-left', zone: 'left' },
            { value: 'r', display: 'r', special: 'R', specialPosition: 'top-left', zone: 'left' },
            { value: 't', display: 't', special: 'T', specialPosition: 'top-left', zone: 'left' },
            { value: 'y', display: 'y', special: 'Y', specialPosition: 'top-left', zone: 'right' },
            { value: 'u', display: 'u', special: 'U', specialPosition: 'top-left', zone: 'right' },
            { value: 'i', display: 'i', special: 'I', specialPosition: 'top-left', zone: 'right' },
            { value: 'o', display: 'o', special: 'O', specialPosition: 'top-left', zone: 'right' },
            { value: 'p', display: 'p', special: 'P', specialPosition: 'top-left', zone: 'right' },
            { value: '[', display: '[', special: '{', specialPosition: 'top-left', zone: 'right' },
            { value: ']', display: ']', special: '}', specialPosition: 'top-left', zone: 'right' },
            { value: '\\', display: '\\', special: '|', specialPosition: 'top-left', zone: 'right' }
        ],
        [
            { value: 'capslock', display: 'Caps', width: 70, zone: 'left' },
            { value: 'a', display: 'a', special: 'A', specialPosition: 'top-left', zone: 'left' },
            { value: 's', display: 's', special: 'S', specialPosition: 'top-left', zone: 'left' },
            { value: 'd', display: 'd', special: 'D', specialPosition: 'top-left', zone: 'left' },
            { value: 'f', display: 'f', special: 'F', specialPosition: 'top-left', zone: 'left' },
            { value: 'g', display: 'g', special: 'G', specialPosition: 'top-left', zone: 'left' },
            { value: 'h', display: 'h', special: 'H', specialPosition: 'top-left', zone: 'right' },
            { value: 'j', display: 'j', special: 'J', specialPosition: 'top-left', zone: 'right' },
            { value: 'k', display: 'k', special: 'K', specialPosition: 'top-left', zone: 'right' },
            { value: 'l', display: 'l', special: 'L', specialPosition: 'top-left', zone: 'right' },
            { value: ';', display: ';', special: ':', specialPosition: 'top-left', zone: 'right' },
            { value: '\'', display: '\'', special: '"', specialPosition: 'top-left', zone: 'right' },
            { value: 'enter', display: 'Enter', width: 90, zone: 'right' }
        ],
        [
            { value: 'shift', display: 'Shift', width: 90, zone: 'left' },
            { value: 'z', display: 'z', special: 'Z', specialPosition: 'top-left', zone: 'left' },
            { value: 'x', display: 'x', special: 'X', specialPosition: 'top-left', zone: 'left' },
            { value: 'c', display: 'c', special: 'C', specialPosition: 'top-left', zone: 'left' },
            { value: 'v', display: 'v', special: 'V', specialPosition: 'top-left', zone: 'left' },
            { value: 'b', display: 'b', special: 'B', specialPosition: 'top-left', zone: 'left' },
            { value: 'n', display: 'n', special: 'N', specialPosition: 'top-left', zone: 'right' },
            { value: 'm', display: 'm', special: 'M', specialPosition: 'top-left', zone: 'right' },
            { value: ',', display: ',', special: '<', specialPosition: 'top-left', zone: 'right' },
            { value: '.', display: '.', special: '>', specialPosition: 'top-left', zone: 'right' },
            { value: '/', display: '/', special: '?', specialPosition: 'top-left', zone: 'right' },
            { value: 'shift', display: 'Shift', width: 110, zone: 'right' }
        ],
        [
            { value: 'ctrl', display: 'Ctrl', width: 50, zone: 'left' },
            { value: 'alt', display: 'Alt', width: '50', zone: 'left' },
            { value: ' ', display: 'Space', width: 250 },
            { value: 'alt', display: 'Alt', width: 50, zone: 'right' },
            { value: 'ctrl', display: 'Ctrl', width: 50, zone: 'right' }
        ]
    ],
    ru: [
        [
            { value: 'ё', display: 'ё', special: 'Ё', specialPosition: 'top-left', zone: 'left' },
            { value: '1', display: '1', special: '!', specialPosition: 'top-left', zone: 'left' },
            { value: '2', display: '2', special: '"', specialPosition: 'top-left', zone: 'left' },
            { value: '3', display: '3', special: '№', specialPosition: 'top-left', zone: 'left' },
            { value: '4', display: '4', special: ';', specialPosition: 'top-left', zone: 'left' },
            { value: '5', display: '5', special: '%', specialPosition: 'top-left', zone: 'left' },
            { value: '6', display: '6', special: ':', specialPosition: 'top-left', zone: 'right' },
            { value: '7', display: '7', special: '?', specialPosition: 'top-left', zone: 'right' },
            { value: '8', display: '8', special: '*', specialPosition: 'top-left', zone: 'right' },
            { value: '9', display: '9', special: '(', specialPosition: 'top-left', zone: 'right' },
            { value: '0', display: '0', special: ')', specialPosition: 'top-left', zone: 'right' },
            { value: '-', display: '-', special: '_', specialPosition: 'top-left', zone: 'right' },
            { value: '=', display: '=', special: '+', specialPosition: 'top-left', zone: 'right' },
            { value: 'backspace', display: 'Backspace', width: 80, zone: 'right' }
        ],
        [
            { value: 'tab', display: 'Tab', width: 60, zone: 'left' },
            { value: 'й', display: 'й', special: 'Й', specialPosition: 'top-left', zone: 'left' },
            { value: 'ц', display: 'ц', special: 'Ц', specialPosition: 'top-left', zone: 'left' },
            { value: 'у', display: 'у', special: 'У', specialPosition: 'top-left', zone: 'left' },
            { value: 'к', display: 'к', special: 'К', specialPosition: 'top-left', zone: 'left' },
            { value: 'е', display: 'е', special: 'Е', specialPosition: 'top-left', zone: 'left' },
            { value: 'н', display: 'н', special: 'Н', specialPosition: 'top-left', zone: 'right' },
            { value: 'г', display: 'г', special: 'Г', specialPosition: 'top-left', zone: 'right' },
            { value: 'ш', display: 'ш', special: 'Ш', specialPosition: 'top-left', zone: 'right' },
            { value: 'щ', display: 'щ', special: 'Щ', specialPosition: 'top-left', zone: 'right' },
            { value: 'з', display: 'з', special: 'З', specialPosition: 'top-left', zone: 'right' },
            { value: 'х', display: 'х', special: 'Х', specialPosition: 'top-left', zone: 'right' },
            { value: 'ъ', display: 'ъ', special: 'Ъ', specialPosition: 'top-left', zone: 'right' },
            { value: '/', display: '/', special: '|', specialPosition: 'top-left', zone: 'right' }
        ],
        [
            { value: 'capslock', display: 'Caps', width: 70, zone: 'left' },
            { value: 'ф', display: 'ф', special: 'Ф', specialPosition: 'top-left', zone: 'left' },
            { value: 'ы', display: 'ы', special: 'Ы', specialPosition: 'top-left', zone: 'left' },
            { value: 'в', display: 'в', special: 'В', specialPosition: 'top-left', zone: 'left' },
            { value: 'а', display: 'а', special: 'А', specialPosition: 'top-left', zone: 'left' },
            { value: 'п', display: 'п', special: 'П', specialPosition: 'top-left', zone: 'left' },
            { value: 'р', display: 'р', special: 'Р', specialPosition: 'top-left', zone: 'right' },
            { value: 'о', display: 'о', special: 'О', specialPosition: 'top-left', zone: 'right' },
            { value: 'л', display: 'л', special: 'Л', specialPosition: 'top-left', zone: 'right' },
            { value: 'д', display: 'д', special: 'Д', specialPosition: 'top-left', zone: 'right' },
            { value: 'ж', display: 'ж', special: 'Ж', specialPosition: 'top-left', zone: 'right' },
            { value: 'э', display: 'э', special: 'Э', specialPosition: 'top-left', zone: 'right' },
            { value: 'enter', display: 'Enter', width: 90, zone: 'right' }
        ],
        [
            { value: 'shift', display: 'Shift', width: 90, zone: 'left' },
            { value: 'я', display: 'я', special: 'Я', specialPosition: 'top-left', zone: 'left' },
            { value: 'ч', display: 'ч', special: 'Ч', specialPosition: 'top-left', zone: 'left' },
            { value: 'с', display: 'с', special: 'С', specialPosition: 'top-left', zone: 'left' },
            { value: 'м', display: 'м', special: 'М', specialPosition: 'top-left', zone: 'left' },
            { value: 'и', display: 'и', special: 'И', specialPosition: 'top-left', zone: 'left' },
            { value: 'т', display: 'т', special: 'Т', specialPosition: 'top-left', zone: 'right' },
            { value: 'ь', display: 'ь', special: 'Ь', specialPosition: 'top-left', zone: 'right' },
            { value: 'б', display: 'б', special: 'Б', specialPosition: 'top-left', zone: 'right' },
            { value: 'ю', display: 'ю', special: 'Ю', specialPosition: 'top-left', zone: 'right' },
            { value: '.', display: '.', special: ',', specialPosition: 'top-left', zone: 'right' },
            { value: 'shift', display: 'Shift', width: 110, zone: 'right' }
        ],
        [
            { value: 'ctrl', display: 'Ctrl', width: 50, zone: 'left' },
            { value: 'alt', display: 'Alt', width: 50, zone: 'left' },
            { value: ' ', display: 'Space', width: 250 },
            { value: 'alt', display: 'Alt', width: 50, zone: 'right' },
            { value: 'ctrl', display: 'Ctrl', width: 50, zone: 'right' }
        ]
    ]
};

const keyboardLayout = computed(() => keyboardLayouts[props.language]);

const nextChar = computed(() => {
    return props.typed.length < props.text.length ? props.text[props.typed.length] : '';
});

const isHighlighted = (keyValue: string | undefined, zone?: 'left' | 'right') => {
    if (!keyValue) return false;
    if (keyValue === ' ') return nextChar.value === ' ';
    if (keyValue === 'enter') return nextChar.value === '\n';

    const isUpperOrSpecial = nextChar.value.match(/[A-ZА-ЯЁ~!@#$%^&*()_+{}|:"<>?]/);
    const isControlChar = nextChar.value !== '\n' && nextChar.value.match(/[\x00-\x1F\x7F]/);

    if (keyValue === 'shift') {
        if (!isUpperOrSpecial) return false;
        const keyZone = keyboardLayout.value.flat().find(k =>
            k.value === nextChar.value ||
            (k.special && k.special === nextChar.value) ||
            k.value.toLowerCase() === nextChar.value.toLowerCase() ||
            (k.special && k.special.toLowerCase() === nextChar.value.toLowerCase())
        )?.zone;
        return keyZone === 'left' ? zone === 'right' : zone === 'left';
    }

    if (['ctrl', 'alt', 'capslock'].includes(keyValue)) {
        if (!isControlChar) return false;
        const keyZone = keyboardLayout.value.flat().find(k =>
            k.value === nextChar.value ||
            (k.special && k.special === nextChar.value) ||
            k.value.toLowerCase() === nextChar.value.toLowerCase() ||
            (k.special && k.special.toLowerCase() === nextChar.value.toLowerCase())
        )?.zone;
        return keyZone === 'left' ? zone === 'right' : zone === 'left';
    }

    return nextChar.value === keyValue || nextChar.value.toLowerCase() === keyValue.toLowerCase();
};
</script>
Показать в боковой панели





Все отлично! Ты бесподобен!


Спасибо за добрые слова! Рад, что смог помочь! Если будут еще задачи, обращайся, я всегда готов. 😊






Чем я могу помочь?


DeepSearch


Think

Grok 3
