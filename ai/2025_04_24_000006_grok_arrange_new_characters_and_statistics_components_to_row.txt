В компоненте resources/js/components/Lesson.vue
<template>
    <div class="min-h-screen bg-gray-100 p-8">
        <div class="max-w-4xl mx-auto bg-white p-6 rounded shadow-md">
            <div class="relative flex items-center mb-4">
                <h2 class="text-2xl font-bold">Lesson {{ lesson.number }}</h2>
                <span v-if="isLessonCompleted" class="absolute left-1/2 transform -translate-x-1/2 text-green-500 text-3xl font-bold">Completed!</span>
            </div>
            <NewCharacters :new-chars="lesson.new_chars" />
            <Statistics :language="language" :time="time" :speed="speed" :errors="errors" :progress="progress" />
            <div class="mt-4">
                <div ref="textContainer" class="text-lg font-mono break-words whitespace-pre-wrap h-28 overflow-y-auto bg-gray-50 p-2">
                    <span v-for="(char, index) in text" :key="index" :class="{ 'error-char': typed[index] && typed[index] !== char }">
                        {{ char }}
                    </span>
                </div>
                <textarea
                    v-model="typed"
                    @input="handleInput"
                    class="w-full p-2 border rounded mt-4 resize-none"
                    ref="input"
                    autofocus
                    :disabled="isLessonCompleted"
                    rows="3"
                />
                <VirtualKeyboard :language="language as 'en' | 'ru'" :typed="typed" :text="text" />
            </div>
            <router-link
                v-if="nextLesson && isLessonCompleted"
                :to="`/lesson/${language}/${nextLesson.number}`"
                @click="resetAndLoadNext"
                class="mt-4 inline-block bg-blue-500 text-white p-2 rounded"
            >
                Next Lesson
            </router-link>
            <router-link
                v-else-if="isLessonCompleted"
                :to="`/test/${language}`"
                class="mt-4 inline-block bg-green-500 text-white p-2 rounded"
            >
                Take Final Test
            </router-link>
        </div>
    </div>
</template>

<script lang="ts" setup>
import { ref, computed, onMounted } from 'vue';
import { useRoute } from 'vue-router';
import axios from 'axios';
import VirtualKeyboard from './VirtualKeyboard.vue';
import Statistics from './Statistics.vue';
import NewCharacters from './NewCharacters.vue';
import { scrollToCurrentChar } from '@/helpers/DomHelper';

const route = useRoute();
const language = route.params.language as string;
const lessonNumber = ref(parseInt(route.params.number as string));
const lesson = ref<{ id: number; number: number; new_chars: string }>({ id: 0, number: lessonNumber.value, new_chars: '' });
const text = ref('');
const typed = ref('');
const startTime = ref(0);
const time = ref(0);
const errors = ref(0);
const speed = ref(0);
const input = ref<HTMLTextAreaElement | null>(null);
const textContainer = ref<HTMLElement | null>(null);
const lessons = ref<any[]>([]);
const isLessonCompleted = ref(false);

const nextLesson = computed(() => lessons.value.find(l => l.number === lessonNumber.value + 1));
const progress = computed(() => text.value.length ? Math.round((typed.value.length / text.value.length) * 100) : 0);

const resetState = () => {
    text.value = '';
    typed.value = '';
    startTime.value = 0;
    time.value = 0;
    errors.value = 0;
    speed.value = 0;
    isLessonCompleted.value = false;
};

const fetchLesson = async () => {
    const [lessonsRes, textRes] = await Promise.all([
        axios.get(`/lessons/${language}`),
        axios.get(`/lessons/${language}/${lessonNumber.value}/text`),
    ]);

    lessons.value = lessonsRes.data;
    lesson.value = lessonsRes.data.find((l: any) => l.number === lessonNumber.value);
    text.value = textRes.data.text;
};

const handleInput = async () => {
    if (!startTime.value) {
        startTime.value = Date.now();
    }

    if (typed.value.length >= text.value.length) {
        typed.value = typed.value.slice(0, text.value.length);
        isLessonCompleted.value = true;
        await axios.post('/lessons/progress', {
            lesson_id: lesson.value.id,
            language: language,
            time_seconds: time.value,
            speed_wpm: speed.value,
            errors: errors.value,
        });
        return;
    }

    const typedChars = typed.value.split('');
    let errorCount = 0;
    for (let i = 0; i < typedChars.length; i++) {
        if (typedChars[i] !== text.value[i]) {
            errorCount++;
        }
    }
    errors.value = errorCount;

    time.value = Math.round((Date.now() - startTime.value) / 1000);
    const words = typed.value.length / 5;
    speed.value = time.value > 0 ? Math.round((words / time.value) * 60) : 0;

    scrollToCurrentChar(textContainer.value, typed.value.length);
};

const resetAndLoadNext = async () => {
    if (!isLessonCompleted.value) return;
    lessonNumber.value++;
    resetState();
    await fetchLesson();
    if (input.value) {
        input.value.focus();
    }
};

onMounted(async () => {
    resetState();
    await fetchLesson();
    if (input.value) {
        input.value.focus();
    }
});
</script>
нужно расположить компоненты NewCharacters и Statistics в один ряд средствами tailwindcss. Высота компонентов должна быть выровнена по самому высокому из них. В компоненте NewCharacters нужно выровнять контент по центру по вертикали и по горизонтали. Между этими компонентами нужно добавить небольшой отступ, без добавления дополнительных элементов html. Выведи обновленный код компонента с минимальными изменениями.




Для выполнения задачи необходимо модифицировать только часть шаблона <template> в компоненте Lesson.vue, чтобы расположить компоненты NewCharacters и Statistics в одном ряду с помощью Tailwind CSS, выровнять их по высоте, центрировать контент в NewCharacters и добавить отступ между компонентами. Остальной код (включая <script>) останется без изменений.

Изменения:
Расположение в ряд: Используем flex с flex-row для размещения NewCharacters и Statistics в одном ряду.
Выравнивание высоты: Добавляем items-stretch к контейнеру flex, чтобы компоненты растягивались по высоте самого высокого из них.
Центрирование в NewCharacters: Добавляем классы flex, items-center, justify-center для центрирования контента в NewCharacters по вертикали и горизонтали.
Отступ между компонентами: Используем space-x-4 для добавления горизонтального отступа между компонентами без дополнительных HTML-элементов.
Сохранение стилей: Убедимся, что существующие стили не конфликтуют, и добавим минимальные изменения.
Обновленный код <template>:
vue

Копировать
<template>
    <div class="min-h-screen bg-gray-100 p-8">
        <div class="max-w-4xl mx-auto bg-white p-6 rounded shadow-md">
            <div class="relative flex items-center mb-4">
                <h2 class="text-2xl font-bold">Lesson {{ lesson.number }}</h2>
                <span v-if="isLessonCompleted" class="absolute left-1/2 transform -translate-x-1/2 text-green-500 text-3xl font-bold">Completed!</span>
            </div>
            <div class="flex flex-row items-stretch space-x-4 mb-4">
                <NewCharacters :new-chars="lesson.new_chars" class="flex items-center justify-center" />
                <Statistics :language="language" :time="time" :speed="speed" :errors="errors" :progress="progress" />
            </div>
            <div class="mt-4">
                <div ref="textContainer" class="text-lg font-mono break-words whitespace-pre-wrap h-28 overflow-y-auto bg-gray-50 p-2">
                    <span v-for="(char, index) in text" :key="index" :class="{ 'error-char': typed[index] && typed[index] !== char }">
                        {{ char }}
                    </span>
                </div>
                <textarea
                    v-model="typed"
                    @input="handleInput"
                    class="w-full p-2 border rounded mt-4 resize-none"
                    ref="input"
                    autofocus
                    :disabled="isLessonCompleted"
                    rows="3"
                />
                <VirtualKeyboard :language="language as 'en' | 'ru'" :typed="typed" :text="text" />
            </div>
            <router-link
                v-if="nextLesson && isLessonCompleted"
                :to="`/lesson/${language}/${nextLesson.number}`"
                @click="resetAndLoadNext"
                class="mt-4 inline-block bg-blue-500 text-white p-2 rounded"
            >
                Next Lesson
            </router-link>
            <router-link
                v-else-if="isLessonCompleted"
                :to="`/test/${language}`"
                class="mt-4 inline-block bg-green-500 text-white p-2 rounded"
            >
                Take Final Test
            </router-link>
        </div>
    </div>
</template>
Объяснение изменений:
Контейнер для компонентов:
Добавлен <div class="flex flex-row items-stretch space-x-4 mb-4">, который:
flex flex-row: Устанавливает flexbox с горизонтальным расположением.
items-stretch: Растягивает компоненты по высоте самого высокого.
space-x-4: Добавляет горизонтальный отступ 1rem (16px) между компонентами.
mb-4: Сохраняет отступ снизу, аналогичный предыдущему mb-4.
NewCharacters:
Добавлены классы flex items-center justify-center для центрирования содержимого по вертикали и горизонтали.
Предполагается, что сам компонент NewCharacters поддерживает эти классы (если он содержит блочный элемент, это сработает; если нет, может потребоваться дополнительная настройка внутри NewCharacters.vue).
Statistics:
Оставлен без изменений, так как он должен растянуться по высоте автоматически благодаря items-stretch.
Минимальные изменения:
Изменен только фрагмент шаблона, связанный с расположением NewCharacters и Statistics.
Сохранены все существующие классы и структура, чтобы не повлиять на остальную функциональность.
Примечания:
Если компонент NewCharacters не центрирует контент должным образом, проверьте его внутреннюю разметку. Возможно, потребуется добавить flex и центрирующие классы непосредственно в его шаблон.
Если компоненты имеют фиксированную ширину или другие стили, которые мешают flex, может потребоваться дополнительная настройка (например, flex-1 для равного распределения ширины).
Код <script> и остальная часть шаблона остались без изменений, как указано в запросе.
Если нужны дополнительные уточнения или корректировки, дайте знать!






Чем я могу помочь?


DeepSearch


Think

Grok 3
