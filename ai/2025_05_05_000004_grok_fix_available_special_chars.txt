В веб приложении для тренировки навыка слепой печати есть уроки, финальный тест, виртуальная клавиатура:
app/Services/LessonService.php
<?php

namespace App\Services;

use App\Models\Lesson;
use App\Models\LessonProgress;
use Random\RandomException;

class LessonService
{
    protected array $introductionOrder = [
        'en' => [
            'a', 's', 'd', 'f', 'j', 'k', 'l', ';',
            'q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p',
            'h', 'g', 'z', 'x', 'c', 'v', 'b', 'n', 'm', ',', '.', '/',
            'A', 'S', 'D', 'F', 'J', 'K', 'L', ';',
            'Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P',
            'H', 'G', 'Z', 'X', 'C', 'V', 'B', 'N', 'M', ',', '.', '/',
            '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '-', '=',
            '!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '_', '+', '[', ']', '{', '}', '|', '\\', ':', '"', '\'', '<', '>', '?', '~', '`'
        ],
        'ru' => [
            'ф', 'ы', 'в', 'а', 'о', 'л', 'д', 'ж',
            'й', 'ц', 'у', 'к', 'е', 'н', 'г', 'ш', 'щ', 'з', 'х', 'ъ',
            'я', 'ч', 'с', 'м', 'и', 'т', 'ь', 'б', 'ю', 'п', 'р', 'э',
            'ё',
            'Ф', 'Ы', 'В', 'А', 'О', 'Л', 'Д', 'Ж',
            'Й', 'Ц', 'У', 'К', 'Е', 'Н', 'Г', 'Ш', 'Щ', 'З', 'Х', 'Ъ',
            'Я', 'Ч', 'С', 'М', 'И', 'Т', 'Ь', 'Б', 'Ю', 'П', 'Р', 'Э',
            'Ё',
            '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '-', '=',
            '!', '"', '#', '$', '%', '^', '&', '*', '(', ')', '_', '+', '[', ']', '{', '}', '|', '/', ',', '.', '<', '>', '?', ':', ';'
        ],
    ];

    protected array $pairedMap = [
        '(' => ')',
        '[' => ']',
        '{' => '}',
        '<' => '>',
        '"' => '"',
        "'" => "'",
        '`' => '`'
    ];

    protected int $minLessonLength = 100;
    protected int $maxLessonLength = 300;
    protected int $minWordsPerLine = 2;
    protected int $maxWordsPerLine = 8;

    /**
     * @throws RandomException
     */
    public function generateLessons(string $language, int $lessonCount, int $userId): void
    {
        $chars = $this->introductionOrder[$language] ?? $this->introductionOrder['en'];
        $totalChars = count($chars);

        Lesson::where('user_id', $userId)->where('language', $language)->delete();
        LessonProgress::where('user_id', $userId)->where('language', $language)->delete();

        $lessons = [];
        $availableCharsString = '';

        for ($i = 0; $i < $lessonCount; $i++) {
            $charsPerLesson = max(1, ceil($totalChars / max(1, $lessonCount - $i)));
            $newChars = [];

            for ($j = 0; $j < $charsPerLesson && !empty($chars); $j++) {
                $newChars[] = array_shift($chars);
            }

            if (empty($newChars) && !empty($this->introductionOrder[$language])) {
                $newChars = $this->introductionOrder[$language];
            }

            $newCharsString = implode('', $newChars);
            $availableCharsString .= $newCharsString;

            $lessons[] = [
                'user_id' => $userId,
                'number' => $i + 1,
                'total' => $lessonCount,
                'language' => $language,
                'new_chars' => $newCharsString,
                'text' => $this->generateLessonText(
                    $language,
                    $i + 1,
                    $lessonCount,
                    $availableCharsString,
                    $newCharsString
                ),
                'created_at' => now(),
                'updated_at' => now(),
            ];
        }

        Lesson::insert($lessons);
    }

    /**
     * @throws RandomException
     */
    public function generateLessonText(string $language, int $lessonNumber, int $totalLessons, string $availableChars, string $newChars, ?int $length = null): string
    {
        $availableCharsArray = mb_str_split($availableChars, 1, 'UTF-8');
        $newCharsArray = mb_str_split($newChars, 1, 'UTF-8');

        if (empty($availableCharsArray)) {
            return '';
        }

        if ($length === null) {
            if ($totalLessons <= 1) {
                $length = $this->minLessonLength;
            } else {
                $length = $this->minLessonLength + ($this->maxLessonLength - $this->minLessonLength) * ($lessonNumber - 1) / ($totalLessons - 1);
            }
        }

        $text = '';
        $wordsAdded = 0;
        $lineWordCount = 0;
        $currentLineWords = random_int($this->minWordsPerLine, $this->maxWordsPerLine);
        $isFirstOfPair = true;
        $baseWord = null;

        while (mb_strlen($text) < $length) {
            if ($wordsAdded > 0) {
                if ($lineWordCount >= $currentLineWords) {
                    $separator = "\n";
                    $lineWordCount = 0;
                    $currentLineWords = random_int($this->minWordsPerLine, $this->maxWordsPerLine);
                } else {
                    $separator = ' ';
                }

                if (mb_strlen($text) + mb_strlen($separator) > $length) {
                    break;
                }

                $text .= $separator;
            }

            if ($isFirstOfPair) {
                $baseWord = $this->generateEnhancedWord($availableCharsArray, $newCharsArray, $language);
                $currentWord = $baseWord;
                $isFirstOfPair = false;

                $remainingAfterFirst = $length - mb_strlen($text) - mb_strlen($currentWord);

                if ($wordsAdded > 0) {
                    $remainingAfterFirst -= mb_strlen($separator ?? ' ');
                }

                $remainingAfterSecond = $remainingAfterFirst - mb_strlen(' ') - mb_strlen($currentWord);

                if ($remainingAfterFirst < 0 || $remainingAfterSecond < 0) {
                    break;
                }

                if ($lineWordCount + 2 > $currentLineWords) {
                    $text .= "\n";
                    $lineWordCount = 0;
                    $currentLineWords = random_int($this->minWordsPerLine, $this->maxWordsPerLine);
                }
            } else {
                $currentWord = $baseWord;
                $isFirstOfPair = true;
            }

            $remaining = $length - mb_strlen($text);

            if (mb_strlen($currentWord) > $remaining) {
                $currentWord = mb_substr($currentWord, 0, $remaining);
            }

            $text .= $currentWord;

            if (mb_strlen($currentWord) >= 3) {
                $wordsAdded++;
                $lineWordCount++;
            }
        }

        $lines = explode("\n", $text);
        $lines = array_map('rtrim', $lines);
        $text = implode("\n", array_filter($lines, function($line) {
            return !empty($line);
        }));

        return rtrim(mb_substr($text, 0, $length), "\n");
    }

    /**
     * @throws RandomException
     */
    private function generateEnhancedWord(array $availableCharsArray, array $newCharsArray, string $language): string
    {
        $availableLetters = array_filter($availableCharsArray, function ($char) {
            return preg_match('/[a-zA-ZА-яёЁ0-9]/u', $char);
        });

        $newLetters = array_filter($newCharsArray, function ($char) {
            return preg_match('/[a-zA-ZА-яёЁ0-9]/u', $char);
        });

        $allVowels = $this->getVowels($language);
        $availableVowels = array_intersect($allVowels, $availableLetters);
        $newVowels = array_intersect($allVowels, $newLetters);

        $allConsonants = $this->getConsonants($language);
        $availableConsonants = array_intersect($allConsonants, $availableLetters);
        $newConsonants = array_intersect($allConsonants, $newLetters);

        $availableNumbers = array_filter($availableLetters, function ($char) {
            return preg_match('/[0-9]/u', $char);
        });

        $newNumbers = array_filter($newLetters, function ($char) {
            return preg_match('/[0-9]/u', $char);
        });

        $wordLength = random_int(3, 8);
        $letterPart = '';

        if (!empty($availableVowels) && !empty($availableConsonants)) {
            $startType = rand(0, 1) == 0 ? 'V' : 'C';
            $startSet = $startType == 'V' ? $availableVowels : $availableConsonants;
            $startSetNew = $startType == 'V' ? $newVowels : $newConsonants;
            $otherSet = $startType == 'V' ? $availableConsonants : $availableVowels;
            $otherSetNew = $startType == 'V' ? $newConsonants : $newVowels;
        } elseif (!empty($availableVowels)) {
            $startSet = $availableVowels;
            $startSetNew = $newVowels;
            $otherSet = [];
            $otherSetNew = [];
        } elseif (!empty($availableConsonants)) {
            $startSet = $availableConsonants;
            $startSetNew = $newConsonants;
            $otherSet = [];
            $otherSetNew = [];
        } else {
            return '';
        }

        for ($i = 0; $i < $wordLength; $i++) {
            $set = ($i % 2 == 0) ? $startSet : $otherSet;
            $setNew = ($i % 2 == 0) ? $startSetNew : $otherSetNew;

            if (empty($set)) {
                $set = $availableLetters;
                $setNew = $newLetters;
            }

            $useNumber = !empty($availableNumbers) && rand(0, 99) < 30;

            if ($useNumber) {
                if (!empty($newNumbers) && rand(0, 99) < 70) {
                    $letterPart .= $newNumbers[array_rand($newNumbers)];
                } else {
                    $letterPart .= $availableNumbers[array_rand($availableNumbers)];
                }
            } else {
                if (!empty($setNew) && rand(0, 99) < 70) {
                    $letterPart .= $setNew[array_rand($setNew)];
                } else {
                    $letterPart .= $set[array_rand($set)];
                }
            }
        }

        $availableSpecials = array_filter($availableCharsArray, function ($char) {
            return !preg_match('/[a-zA-Z0-9А-яёЁ]/u', $char);
        });

        $pairedSymbols = array_merge(array_keys($this->pairedMap), array_values($this->pairedMap));
        $singleSpecials = array_diff($availableSpecials, $pairedSymbols);

        $possiblePairedOpenings = ['(', '[', '{', '<', '"', "'", '`'];
        $availablePairedOpenings = array_intersect($possiblePairedOpenings, $availableSpecials);
        $availablePaired = [];

        foreach ($availablePairedOpenings as $opening) {
            if (in_array($this->pairedMap[$opening], $availableSpecials)) {
                $availablePaired[] = $opening;
            }
        }

        $totalOptions = ['none'];

        if (!empty($singleSpecials)) {
            $totalOptions[] = 'single';
        }

        if (!empty($availablePaired)) {
            $totalOptions[] = 'paired';
        }

        $type = $totalOptions[array_rand($totalOptions)];

        if ($type == 'none') {
            return $letterPart;
        } elseif ($type == 'single') {
            $special = $singleSpecials[array_rand($singleSpecials)];

            if ($this->isPunctuation($special)) {
                return $letterPart . $special;
            }

            $position = rand(0, 1) == 0 ? 'start' : 'end';

            return $position == 'start' ? $special . $letterPart : $letterPart . $special;
        } else {
            $opening = $availablePaired[array_rand($availablePaired)];
            $closing = $this->pairedMap[$opening];

            return $opening . $letterPart . $closing;
        }
    }

    private function isPunctuation(string $char): bool
    {
        return in_array($char, [',', '.', ';', ':', '!', '?']);
    }

    private function getVowels(string $language): array
    {
        if ($language == 'ru') {
            return ['а', 'е', 'ё', 'и', 'о', 'у', 'ы', 'э', 'ю', 'я', 'А', 'Е', 'Ё', 'И', 'О', 'У', 'Ы', 'Э', 'Ю', 'Я'];
        } elseif ($language == 'en') {
            return ['a', 'e', 'i', 'o', 'u', 'y', 'A', 'E', 'I', 'O', 'U', 'Y'];
        }

        return [];
    }

    private function getConsonants(string $language): array
    {
        if ($language == 'ru') {
            return array_diff($this->getRussianLetters(), $this->getVowels('ru'));
        } elseif ($language == 'en') {
            return array_diff($this->getEnglishLetters(), $this->getVowels('en'));
        }

        return [];
    }

    private function getRussianLetters(): array
    {
        return array_merge(
            ['а', 'б', 'в', 'г', 'д', 'е', 'ё', 'ж', 'з', 'и', 'й', 'к', 'л', 'м', 'н', 'о', 'п', 'р', 'с', 'т', 'у', 'ф', 'х', 'ц', 'ч', 'ш', 'щ', 'ъ', 'ы', 'ь', 'э', 'ю', 'я'],
            ['А', 'Б', 'В', 'Г', 'Д', 'Е', 'Ё', 'Ж', 'З', 'И', 'Й', 'К', 'Л', 'М', 'Н', 'О', 'П', 'Р', 'С', 'Т', 'У', 'Ф', 'Х', 'Ц', 'Ч', 'Ш', 'Щ', 'Ъ', 'Ы', 'Ь', 'Э', 'Ю', 'Я'],
        );
    }

    private function getEnglishLetters(): array
    {
        return array_merge(
            range('a', 'z'),
            range('A', 'Z'),
        );
    }
}
resources/js/components/Lesson.vue
<template>
    <div class="min-h-screen bg-gray-100 p-8">
        <div class="max-w-4xl mx-auto bg-white p-6 rounded shadow-md">
            <div class="relative flex items-center mb-4">
                <h2 class="text-2xl font-bold">Lesson {{ lesson.number }}/{{ totalLessons }}</h2>
                <span v-if="isLessonCompleted" class="absolute left-1/2 transform -translate-x-1/2 text-green-500 text-3xl font-bold">
                    Completed!
                </span>
            </div>
            <div class="flex flex-row items-stretch space-x-4 mb-4">
                <NewCharacters :new-chars="lesson.new_chars" class="flex items-center justify-center" />
                <Statistics :language :time :speed :errors :progress />
            </div>
            <div class="mt-4">
                <div ref="textContainer" class="text-lg font-mono break-words whitespace-pre-wrap h-28 overflow-y-auto bg-gray-50 p-2">
                    <span v-for="(char, index) in text"
                          :key="index"
                          :class="{ 'error-char': typed[index] && typed[index] !== char, 'current-word': isCurrentWord[index], 'space': char === ' ', 'line-break': char === '\n' }"
                    >
                        {{ char }}
                    </span>
                </div>
                <textarea
                    v-model="typed"
                    v-focus
                    @input="handleInput"
                    class="w-full p-2 border rounded mt-4 resize-none"
                    ref="input"
                    :disabled="isLessonCompleted"
                    rows="4"
                    spellcheck="false"
                />
                <VirtualKeyboard :language="language as 'en' | 'ru'" :typed :text />
                <div v-if="isLessonCompleted" class="flex justify-center mt-4">
                    <router-link
                        v-if="nextLesson"
                        :to="`/lesson/${language}/${nextLesson}`"
                        @click="resetAndLoadNext"
                        class="bg-blue-500 text-white p-2 rounded"
                    >
                        Next Lesson
                    </router-link>
                    <router-link
                        v-else
                        :to="`/test/${language}`"
                        class="bg-green-500 text-white p-2 rounded"
                    >
                        Take Final Test
                    </router-link>
                </div>
            </div>
        </div>
    </div>
</template>

<script lang="ts" setup>
import NewCharacters from './NewCharacters.vue';
import Statistics from './Statistics.vue';
import VirtualKeyboard from './VirtualKeyboard.vue';
import axios from 'axios';
import { getCurrentTypingUnit } from '@/helpers/StringHelper';
import { ref, computed, onMounted } from 'vue';
import { scrollToCurrentChar } from '@/helpers/DomHelper';
import { useRoute } from 'vue-router';

const route = useRoute();

const errors = ref(0);
const input = ref<HTMLTextAreaElement | null>(null);
const isLessonCompleted = ref(false);
const language = route.params.language as string;
const lessonNumber = ref(parseInt(route.params.number as string));
const lesson = ref<{ id: number; number: number; new_chars: string }>({ id: 0, number: lessonNumber.value, new_chars: '' });
const speed = ref(0);
const startTime = ref(0);
const text = ref('');
const textContainer = ref<HTMLElement | null>(null);
const time = ref(0);
const totalLessons = ref(0);
const typed = ref('');

const currentTypingUnit = computed(() => getCurrentTypingUnit(text.value, typed.value.length));

const isCurrentWord = computed(() => {
    const range = currentTypingUnit.value;
    const arr = Array(text.value.length).fill(false);

    if (!range) { return arr; }

    for (let i = range.start; i <= range.end; i++) { arr[i] = true; }

    return arr;
});

const nextLesson = computed(() => (totalLessons.value - lessonNumber.value) ? lessonNumber.value + 1 : 0);

const progress = computed(() => {
    if (isLessonCompleted.value) { return 100; }

    return text.value.length ? Math.floor((typed.value.length / text.value.length) * 100) : 0;
});

const resetState = () => {
    errors.value = 0;
    isLessonCompleted.value = false;
    speed.value = 0;
    startTime.value = 0;
    text.value = '';
    time.value = 0;
    typed.value = '';
    lesson.value = { id: 0, number: lessonNumber.value, new_chars: '' };
};

const fetchLesson = async () => {
    const response = await axios.get(`/lessons/${language}/${lessonNumber.value}`);

    lesson.value = response.data.lesson;
    totalLessons.value = response.data.lesson.total;
    text.value = response.data.lesson.text;
};

//TODO: move duplications in Lesson.vue and FinalTest.vue to helper if possible
const handleInput = async () => {
    if (!startTime.value) { startTime.value = Date.now(); }

    const typedChars = typed.value.split('');
    let errorCount = 0;

    for (let i = 0; i < Math.min(typedChars.length, text.value.length); i++) {
        if (typedChars[i] !== text.value[i]) { errorCount++; }
    }

    errors.value = errorCount;

    if (typed.value.length >= text.value.length) {
        typed.value = typed.value.slice(0, text.value.length);
        isLessonCompleted.value = true;

        await axios.post('/lessons/progress', {
            lesson_id: lesson.value.id,
            language: language,
            time_seconds: time.value,
            speed_wpm: speed.value,
            errors: errors.value,
        });

        return;
    }

    time.value = Math.round((Date.now() - startTime.value) / 1000);
    const words = typed.value.length / 5;
    speed.value = time.value > 0 ? Math.round((words / time.value) * 60) : 0;

    scrollToCurrentChar(textContainer.value, typed.value.length);
};

const resetAndLoadNext = async () => {
    if (!isLessonCompleted.value) { return; }

    lessonNumber.value++;

    resetState();

    await fetchLesson();

    if (input.value) { input.value.focus(); }
};

onMounted(async () => {
    resetState();

    await fetchLesson();
});
</script>
resources/js/components/FinalTest.vue
<template>
    <div class="min-h-screen bg-gray-100 p-8">
        <div class="max-w-4xl mx-auto bg-white p-6 rounded shadow-md">
            <div class="relative flex items-center mb-4">
                <h2 class="text-2xl font-bold">Final Test</h2>
                <span v-if="isTestCompleted"
                      class="absolute left-1/2 transform -translate-x-1/2 text-green-500 text-3xl font-bold"
                >
                    Completed!
                </span>
            </div>
            <FinalTestSetup v-if="!text" :upload-file="uploadFile" @start-test="fetchText" />
            <Statistics v-if="text" :language :time :speed :errors :progress />
            <div v-if="text" class="mt-4">
                <div ref="textContainer" class="text-lg font-mono break-words whitespace-pre-wrap h-28 overflow-y-auto bg-gray-50 p-2">
                    <span v-for="(char, index) in text"
                          :key="index"
                          :class="{ 'error-char': typed[index] && typed[index] !== char, 'current-word': isCurrentWord[index], 'space': char === ' ', 'line-break': char === '\n' }"
                    >
                        {{ char }}
                    </span>
                </div>
                <textarea
                    v-model="typed"
                    v-focus
                    @input="handleInput"
                    class="w-full p-2 border rounded mt-4 resize-none"
                    :disabled="isTestCompleted"
                    rows="4"
                    spellcheck="false"
                />
                <VirtualKeyboard :language="language as 'en' | 'ru'" :typed :text :is-minimized="true" />
                <div v-if="isTestCompleted" class="flex justify-center mt-2">
                    <router-link to="/" class="bg-blue-500 text-white p-2 rounded">Back to Home</router-link>
                </div>
            </div>
        </div>
    </div>
</template>

<script lang="ts" setup>
import FinalTestSetup from './FinalTestSetup.vue';
import Statistics from './Statistics.vue';
import VirtualKeyboard from './VirtualKeyboard.vue';
import axios from 'axios';
import { getCurrentTypingUnit } from '@/helpers/StringHelper';
import { ref, computed } from 'vue';
import { scrollToCurrentChar } from '@/helpers/DomHelper';
import { useRoute } from 'vue-router';

const route = useRoute();

const errors = ref(0);
const genre = ref('');
const isTestCompleted = ref(false);
const language = ref(route.params.language as string);
const speed = ref(0);
const startTime = ref(0);
const text = ref('');
const textContainer = ref<HTMLElement | null>(null);
const time = ref(0);
const typed = ref('');

const currentTypingUnit = computed(() => getCurrentTypingUnit(text.value, typed.value.length));

const isCurrentWord = computed(() => {
    const range = currentTypingUnit.value;
    const arr = Array(text.value.length).fill(false);

    if (!range) { return arr; }

    for (let i = range.start; i <= range.end; i++) { arr[i] = true; }

    return arr;
});

const progress = computed(() => {
    if (isTestCompleted.value) { return 100; }

    return text.value.length ? Math.floor((typed.value.length / text.value.length) * 100) : 0;
});

const fetchText = async (selectedGenre: string) => {
    genre.value = selectedGenre;

    const response = await axios.get('/test/text', { params: { language: language.value, genre: genre.value } });

    text.value = response.data.text;

    errors.value = 0;
    isTestCompleted.value = false;
    speed.value = 0;
    startTime.value = 0;
    time.value = 0;
    typed.value = '';
};

const uploadFile = async (event: Event) => {
    const file = (event.target as HTMLInputElement).files?.[0];

    if (file) {
        const formData = new FormData();

        formData.append('file', file);
        formData.append('language', language.value);

        await axios.post('/test/upload', formData);
        await fetchText(genre.value);
    }
};

//TODO: move duplications in Lesson.vue and FinalTest.vue to helper if possible
const handleInput = async () => {
    if (!startTime.value) { startTime.value = Date.now(); }

    const typedChars = typed.value.split('');
    let errorCount = 0;

    for (let i = 0; i < Math.min(typedChars.length, text.value.length); i++) {
        if (typedChars[i] !== text.value[i]) { errorCount++; }
    }

    errors.value = errorCount;

    if (typed.value.length >= text.value.length) {
        typed.value = typed.value.slice(0, text.value.length);
        isTestCompleted.value = true;

        await axios.post('/test/result', {
            language: language.value,
            time_seconds: time.value,
            speed_wpm: speed.value,
            errors: errors.value,
        });

        return;
    }

    time.value = Math.round((Date.now() - startTime.value) / 1000);
    const words = typed.value.length / 5;
    speed.value = time.value > 0 ? Math.round((words / time.value) * 60) : 0;

    scrollToCurrentChar(textContainer.value, typed.value.length);
};
</script>
resources/js/components/VirtualKeyboard.vue
<template>
    <div class="relative">
        <div
            v-if="isMinimized"
            class="keyboard-preview flex justify-center items-center gap-2 p-2 bg-gray-50 rounded-lg cursor-pointer my-4 mx-auto"
            style="max-width: 200px;"
            @click="toggleKeyboard"
        >
            <svg
                xmlns="http://www.w3.org/2000/svg"
                class="h-6 w-6 text-gray-500"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
            >
                <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M13 10V3L4 14h7v7l9-11h-7z"
                />
            </svg>
            <span class="text-gray-500 text-sm font-medium">Keyboard</span>
        </div>

        <div
            v-else
            class="keyboard flex flex-col gap-2 p-4 cursor-pointer"
            style="max-width: 680px; margin: 0 auto;"
            @click="toggleKeyboard"
        >
            <div
                v-for="(row, rowIndex) in keyboardLayout"
                :key="rowIndex"
                class="flex gap-1"
                style="justify-content: space-between;"
            >
                <template v-if="rowIndex === 0">
                    <button
                        v-for="key in row"
                        :key="key.value"
                        :class="[
                            'p-2 border rounded text-center relative',
                            isHighlighted(key.value, key.zone) || isHighlighted(key.special, key.zone) ? 'bg-green-500 text-white' : 'bg-gray-200',
                            key.width ? `w-${key.width}` : 'w-10',
                            key.value === 'backspace' ? 'text-sm' : ''
                        ]"
                        :style="{ minWidth: key.width ? `${key.width}px` : '40px' }"
                    >
                        <span class="block">{{ key.display }}</span>
                        <span
                            v-if="key.special"
                            class="absolute text-xs"
                            :class="key.specialPosition === 'top-left' ? 'top-0 left-1' : 'top-0 right-1'"
                        >
                            {{ key.special }}
                        </span>
                    </button>
                </template>
                <template v-else-if="rowIndex === 4">
                    <button
                        :key="row[0].value"
                        :class="[
                            'p-2 border rounded text-center relative',
                            isHighlighted(row[0].value, row[0].zone) ? 'bg-green-500 text-white' : 'bg-gray-200',
                            row[0].width ? `w-${row[0].width}` : 'w-10'
                        ]"
                        :style="{ minWidth: row[0].width ? `${row[0].width}px` : '40px' }"
                    >
                        <span class="block">{{ row[0].display }}</span>
                    </button>
                    <div class="flex gap-1">
                        <button
                            v-for="key in row.slice(1, 4)"
                            :key="key.value"
                            :class="[
                                'p-2 border rounded text-center relative',
                                isHighlighted(key.value, key.zone) ? 'bg-green-500 text-white' : 'bg-gray-200',
                                key.width ? `w-${key.width}` : 'w-10'
                            ]"
                            :style="{ minWidth: key.width ? `${key.width}px` : '40px' }"
                        >
                            <span class="block">{{ key.display }}</span>
                        </button>
                    </div>
                    <button
                        :key="row[4].value"
                        :class="[
                            'p-2 border rounded text-center relative',
                            isHighlighted(row[4].value, row[4].zone) ? 'bg-green-500 text-white' : 'bg-gray-200',
                            row[4].width ? `w-${row[4].width}` : 'w-10'
                        ]"
                        :style="{ minWidth: row[4].width ? `${row[4].width}px` : '40px' }"
                    >
                        <span class="block">{{ row[4].display }}</span>
                    </button>
                </template>
                <template v-else>
                    <button
                        v-for="key in row"
                        :key="key.value"
                        :class="[
                            'p-2 border rounded text-center relative',
                            isHighlighted(key.value, key.zone) || isHighlighted(key.special, key.zone) ? 'bg-green-500 text-white' : 'bg-gray-200',
                            key.width ? `w-${key.width}` : 'w-10'
                        ]"
                        :style="{ minWidth: key.width ? `${key.width}px` : '40px' }"
                    >
                        <span class="block">{{ key.display }}</span>
                        <span
                            v-if="key.special"
                            class="absolute text-xs"
                            :class="key.specialPosition === 'top-left' ? 'top-0 left-1' : 'top-0 right-1'"
                        >
                            {{ key.special }}
                        </span>
                    </button>
                </template>
            </div>
        </div>
    </div>
</template>

<script lang="ts" setup>
import { computed, ref } from 'vue';

const props = defineProps<{
    language: 'en' | 'ru';
    typed: string;
    text: string;
    isMinimized?: boolean;
}>();

const isMinimized = ref(props.isMinimized ?? false);

const keyboardLayouts: Record<'en' | 'ru', { value: string; display: string; special?: string; specialPosition?: 'top-left' | 'top-right'; width?: number; zone?: 'left' | 'right' }[][]> = {
    en: [
        [
            { value: '`', display: '`', special: '~', specialPosition: 'top-left', zone: 'left' },
            { value: '1', display: '1', special: '!', specialPosition: 'top-left', zone: 'left' },
            { value: '2', display: '2', special: '@', specialPosition: 'top-left', zone: 'left' },
            { value: '3', display: '3', special: '#', specialPosition: 'top-left', zone: 'left' },
            { value: '4', display: '4', special: '$', specialPosition: 'top-left', zone: 'left' },
            { value: '5', display: '5', special: '%', specialPosition: 'top-left', zone: 'left' },
            { value: '6', display: '6', special: '^', specialPosition: 'top-left', zone: 'right' },
            { value: '7', display: '7', special: '&', specialPosition: 'top-left', zone: 'right' },
            { value: '8', display: '8', special: '*', specialPosition: 'top-left', zone: 'right' },
            { value: '9', display: '9', special: '(', specialPosition: 'top-left', zone: 'right' },
            { value: '0', display: '0', special: ')', specialPosition: 'top-left', zone: 'right' },
            { value: '-', display: '-', special: '_', specialPosition: 'top-left', zone: 'right' },
            { value: '=', display: '=', special: '+', specialPosition: 'top-left', zone: 'right' },
            { value: 'backspace', display: 'Backspace', width: 80, zone: 'right' }
        ],
        [
            { value: 'tab', display: 'Tab', width: 60, zone: 'left' },
            { value: 'q', display: 'q', special: 'Q', specialPosition: 'top-left', zone: 'left' },
            { value: 'w', display: 'w', special: 'W', specialPosition: 'top-left', zone: 'left' },
            { value: 'e', display: 'e', special: 'E', specialPosition: 'top-left', zone: 'left' },
            { value: 'r', display: 'r', special: 'R', specialPosition: 'top-left', zone: 'left' },
            { value: 't', display: 't', special: 'T', specialPosition: 'top-left', zone: 'left' },
            { value: 'y', display: 'y', special: 'Y', specialPosition: 'top-left', zone: 'right' },
            { value: 'u', display: 'u', special: 'U', specialPosition: 'top-left', zone: 'right' },
            { value: 'i', display: 'i', special: 'I', specialPosition: 'top-left', zone: 'right' },
            { value: 'o', display: 'o', special: 'O', specialPosition: 'top-left', zone: 'right' },
            { value: 'p', display: 'p', special: 'P', specialPosition: 'top-left', zone: 'right' },
            { value: '[', display: '[', special: '{', specialPosition: 'top-left', zone: 'right' },
            { value: ']', display: ']', special: '}', specialPosition: 'top-left', zone: 'right' },
            { value: '\\', display: '\\', special: '|', specialPosition: 'top-left', zone: 'right' }
        ],
        [
            { value: 'capslock', display: 'Caps', width: 70, zone: 'left' },
            { value: 'a', display: 'a', special: 'A', specialPosition: 'top-left', zone: 'left' },
            { value: 's', display: 's', special: 'S', specialPosition: 'top-left', zone: 'left' },
            { value: 'd', display: 'd', special: 'D', specialPosition: 'top-left', zone: 'left' },
            { value: 'f', display: 'f', special: 'F', specialPosition: 'top-left', zone: 'left' },
            { value: 'g', display: 'g', special: 'G', specialPosition: 'top-left', zone: 'left' },
            { value: 'h', display: 'h', special: 'H', specialPosition: 'top-left', zone: 'right' },
            { value: 'j', display: 'j', special: 'J', specialPosition: 'top-left', zone: 'right' },
            { value: 'k', display: 'k', special: 'K', specialPosition: 'top-left', zone: 'right' },
            { value: 'l', display: 'l', special: 'L', specialPosition: 'top-left', zone: 'right' },
            { value: ';', display: ';', special: ':', specialPosition: 'top-left', zone: 'right' },
            { value: '\'', display: '\'', special: '"', specialPosition: 'top-left', zone: 'right' },
            { value: 'enter', display: 'Enter', width: 90, zone: 'right' }
        ],
        [
            { value: 'shift', display: 'Shift', width: 90, zone: 'left' },
            { value: 'z', display: 'z', special: 'Z', specialPosition: 'top-left', zone: 'left' },
            { value: 'x', display: 'x', special: 'X', specialPosition: 'top-left', zone: 'left' },
            { value: 'c', display: 'c', special: 'C', specialPosition: 'top-left', zone: 'left' },
            { value: 'v', display: 'v', special: 'V', specialPosition: 'top-left', zone: 'left' },
            { value: 'b', display: 'b', special: 'B', specialPosition: 'top-left', zone: 'left' },
            { value: 'n', display: 'n', special: 'N', specialPosition: 'top-left', zone: 'right' },
            { value: 'm', display: 'm', special: 'M', specialPosition: 'top-left', zone: 'right' },
            { value: ',', display: ',', special: '<', specialPosition: 'top-left', zone: 'right' },
            { value: '.', display: '.', special: '>', specialPosition: 'top-left', zone: 'right' },
            { value: '/', display: '/', special: '?', specialPosition: 'top-left', zone: 'right' },
            { value: 'shift', display: 'Shift', width: 110, zone: 'right' }
        ],
        [
            { value: 'ctrl', display: 'Ctrl', width: 50, zone: 'left' },
            { value: 'alt', display: 'Alt', width: 50, zone: 'left' },
            { value: ' ', display: 'Space', width: 250 },
            { value: 'alt', display: 'Alt', width: 50, zone: 'right' },
            { value: 'ctrl', display: 'Ctrl', width: 50, zone: 'right' }
        ]
    ],
    ru: [
        [
            { value: 'ё', display: 'ё', special: 'Ё', specialPosition: 'top-left', zone: 'left' },
            { value: '1', display: '1', special: '!', specialPosition: 'top-left', zone: 'left' },
            { value: '2', display: '2', special: '"', specialPosition: 'top-left', zone: 'left' },
            { value: '3', display: '3', special: '№', specialPosition: 'top-left', zone: 'left' },
            { value: '4', display: '4', special: ';', specialPosition: 'top-left', zone: 'left' },
            { value: '5', display: '5', special: '%', specialPosition: 'top-left', zone: 'left' },
            { value: '6', display: '6', special: ':', specialPosition: 'top-left', zone: 'right' },
            { value: '7', display: '7', special: '?', specialPosition: 'top-left', zone: 'right' },
            { value: '8', display: '8', special: '*', specialPosition: 'top-left', zone: 'right' },
            { value: '9', display: '9', special: '(', specialPosition: 'top-left', zone: 'right' },
            { value: '0', display: '0', special: ')', specialPosition: 'top-left', zone: 'right' },
            { value: '-', display: '-', special: '_', specialPosition: 'top-left', zone: 'right' },
            { value: '=', display: '=', special: '+', specialPosition: 'top-left', zone: 'right' },
            { value: 'backspace', display: 'Backspace', width: 80, zone: 'right' }
        ],
        [
            { value: 'tab', display: 'Tab', width: 60, zone: 'left' },
            { value: 'й', display: 'й', special: 'Й', specialPosition: 'top-left', zone: 'left' },
            { value: 'ц', display: 'ц', special: 'Ц', specialPosition: 'top-left', zone: 'left' },
            { value: 'у', display: 'у', special: 'У', specialPosition: 'top-left', zone: 'left' },
            { value: 'к', display: 'к', special: 'К', specialPosition: 'top-left', zone: 'left' },
            { value: 'е', display: 'е', special: 'Е', specialPosition: 'top-left', zone: 'left' },
            { value: 'н', display: 'н', special: 'Н', specialPosition: 'top-left', zone: 'right' },
            { value: 'г', display: 'г', special: 'Г', specialPosition: 'top-left', zone: 'right' },
            { value: 'ш', display: 'ш', special: 'Ш', specialPosition: 'top-left', zone: 'right' },
            { value: 'щ', display: 'щ', special: 'Щ', specialPosition: 'top-left', zone: 'right' },
            { value: 'з', display: 'з', special: 'З', specialPosition: 'top-left', zone: 'right' },
            { value: 'х', display: 'х', special: 'Х', specialPosition: 'top-left', zone: 'right' },
            { value: 'ъ', display: 'ъ', special: 'Ъ', specialPosition: 'top-left', zone: 'right' },
            { value: '/', display: '/', special: '|', specialPosition: 'top-left', zone: 'right' }
        ],
        [
            { value: 'capslock', display: 'Caps', width: 70, zone: 'left' },
            { value: 'ф', display: 'ф', special: 'Ф', specialPosition: 'top-left', zone: 'left' },
            { value: 'ы', display: 'ы', special: 'Ы', specialPosition: 'top-left', zone: 'left' },
            { value: 'в', display: 'в', special: 'В', specialPosition: 'top-left', zone: 'left' },
            { value: 'а', display: 'а', special: 'А', specialPosition: 'top-left', zone: 'left' },
            { value: 'п', display: 'п', special: 'П', specialPosition: 'top-left', zone: 'left' },
            { value: 'р', display: 'р', special: 'Р', specialPosition: 'top-left', zone: 'right' },
            { value: 'о', display: 'о', special: 'О', specialPosition: 'top-left', zone: 'right' },
            { value: 'л', display: 'л', special: 'Л', specialPosition: 'top-left', zone: 'right' },
            { value: 'д', display: 'д', special: 'Д', specialPosition: 'top-left', zone: 'right' },
            { value: 'ж', display: 'ж', special: 'Ж', specialPosition: 'top-left', zone: 'right' },
            { value: 'э', display: 'э', special: 'Э', specialPosition: 'top-left', zone: 'right' },
            { value: 'enter', display: 'Enter', width: 90, zone: 'right' }
        ],
        [
            { value: 'shift', display: 'Shift', width: 90, zone: 'left' },
            { value: 'я', display: 'я', special: 'Я', specialPosition: 'top-left', zone: 'left' },
            { value: 'ч', display: 'ч', special: 'Ч', specialPosition: 'top-left', zone: 'left' },
            { value: 'с', display: 'с', special: 'С', specialPosition: 'top-left', zone: 'left' },
            { value: 'м', display: 'м', special: 'М', specialPosition: 'top-left', zone: 'left' },
            { value: 'и', display: 'и', special: 'И', specialPosition: 'top-left', zone: 'left' },
            { value: 'т', display: 'т', special: 'Т', specialPosition: 'top-left', zone: 'right' },
            { value: 'ь', display: 'ь', special: 'Ь', specialPosition: 'top-left', zone: 'right' },
            { value: 'б', display: 'б', special: 'Б', specialPosition: 'top-left', zone: 'right' },
            { value: 'ю', display: 'ю', special: 'Ю', specialPosition: 'top-left', zone: 'right' },
            { value: '.', display: '.', special: ',', specialPosition: 'top-left', zone: 'right' },
            { value: 'shift', display: 'Shift', width: 110, zone: 'right' }
        ],
        [
            { value: 'ctrl', display: 'Ctrl', width: 50, zone: 'left' },
            { value: 'alt', display: 'Alt', width: 50, zone: 'left' },
            { value: ' ', display: 'Space', width: 250 },
            { value: 'alt', display: 'Alt', width: 50, zone: 'right' },
            { value: 'ctrl', display: 'Ctrl', width: 50, zone: 'right' }
        ]
    ]
};

const keyboardLayout = computed(() => keyboardLayouts[props.language]);

const nextChar = computed(() => props.typed.length < props.text.length ? props.text[props.typed.length] : '');

const toggleKeyboard = () => isMinimized.value = !isMinimized.value;

const isHighlighted = (keyValue: string | undefined, zone?: 'left' | 'right') => {
    if (!keyValue) { return false; }
    if (keyValue === ' ') { return nextChar.value === ' '; }
    if (keyValue === 'enter') { return nextChar.value === '\n'; }

    const isUpperOrSpecial = nextChar.value.match(/[A-ZА-ЯЁ~!@#$%^&*()_+{}|:"<>?]/);
    const isControlChar = nextChar.value !== '\n' && nextChar.value.match(/[\x00-\x1F\x7F]/);

    if (keyValue === 'shift') {
        if (!isUpperOrSpecial) { return false; }

        //TODO: move keyZone logic to function
        const keyZone = keyboardLayout.value.flat().find(k =>
            k.value === nextChar.value ||
            (k.special && k.special === nextChar.value) ||
            k.value.toLowerCase() === nextChar.value.toLowerCase() ||
            (k.special && k.special.toLowerCase() === nextChar.value.toLowerCase())
        )?.zone;

        return keyZone === 'left' ? zone === 'right' : zone === 'left';
    }

    if (['ctrl', 'alt', 'capslock'].includes(keyValue)) {
        if (!isControlChar) { return false; }

        const keyZone = keyboardLayout.value.flat().find(k =>
            k.value === nextChar.value ||
            (k.special && k.special === nextChar.value) ||
            k.value.toLowerCase() === nextChar.value.toLowerCase() ||
            (k.special && k.special.toLowerCase() === nextChar.value.toLowerCase())
        )?.zone;

        return keyZone === 'left' ? zone === 'right' : zone === 'left';
    }

    return nextChar.value === keyValue || nextChar.value.toLowerCase() === keyValue.toLowerCase();
};
</script>
Сейчас в тексте урока на каждом из языков (английский, русский) используются все возможные специальные символы. Нужно это исправить. Нужно сделать так, чтобы в тексте уроков на каждом из языков (английский, русский) использовались только те специальные символы, которые есть на реальной стандартной клавиатуре в соответствующей языку урока раскладке (английский, русский), и не было бы специальных символов, которых нет на реальной стандартной клавиатуре в соответствующей языку урока раскладке (английский, русский). Минимальные изменения. Основная логика должна остаться без изменений. В коде не должно быть новых комментариев. Выведи полный обновленный код всех измененных файлов.




php

Копировать
<?php

namespace App\Services;

use App\Models\Lesson;
use App\Models\LessonProgress;
use Random\RandomException;

class LessonService
{
    protected array $introductionOrder = [
        'en' => [
            'a', 's', 'd', 'f', 'j', 'k', 'l', ';',
            'q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p',
            'h', 'g', 'z', 'x', 'c', 'v', 'b', 'n', 'm', ',', '.',
            'A', 'S', 'D', 'F', 'J', 'K', 'L', ';',
            'Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P',
            'H', 'G', 'Z', 'X', 'C', 'V', 'B', 'N', 'M', ',', '.',
            '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '-', '=',
            '!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '_', '+', '[', ']', '{', '}', '|', '\\', ':', '"', '\'', '<', '>', '?', '~', '`'
        ],
        'ru' => [
            'ф', 'ы', 'в', 'а', 'о', 'л', 'д', 'ж',
            'й', 'ц', 'у', 'к', 'е', 'н', 'г', 'ш', 'щ', 'з', 'х', 'ъ',
            'я', 'ч', 'с', 'м', 'и', 'т', 'ь', 'б', 'ю', 'п', 'р', 'э',
            'ё',
            'Ф', 'Ы', 'В', 'А', 'О', 'Л', 'Д', 'Ж',
            'Й', 'Ц', 'У', 'К', 'Е', 'Н', 'Г', 'Ш', 'Щ', 'З', 'Х', 'Ъ',
            'Я', 'Ч', 'С', 'М', 'И', 'Т', 'Ь', 'Б', 'Ю', 'П', 'Р', 'Э',
            'Ё',
            '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '-', '=',
            '!', '"', '№', ';', '%', ':', '?', '*', '(', ')', '_', '+', '/', ',', '.'
        ],
    ];

    protected array $pairedMap = [
        '(' => ')',
        '[' => ']',
        '{' => '}',
        '<' => '>',
        '"' => '"',
        "'" => "'",
        '`' => '`'
    ];

    protected int $minLessonLength = 100;
    protected int $maxLessonLength = 300;
    protected int $minWordsPerLine = 2;
    protected int $maxWordsPerLine = 8;

    public function generateLessons(string $language, int $lessonCount, int $userId): void
    {
        $chars = $this->introductionOrder[$language] ?? $this->introductionOrder['en'];
        $totalChars = count($chars);

        Lesson::where('user_id', $userId)->where('language', $language)->delete();
        LessonProgress::where('user_id', $userId)->where('language', $language)->delete();

        $lessons = [];
        $availableCharsString = '';

        for ($i = 0; $i < $lessonCount; $i++) {
            $charsPerLesson = max(1, ceil($totalChars / max(1, $lessonCount - $i)));
            $newChars = [];

            for ($j = 0; $j < $charsPerLesson && !empty($chars); $j++) {
                $newChars[] = array_shift($chars);
            }

            if (empty($newChars) && !empty($this->introductionOrder[$language])) {
                $newChars = $this->introductionOrder[$language];
            }

            $newCharsString = implode('', $newChars);
            $availableCharsString .= $newCharsString;

            $lessons[] = [
                'user_id' => $userId,
                'number' => $i + 1,
                'total' => $lessonCount,
                'language' => $language,
                'new_chars' => $newCharsString,
                'text' => $this->generateLessonText(
                    $language,
                    $i + 1,
                    $lessonCount,
                    $availableCharsString,
                    $newCharsString
                ),
                'created_at' => now(),
                'updated_at' => now(),
            ];
        }

        Lesson::insert($lessons);
    }

    public function generateLessonText(string $language, int $lessonNumber, int $totalLessons, string $availableChars, string $newChars, ?int $length = null): string
    {
        $availableCharsArray = mb_str_split($availableChars, 1, 'UTF-8');
        $newCharsArray = mb_str_split($newChars, 1, 'UTF-8');

        if (empty($availableCharsArray)) {
            return '';
        }

        if ($length === null) {
            if ($totalLessons <= 1) {
                $length = $this->minLessonLength;
            } else {
                $length = $this->minLessonLength + ($this->maxLessonLength - $this->minLessonLength) * ($lessonNumber - 1) / ($totalLessons - 1);
            }
        }

        $text = '';
        $wordsAdded = 0;
        $lineWordCount = 0;
        $currentLineWords = random_int($this->minWordsPerLine, $this->maxWordsPerLine);
        $isFirstOfPair = true;
        $baseWord = null;

        while (mb_strlen($text) < $length) {
            if ($wordsAdded > 0) {
                if ($lineWordCount >= $currentLineWords) {
                    $separator = "\n";
                    $lineWordCount = 0;
                    $currentLineWords = random_int($this->minWordsPerLine, $this->maxWordsPerLine);
                } else {
                    $separator = ' ';
                }

                if (mb_strlen($text) + mb_strlen($separator) > $length) {
                    break;
                }

                $text .= $separator;
            }

            if ($isFirstOfPair) {
                $baseWord = $this->generateEnhancedWord($availableCharsArray, $newCharsArray, $language);
                $currentWord = $baseWord;
                $isFirstOfPair = false;

                $remainingAfterFirst = $length - mb_strlen($text) - mb_strlen($currentWord);

                if ($wordsAdded > 0) {
                    $remainingAfterFirst -= mb_strlen($separator ?? ' ');
                }

                $remainingAfterSecond = $remainingAfterFirst - mb_strlen(' ') - mb_strlen($currentWord);

                if ($remainingAfterFirst < 0 || $remainingAfterSecond < 0) {
                    break;
                }

                if ($lineWordCount + 2 > $currentLineWords) {
                    $text .= "\n";
                    $lineWordCount = 0;
                    $currentLineWords = random_int($this->minWordsPerLine, $this->maxWordsPerLine);
                }
            } else {
                $currentWord = $baseWord;
                $isFirstOfPair = true;
            }

            $remaining = $length - mb_strlen($text);

            if (mb_strlen($currentWord) > $remaining) {
                $currentWord = mb_substr($currentWord, 0, $remaining);
            }

            $text .= $currentWord;

            if (mb_strlen($currentWord) >= 3) {
                $wordsAdded++;
                $lineWordCount++;
            }
        }

        $lines = explode("\n", $text);
        $lines = array_map('rtrim', $lines);
        $text = implode("\n", array_filter($lines, function($line) {
            return !empty($line);
        }));

        return rtrim(mb_substr($text, 0, $length), "\n");
    }

    private function generateEnhancedWord(array $availableCharsArray, array $newCharsArray, string $language): string
    {
        $availableLetters = array_filter($availableCharsArray, function ($char) {
            return preg_match('/[a-zA-ZА-яёЁ0-9]/u', $char);
        });

        $newLetters = array_filter($newCharsArray, function ($char) {
            return preg_match('/[a-zA-ZА-яёЁ0-9]/u', $char);
        });

        $allVowels = $this->getVowels($language);
        $availableVowels = array_intersect($allVowels, $availableLetters);
        $newVowels = array_intersect($allVowels, $newLetters);

        $allConsonants = $this->getConsonants($language);
        $availableConsonants = array_intersect($allConsonants, $availableLetters);
        $newConsonants = array_intersect($allConsonants, $newLetters);

        $availableNumbers = array_filter($availableLetters, function ($char) {
            return preg_match('/[0-9]/u', $char);
        });

        $newNumbers = array_filter($newLetters, function ($char) {
            return preg_match('/[0-9]/u', $char);
        });

        $wordLength = random_int(3, 8);
        $letterPart = '';

        if (!empty($availableVowels) && !empty($availableConsonants)) {
            $startType = rand(0, 1) == 0 ? 'V' : 'C';
            $startSet = $startType == 'V' ? $availableVowels : $availableConsonants;
            $startSetNew = $startType == 'V' ? $newVowels : $newConsonants;
            $otherSet = $startType == 'V' ? $availableConsonants : $availableVowels;
            $otherSetNew = $startType == 'V' ? $newConsonants : $newVowels;
        } elseif (!empty($availableVowels)) {
            $startSet = $availableVowels;
            $startSetNew = $newVowels;
            $otherSet = [];
            $otherSetNew = [];
        } elseif (!empty($availableConsonants)) {
            $startSet = $availableConsonants;
            $startSetNew = $newConsonants;
            $otherSet = [];
            $otherSetNew = [];
        } else {
            return '';
        }

        for ($i = 0; $i < $wordLength; $i++) {
            $set = ($i % 2 == 0) ? $startSet : $otherSet;
            $setNew = ($i % 2 == 0) ? $startSetNew : $otherSetNew;

            if (empty($set)) {
                $set = $availableLetters;
                $setNew = $newLetters;
            }

 hull            $useNumber = !empty($availableNumbers) && rand(0, 99) < 30;

            if ($useNumber) {
                if (!empty($newNumbers) && rand(0, 99) < 70) {
                    $letterPart .= $newNumbers[array_rand($newNumbers)];
                } else {
                    $letterPart .= $availableNumbers[array_rand($availableNumbers)];
                }
            } else {
                if (!empty($setNew) && rand(0, 99) < 70) {
                    $letterPart .= $setNew[array_rand($setNew)];
                } else {
                    $letterPart .= $set[array_rand($set)];
                }
            }
        }

        $availableSpecials = array_filter($availableCharsArray, function ($char) use ($language) {
            $validSpecials = $language == 'en' ?
                ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '_', '+', '[', ']', '{', '}', '|', '\\', ':', '"', '\'', '<', '>', '?', '~', '`', ',', '.', ';'] :
                ['!', '"', '№', ';', '%', ':', '?', '*', '(', ')', '_', '+', '/', ',', '.'];
            return in_array($char, $validSpecials);
        });

        $pairedSymbols = array_merge(array_keys($this->pairedMap), array_values($this->pairedMap));
        $singleSpecials = array_diff($availableSpecials, $pairedSymbols);

        $possiblePairedOpenings = ['(', '[', '{', '<', '"', "'", '`'];
        $availablePairedOpenings = array_intersect($possiblePairedOpenings, $availableSpecials);
        $availablePaired = [];

        foreach ($availablePairedOpenings as $opening) {
            if (in_array($this->pairedMap[$opening], $availableSpecials)) {
                $availablePaired[] = $opening;
            }
        }

        $totalOptions = ['none'];

        if (!empty($singleSpecials)) {
            $totalOptions[] = 'single';
        }

        if (!empty($availablePaired)) {
            $totalOptions[] = 'paired';
        }

        $type = $totalOptions[array_rand($totalOptions)];

        if ($type == 'none') {
            return $letterPart;
        } elseif ($type == 'single') {
            $special = $singleSpecials[array_rand($singleSpecials)];

            if ($this->isPunctuation($special)) {
                return $letterPart . $special;
            }

            $position = rand(0, 1) == 0 ? 'start' : 'end';

            return $position == 'start' ? $special . $letterPart : $letterPart . $special;
        } else {
            $opening = $availablePaired[array_rand($availablePaired)];
            $closing = $this->pairedMap[$opening];

            return $opening . $letterPart . $closing;
        }
    }

    private function isPunctuation(string $char): bool
    {
        return in_array($char, [',', '.', ';', ':', '!', '?']);
    }

    private function getVowels(string $language): array
    {
        if ($language == 'ru') {
            return ['а', 'е', 'ё', 'и', 'о', 'у', 'ы', 'э', 'ю', 'я', 'А', 'Е', 'Ё', 'И', 'О', 'У', 'Ы', 'Э', 'Ю', 'Я'];
        } elseif ($language == 'en') {
            return ['a', 'e', 'i', 'o', 'u', 'y', 'A', 'E', 'I', 'O', 'U', 'Y'];
        }

        return [];
    }

    private function getConsonants(string $language): array
    {
        if ($language == 'ru') {
            return array_diff($this->getRussianLetters(), $this->getVowels('ru'));
        } elseif ($language == 'en') {
            return array_diff($this->getEnglishLetters(), $this->getVowels('en'));
        }

        return [];
    }

    private function getRussianLetters(): array
    {
        return array_merge(
            ['а', 'б', 'в', 'г', 'д', 'е', 'ё', 'ж', 'з', 'и', 'й', 'к', 'л', 'м', 'н', 'о', 'п', 'р', 'с', 'т', 'у', 'ф', 'х', 'ц', 'ч', 'ш', 'щ', 'ъ', 'ы', 'ь', 'э', 'ю', 'я'],
            ['А', 'Б', 'В', 'Г', 'Д', 'Е', 'Ё', 'Ж', 'З', 'И', 'Й', 'К', 'Л', 'М', 'Н', 'О', 'П', 'Р', 'С', 'Т', 'У', 'Ф', 'Х', 'Ц', 'Ч', 'Ш', 'Щ', 'Ъ', 'Ы', 'Ь', 'Э', 'Ю', 'Я'],
        );
    }

    private function getEnglishLetters(): array
    {
        return array_merge(
            range('a', 'z'),
            range('A', 'Z'),
        );
    }
}
Показать в боковой панели








Чем я могу помочь?


DeepSearch


Think

Grok 3
