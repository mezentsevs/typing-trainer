В web-приложении для тренировки слепого метода печати есть уроки и финальный тест. Предоставляю контекстную информацию по задаче:
resources/js/components/Lesson.vue
<template>
    <div class="min-h-screen bg-gray-100 p-8">
        <div class="max-w-4xl mx-auto bg-white p-6 rounded shadow-md">
            <h2 class="text-2xl font-bold mb-4">Lesson {{ lesson.number }} ({{ language }})</h2>
            <p><strong>New Characters:</strong> {{ lesson.new_chars }}</p>
            <p><strong>Time:</strong> {{ time }}s</p>
            <p><strong>Speed:</strong> {{ speed }} WPM</p>
            <p><strong>Errors:</strong> {{ errors }}</p>
            <div class="mt-4">
                <div class="text-lg font-mono">
                    <span v-for="(char, index) in text" :key="index" :class="{ 'error-char': typed[index] && typed[index] !== char }">
                        {{ char }}
                    </span>
                </div>
                <input
                    v-model="typed"
                    @input="handleInput"
                    class="w-full p-2 border rounded mt-4"
                    ref="input"
                    autofocus
                    :disabled="isLessonCompleted"
                />
            </div>
            <div v-if="isLessonCompleted" class="mt-4 text-green-600 font-bold">
                Lesson Completed!
            </div>
            <router-link
                v-if="nextLesson && isLessonCompleted"
                :to="`/lesson/${language}/${nextLesson.number}`"
                @click="resetAndLoadNext"
                class="mt-4 inline-block bg-blue-500 text-white p-2 rounded"
            >
                Next Lesson
            </router-link>
            <router-link
                v-else-if="isLessonCompleted"
                :to="`/test/${language}`"
                class="mt-4 inline-block bg-green-500 text-white p-2 rounded"
            >
                Take Final Test
            </router-link>
        </div>
    </div>
</template>

<script lang="ts" setup>
import { ref, computed, onMounted } from 'vue';
import { useRoute } from 'vue-router';
import axios from 'axios';

const route = useRoute();
const language = route.params.language as string;
const lessonNumber = ref(parseInt(route.params.number as string));
const lesson = ref<{ id: number; number: number; new_chars: string }>({ id: 0, number: lessonNumber.value, new_chars: '' });
const text = ref('');
const typed = ref('');
const startTime = ref(0);
const time = ref(0);
const errors = ref(0);
const speed = ref(0);
const input = ref<HTMLInputElement | null>(null);
const lessons = ref<any[]>([]);
const isLessonCompleted = ref(false);

const nextLesson = computed(() => lessons.value.find(l => l.number === lessonNumber.value + 1));

const resetState = () => {
    text.value = '';
    typed.value = '';
    startTime.value = 0;
    time.value = 0;
    errors.value = 0;
    speed.value = 0;
    isLessonCompleted.value = false;
};

const fetchLesson = async () => {
    const [lessonsRes, textRes] = await Promise.all([
        axios.get(`/lessons/${language}`),
        axios.get(`/lessons/${language}/${lessonNumber.value}/text`),
    ]);

    lessons.value = lessonsRes.data;
    lesson.value = lessonsRes.data.find((l: any) => l.number === lessonNumber.value);
    text.value = textRes.data.text;
};

const handleInput = async () => {
    if (!startTime.value) {
        startTime.value = Date.now();
    }

    const typedChars = typed.value.split('');
    let errorCount = 0;
    for (let i = 0; i < typedChars.length; i++) {
        if (typedChars[i] !== text.value[i]) {
            errorCount++;
        }
    }
    errors.value = errorCount;

    time.value = Math.round((Date.now() - startTime.value) / 1000);
    const words = typed.value.length / 5;
    speed.value = time.value > 0 ? Math.round((words / time.value) * 60) : 0;

    if (typed.value.length === text.value.length) {
        isLessonCompleted.value = true;
        await axios.post('/lessons/progress', {
            lesson_id: lesson.value.id,
            time_seconds: time.value,
            speed_wpm: speed.value,
            errors: errors.value,
        });
    }
};

const resetAndLoadNext = async () => {
    if (!isLessonCompleted.value) return;
    lessonNumber.value++;
    resetState();
    await fetchLesson();
    if (input.value) {
        input.value.focus();
    }
};

onMounted(async () => {
    resetState();
    await fetchLesson();
    if (input.value) {
        input.value.focus();
    }
});
</script>
resources/js/components/FinalTest.vue
<template>
    <div class="min-h-screen bg-gray-100 p-8">
        <div class="max-w-4xl mx-auto bg-white p-6 rounded shadow-md">
            <h2 class="text-2xl font-bold mb-4">Final Typing Test ({{ language }})</h2>
            <div class="mb-4">
                <label class="block text-gray-700">Genre (optional)</label>
                <select v-model="genre" class="p-2 border rounded">
                    <option value="">None</option>
                    <option value="fiction">Fiction</option>
                    <option value="non-fiction">Non-fiction</option>
                    <option value="poetry">Poetry</option>
                </select>
            </div>
            <div class="mb-4">
                <label class="block text-gray-700">Upload Text (optional)</label>
                <input type="file" accept=".txt" @change="uploadFile" class="p-2 border rounded" />
            </div>
            <button @click="fetchText" class="bg-blue-500 text-white p-2 rounded mb-4">Start Test</button>
            <p><strong>Time:</strong> {{ time }}s</p>
            <p><strong>Speed:</strong> {{ speed }} WPM</p>
            <p><strong>Errors:</strong> {{ errors }}</p>
            <div v-if="text" class="mt-4">
                <div class="text-lg font-mono">
                    <span v-for="(char, index) in text" :key="index" :class="{ 'error-char': typed[index] && typed[index] !== char }">
                        {{ char }}
                    </span>
                </div>
                <input v-model="typed" @input="handleInput" class="w-full p-2 border rounded mt-4" ref="input" :disabled="isTestCompleted" autofocus />
                <p v-if="isTestCompleted" class="text-green-500 font-bold mt-2">Test completed!</p>
                <router-link v-if="isTestCompleted" to="/" class="bg-blue-500 text-white p-2 rounded mt-2 inline-block">Back to Home</router-link>
            </div>
        </div>
    </div>
</template>

<script lang="ts" setup>
import { ref, onMounted } from 'vue';
import { useRoute } from 'vue-router';
import axios from 'axios';

const route = useRoute();
const language = ref(route.params.language as string);
const genre = ref('');
const text = ref('');
const typed = ref('');
const startTime = ref(0);
const time = ref(0);
const errors = ref(0);
const speed = ref(0);
const input = ref<HTMLInputElement | null>(null);
const isTestCompleted = ref(false);

const fetchText = async () => {
    const response = await axios.get('/test/text', { params: { language: language.value, genre: genre.value } });
    text.value = response.data.text;
    typed.value = '';
    startTime.value = 0;
    time.value = 0;
    errors.value = 0;
    speed.value = 0;
    isTestCompleted.value = false;
};

const uploadFile = async (event: Event) => {
    const file = (event.target as HTMLInputElement).files?.[0];
    if (file) {
        const formData = new FormData();
        formData.append('file', file);
        formData.append('language', language.value);
        await axios.post('/test/upload', formData);
        fetchText();
    }
};

const handleInput = async () => {
    if (!startTime.value) {
        startTime.value = Date.now();
    }

    const typedChars = typed.value.split('');
    let errorCount = 0;
    for (let i = 0; i < typedChars.length; i++) {
        if (typedChars[i] !== text.value[i]) {
            errorCount++;
        }
    }
    errors.value = errorCount;

    time.value = Math.round((Date.now() - startTime.value) / 1000);
    const words = typed.value.length / 5;
    speed.value = time.value > 0 ? Math.round((words / time.value) * 60) : 0;

    if (typed.value.length === text.value.length) {
        await axios.post('/test/result', {
            language: language.value,
            speed_wpm: speed.value,
            errors: errors.value,
        });
        isTestCompleted.value = true;
    }
};

onMounted(() => {
    if (input.value) {
        input.value.focus();
    }
});
</script>
Нужно реализовать отдельный компонент виртуальной клавиатуры, добавить компонент виртуальной клавиатуры в компоненты урока и финального теста после поля ввода текста урока или теста. Раскладка языка виртуальной клавиатуры должна соответствовать языку урока или теста. На виртуальной клавиатуре должны подсвечиваться зеленым цветом клавиши, соответствующие тем следующим символам, которые должен набрать пользователь в процессе урока или теста. Минимальные изменения в коде. В коде не должно быть комментариев. Выведи код компонента виртуальной клавиатуры и обновленный код компонентов урока и финального теста.




html

Копировать
<template>
    <div class="keyboard flex flex-wrap justify-center gap-1 p-4">
        <button
            v-for="key in keyboardLayout"
            :key="key"
            :class="[
                'p-2 border rounded text-center',
                nextChar === key.toLowerCase() ? 'bg-green-500 text-white' : 'bg-gray-200'
            ]"
            style="width: 40px;"
        >
            {{ key }}
        </button>
    </div>
</template>

<script lang="ts" setup>
import { computed } from 'vue';

const props = defineProps<{
    language: string;
    typed: string;
    text: string;
}>();

const keyboardLayouts = {
    en: [
        '`', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '-', '=',
        'q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p', '[', ']',
        'a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', ';', "'",
        'z', 'x', 'c', 'v', 'b', 'n', 'm', ',', '.', '/'
    ],
    ru: [
        'ё', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '-', '=',
        'й', 'ц', 'у', 'к', 'е', 'н', 'г', 'ш', 'щ', 'з', 'х', 'ъ',
        'ф', 'ы', 'в', 'а', 'п', 'р', 'о', 'л', 'д', 'ж', 'э',
        'я', 'ч', 'с', 'м', 'и', 'т', 'ь', 'б', 'ю', '.'
    ]
};

const keyboardLayout = computed(() => keyboardLayouts[props.language] || keyboardLayouts.en);

const nextChar = computed(() => {
    return props.typed.length < props.text.length ? props.text[props.typed.length].toLowerCase() : '';
});
</script>
Show in sidebar
html

Копировать
<template>
    <div class="min-h-screen bg-gray-100 p-8">
        <div class="max-w-4xl mx-auto bg-white p-6 rounded shadow-md">
            <h2 class="text-2xl font-bold mb-4">Lesson {{ lesson.number }} ({{ language }})</h2>
            <p><strong>New Characters:</strong> {{ lesson.new_chars }}</p>
            <p><strong>Time:</strong> {{ time }}s</p>
            <p><strong>Speed:</strong> {{ speed }} WPM</p>
            <p><strong>Errors:</strong> {{ errors }}</p>
            <div class="mt-4">
                <div class="text-lg font-mono">
                    <span v-for="(char, index) in text" :key="index" :class="{ 'error-char': typed[index] && typed[index] !== char }">
                        {{ char }}
                    </span>
                </div>
                <input
                    v-model="typed"
                    @input="handleInput"
                    class="w-full p-2 border rounded mt-4"
                    ref="input"
                    autofocus
                    :disabled="isLessonCompleted"
                />
                <VirtualKeyboard :language="language" :typed="typed" :text="text" />
            </div>
            <div v-if="isLessonCompleted" class="mt-4 text-green-600 font-bold">
                Lesson Completed!
            </div>
            <router-link
                v-if="nextLesson && isLessonCompleted"
                :to="`/lesson/${language}/${nextLesson.number}`"
                @click="resetAndLoadNext"
                class="mt-4 inline-block bg-blue-500 text-white p-2 rounded"
            >
                Next Lesson
            </router-link>
            <router-link
                v-else-if="isLessonCompleted"
                :to="`/test/${language}`"
                class="mt-4 inline-block bg-green-500 text-white p-2 rounded"
            >
                Take Final Test
            </router-link>
        </div>
    </div>
</template>

<script lang="ts" setup>
import { ref, computed, onMounted } from 'vue';
import { useRoute } from 'vue-router';
import axios from 'axios';
import VirtualKeyboard from './VirtualKeyboard.vue';

const route = useRoute();
const language = route.params.language as string;
const lessonNumber = ref(parseInt(route.params.number as string));
const lesson = ref<{ id: number; number: number; new_chars: string }>({ id: 0, number: lessonNumber.value, new_chars: '' });
const text = ref('');
const typed = ref('');
const startTime = ref(0);
const time = ref(0);
const errors = ref(0);
const speed = ref(0);
const input = ref<HTMLInputElement | null>(null);
const lessons = ref<any[]>([]);
const isLessonCompleted = ref(false);

const nextLesson = computed(() => lessons.value.find(l => l.number === lessonNumber.value + 1));

const resetState = () => {
    text.value = '';
    typed.value = '';
    startTime.value = 0;
    time.value = 0;
    errors.value = 0;
    speed.value = 0;
    isLessonCompleted.value = false;
};

const fetchLesson = async () => {
    const [lessonsRes, textRes] = await Promise.all([
        axios.get(`/lessons/${language}`),
        axios.get(`/lessons/${language}/${lessonNumber.value}/text`),
    ]);

    lessons.value = lessonsRes.data;
    lesson.value = lessonsRes.data.find((l: any) => l.number === lessonNumber.value);
    text.value = textRes.data.text;
};

const handleInput = async () => {
    if (!startTime.value) {
        startTime.value = Date.now();
    }

    const typedChars = typed.value.split('');
    let errorCount = 0;
    for (let i = 0; i < typedChars.length; i++) {
        if (typedChars[i] !== text.value[i]) {
            errorCount++;
        }
    }
    errors.value = errorCount;

    time.value = Math.round((Date.now() - startTime.value) / 1000);
    const words = typed.value.length / 5;
    speed.value = time.value > 0 ? Math.round((words / time.value) * 60) : 0;

    if (typed.value.length === text.value.length) {
        isLessonCompleted.value = true;
        await axios.post('/lessons/progress', {
            lesson_id: lesson.value.id,
            time_seconds: time.value,
            speed_wpm: speed.value,
            errors: errors.value,
        });
    }
};

const resetAndLoadNext = async () => {
    if (!isLessonCompleted.value) return;
    lessonNumber.value++;
    resetState();
    await fetchLesson();
    if (input.value) {
        input.value.focus();
    }
};

onMounted(async () => {
    resetState();
    await fetchLesson();
    if (input.value) {
        input.value.focus();
    }
});
</script>
Show in sidebar
html

Копировать
<template>
    <div class="min-h-screen bg-gray-100 p-8">
        <div class="max-w-4xl mx-auto bg-white p-6 rounded shadow-md">
            <h2 class="text-2xl font-bold mb-4">Final Typing Test ({{ language }})</h2>
            <div class="mb-4">
                <label class="block text-gray-700">Genre (optional)</label>
                <select v-model="genre" class="p-2 border rounded">
                    <option value="">None</option>
                    <option value="fiction">Fiction</option>
                    <option value="non-fiction">Non-fiction</option>
                    <option value="poetry">Poetry</option>
                </select>
            </div>
            <div class="mb-4">
                <label class="block text-gray-700">Upload Text (optional)</label>
                <input type="file" accept=".txt" @change="uploadFile" class="p-2 border rounded" />
            </div>
            <button @click="fetchText" class="bg-blue-500 text-white p-2 rounded mb-4">Start Test</button>
            <p><strong>Time:</strong> {{ time }}s</p>
            <p><strong>Speed:</strong> {{ speed }} WPM</p>
            <p><strong>Errors:</strong> {{ errors }}</p>
            <div v-if="text" class="mt-4">
                <div class="text-lg font-mono">
                    <span v-for="(char, index) in text" :key="index" :class="{ 'error-char': typed[index] && typed[index] !== char }">
                        {{ char }}
                    </span>
                </div>
                <input v-model="typed" @input="handleInput" class="w-full p-2 border rounded mt-4" ref="input" :disabled="isTestCompleted" autofocus />
                <VirtualKeyboard :language="language" :typed="typed" :text="text" />
                <p v-if="isTestCompleted" class="text-green-500 font-bold mt-2">Test completed!</p>
                <router-link v-if="isTestCompleted" to="/" class="bg-blue-500 text-white p-2 rounded mt-2 inline-block">Back to Home</router-link>
            </div>
        </div>
    </div>
</template>

<script lang="ts" setup>
import { ref, onMounted } from 'vue';
import { useRoute } from 'vue-router';
import axios from 'axios';
import VirtualKeyboard from './VirtualKeyboard.vue';

const route = useRoute();
const language = ref(route.params.language as string);
const genre = ref('');
const text = ref('');
const typed = ref('');
const startTime = ref(0);
const time = ref(0);
const errors = ref(0);
const speed = ref(0);
const input = ref<HTMLInputElement | null>(null);
const isTestCompleted = ref(false);

const fetchText = async () => {
    const response = await axios.get('/test/text', { params: { language: language.value, genre: genre.value } });
    text.value = response.data.text;
    typed.value = '';
    startTime.value = 0;
    time.value = 0;
    errors.value = 0;
    speed.value = 0;
    isTestCompleted.value = false;
};

const uploadFile = async (event: Event) => {
    const file = (event.target as HTMLInputElement).files?.[0];
    if (file) {
        const formData = new FormData();
        formData.append('file', file);
        formData.append('language', language.value);
        await axios.post('/test/upload', formData);
        fetchText();
    }
};

const handleInput = async () => {
    if (!startTime.value) {
        startTime.value = Date.now();
    }

    const typedChars = typed.value.split('');
    let errorCount = 0;
    for (let i = 0; i < typedChars.length; i++) {
        if (typedChars[i] !== text.value[i]) {
            errorCount++;
        }
    }
    errors.value = errorCount;

    time.value = Math.round((Date.now() - startTime.value) / 1000);
    const words = typed.value.length / 5;
    speed.value = time.value > 0 ? Math.round((words / time.value) * 60) : 0;

    if (typed.value.length === text.value.length) {
        await axios.post('/test/result', {
            language: language.value,
            speed_wpm: speed.value,
            errors: errors.value,
        });
        isTestCompleted.value = true;
    }
};

onMounted(() => {
    if (input.value) {
        input.value.focus();
    }
});
</script>
Show in sidebar






Нужно учесть все специальные символы, пробел, ввод и т.д., и клавиши-модификаторы на клавиатуре. Выведи обновленный код.




html

Копировать
<template>
    <div class="keyboard flex flex-col gap-2 p-4">
        <div v-for="(row, rowIndex) in keyboardLayout" :key="rowIndex" class="flex justify-center gap-1">
            <button
                v-for="key in row"
                :key="key.value"
                :class="[
                    'p-2 border rounded text-center',
                    isHighlighted(key.value) ? 'bg-green-500 text-white' : 'bg-gray-200',
                    key.width ? `w-${key.width}` : 'w-10'
                ]"
                :style="{ minWidth: key.width ? `${key.width}px` : '40px' }"
            >
                {{ key.display }}
            </button>
        </div>
    </div>
</template>

<script lang="ts" setup>
import { computed } from 'vue';

const props = defineProps<{
    language: string;
    typed: string;
    text: string;
}>();

const keyboardLayouts = {
    en: [
        [
            { value: '`', display: '`' }, { value: '1', display: '1' }, { value: '2', display: '2' }, { value: '3', display: '3' },
            { value: '4', display: '4' }, { value: '5', display: '5' }, { value: '6', display: '6' }, { value: '7', display: '7' },
            { value: '8', display: '8' }, { value: '9', display: '9' }, { value: '0', display: '0' }, { value: '-', display: '-' },
            { value: '=', display: '=' }, { value: 'backspace', display: 'Backspace', width: 80 }
        ],
        [
            { value: 'tab', display: 'Tab', width: 60 }, { value: 'q', display: 'q' }, { value: 'w', display: 'w' },
            { value: 'e', display: 'e' }, { value: 'r', display: 'r' }, { value: 't', display: 't' }, { value: 'y', display: 'y' },
            { value: 'u', display: 'u' }, { value: 'i', display: 'i' }, { value: 'o', display: 'o' }, { value: 'p', display: 'p' },
            { value: '[', display: '[' }, { value: ']', display: ']' }, { value: '\\', display: '\\' }
        ],
        [
            { value: 'capslock', display: 'Caps', width: 70 }, { value: 'a', display: 'a' }, { value: 's', display: 's' },
            { value: 'd', display: 'd' }, { value: 'f', display: 'f' }, { value: 'g', display: 'g' }, { value: 'h', display: 'h' },
            { value: 'j', display: 'j' }, { value: 'k', display: 'k' }, { value: 'l', display: 'l' }, { value: ';', display: ';' },
            { value: '\'', display: '\'' }, { value: 'enter', display: 'Enter', width: 80 }
        ],
        [
            { value: 'shift', display: 'Shift', width: 90 }, { value: 'z', display: 'z' }, { value: 'x', display: 'x' },
            { value: 'c', display: 'c' }, { value: 'v', display: 'v' }, { value: 'b', display: 'b' }, { value: 'n', display: 'n' },
            { value: 'm', display: 'm' }, { value: ',', display: ',' }, { value: '.', display: '.' }, { value: '/', display: '/' },
            { value: 'shift', display: 'Shift', width: 90 }
        ],
        [
            { value: 'ctrl', display: 'Ctrl', width: 60 }, { value: 'alt', display: 'Alt', width: 60 },
            { value: ' ', display: 'Space', width: 200 }, { value: 'alt', display: 'Alt', width: 60 },
            { value: 'ctrl', display: 'Ctrl', width: 60 }
        ]
    ],
    ru: [
        [
            { value: 'ё', display: 'ё' }, { value: '1', display: '1' }, { value: '2', display: '2' }, { value: '3', display: '3' },
            { value: '4', display: '4' }, { value: '5', display: '5' }, { value: '6', display: '6' }, { value: '7', display: '7' },
            { value: '8', display: '8' }, { value: '9', display: '9' }, { value: '0', display: '0' }, { value: '-', display: '-' },
            { value: '=', display: '=' }, { value: 'backspace', display: 'Backspace', width: 80 }
        ],
        [
            { value: 'tab', display: 'Tab', width: 60 }, { value: 'й', display: 'й' }, { value: 'ц', display: 'ц' },
            { value: 'у', display: 'у' }, { value: 'к', display: 'к' }, { value: 'е', display: 'е' }, { value: 'н', display: 'н' },
            { value: 'г', display: 'г' }, { value: 'ш', display: 'ш' }, { value: 'щ', display: 'щ' }, { value: 'з', display: 'з' },
            { value: 'х', display: 'х' }, { value: 'ъ', display: 'ъ' }
        ],
        [
            { value: 'capslock', display: 'Caps', width: 70 }, { value: 'ф', display: 'ф' }, { value: 'ы', display: 'ы' },
            { value: 'в', display: 'в' }, { value: 'а', display: 'а' }, { value: 'п', display: 'п' }, { value: 'р', display: 'р' },
            { value: 'о', display: 'о' }, { value: 'л', display: 'л' }, { value: 'д', display: 'д' }, { value: 'ж', display: 'ж' },
            { value: 'э', display: 'э' }, { value: 'enter', display: 'Enter', width: 80 }
        ],
        [
            { value: 'shift', display: 'Shift', width: 90 }, { value: 'я', display: 'я' }, { value: 'ч', display: 'ч' },
            { value: 'с', display: 'с' }, { value: 'м', display: 'м' }, { value: 'и', display: 'и' }, { value: 'т', display: 'т' },
            { value: 'ь', display: 'ь' }, { value: 'б', display: 'б' }, { value: 'ю', display: 'ю' }, { value: '.', display: '.' },
            { value: 'shift', display: 'Shift', width: 90 }
        ],
        [
            { value: 'ctrl', display: 'Ctrl', width: 60 }, { value: 'alt', display: 'Alt', width: 60 },
            { value: ' ', display: 'Space', width: 200 }, { value: 'alt', display: 'Alt', width: 60 },
            { value: 'ctrl', display: 'Ctrl', width: 60 }
        ]
    ]
};

const keyboardLayout = computed(() => keyboardLayouts[props.language] || keyboardLayouts.en);

const nextChar = computed(() => {
    return props.typed.length < props.text.length ? props.text[props.typed.length].toLowerCase() : '';
});

const isHighlighted = (keyValue: string) => {
    if (keyValue === ' ') return nextChar.value === ' ';
    if (keyValue === 'enter') return nextChar.value === '\n';
    return nextChar.value === keyValue.toLowerCase();
};
</script>
Show in sidebar
html

Копировать
<template>
    <div class="min-h-screen bg-gray-100 p-8">
        <div class="max-w-4xl mx-auto bg-white p-6 rounded shadow-md">
            <h2 class="text-2xl font-bold mb-4">Lesson {{ lesson.number }} ({{ language }})</h2>
            <p><strong>New Characters:</strong> {{ lesson.new_chars }}</p>
            <p><strong>Time:</strong> {{ time }}s</p>
            <p><strong>Speed:</strong> {{ speed }} WPM</p>
            <p><strong>Errors:</strong> {{ errors }}</p>
            <div class="mt-4">
                <div class="text-lg font-mono">
                    <span v-for="(char, index) in text" :key="index" :class="{ 'error-char': typed[index] && typed[index] !== char }">
                        {{ char }}
                    </span>
                </div>
                <input
                    v-model="typed"
                    @input="handleInput"
                    class="w-full p-2 border rounded mt-4"
                    ref="input"
                    autofocus
                    :disabled="isLessonCompleted"
                />
                <VirtualKeyboard :language="language" :typed="typed" :text="text" />
            </div>
            <div v-if="isLessonCompleted" class="mt-4 text-green-600 font-bold">
                Lesson Completed!
            </div>
            <router-link
                v-if="nextLesson && isLessonCompleted"
                :to="`/lesson/${language}/${nextLesson.number}`"
                @click="resetAndLoadNext"
                class="mt-4 inline-block bg-blue-500 text-white p-2 rounded"
            >
                Next Lesson
            </router-link>
            <router-link
                v-else-if="isLessonCompleted"
                :to="`/test/${language}`"
                class="mt-4 inline-block bg-green-500 text-white p-2 rounded"
            >
                Take Final Test
            </router-link>
        </div>
    </div>
</template>

<script lang="ts" setup>
import { ref, computed, onMounted } from 'vue';
import { useRoute } from 'vue-router';
import axios from 'axios';
import VirtualKeyboard from './VirtualKeyboard.vue';

const route = useRoute();
const language = route.params.language as string;
const lessonNumber = ref(parseInt(route.params.number as string));
const lesson = ref<{ id: number; number: number; new_chars: string }>({ id: 0, number: lessonNumber.value, new_chars: '' });
const text = ref('');
const typed = ref('');
const startTime = ref(0);
const time = ref(0);
const errors = ref(0);
const speed = ref(0);
const input = ref<HTMLInputElement | null>(null);
const lessons = ref<any[]>([]);
const isLessonCompleted = ref(false);

const nextLesson = computed(() => lessons.value.find(l => l.number === lessonNumber.value + 1));

const resetState = () => {
    text.value = '';
    typed.value = '';
    startTime.value = 0;
    time.value = 0;
    errors.value = 0;
    speed.value = 0;
    isLessonCompleted.value = false;
};

const fetchLesson = async () => {
    const [lessonsRes, textRes] = await Promise.all([
        axios.get(`/lessons/${language}`),
        axios.get(`/lessons/${language}/${lessonNumber.value}/text`),
    ]);

    lessons.value = lessonsRes.data;
    lesson.value = lessonsRes.data.find((l: any) => l.number === lessonNumber.value);
    text.value = textRes.data.text;
};

const handleInput = async () => {
    if (!startTime.value) {
        startTime.value = Date.now();
    }

    const typedChars = typed.value.split('');
    let errorCount = 0;
    for (let i = 0; i < typedChars.length; i++) {
        if (typedChars[i] !== text.value[i]) {
            errorCount++;
        }
    }
    errors.value = errorCount;

    time.value = Math.round((Date.now() - startTime.value) / 1000);
    const words = typed.value.length / 5;
    speed.value = time.value > 0 ? Math.round((words / time.value) * 60) : 0;

    if (typed.value.length === text.value.length) {
        isLessonCompleted.value = true;
        await axios.post('/lessons/progress', {
            lesson_id: lesson.value.id,
            time_seconds: time.value,
            speed_wpm: speed.value,
            errors: errors.value,
        });
    }
};

const resetAndLoadNext = async () => {
    if (!isLessonCompleted.value) return;
    lessonNumber.value++;
    resetState();
    await fetchLesson();
    if (input.value) {
        input.value.focus();
    }
};

onMounted(async () => {
    resetState();
    await fetchLesson();
    if (input.value) {
        input.value.focus();
    }
});
</script>
Show in sidebar
html

Копировать
<template>
    <div class="min-h-screen bg-gray-100 p-8">
        <div class="max-w-4xl mx-auto bg-white p-6 rounded shadow-md">
            <h2 class="text-2xl font-bold mb-4">Final Typing Test ({{ language }})</h2>
            <div class="mb-4">
                <label class="block text-gray-700">Genre (optional)</label>
                <select v-model="genre" class="p-2 border rounded">
                    <option value="">None</option>
                    <option value="fiction">Fiction</option>
                    <option value="non-fiction">Non-fiction</option>
                    <option value="poetry">Poetry</option>
                </select>
            </div>
            <div class="mb-4">
                <label class="block text-gray-700">Upload Text (optional)</label>
                <input type="file" accept=".txt" @change="uploadFile" class="p-2 border rounded accept=".txt" @change="uploadFile" class="p-2 border rounded" />
            </div>
            <button @click="fetchText" class="bg-blue-500 text-white p-2 rounded mb-4">Start Test</button>
            <p><strong>Time:</strong> {{ time }}s</p>
            <p><strong>Speed:</strong> {{ speed }} WPM</p>
            <p><strong>Errors:</strong> {{ errors }}</p>
            <div v-if="text" class="mt-4">
                <div class="text-lg font-mono">
                    <span v-for="(char, index) in text" :key="index" :class="{ 'error-char': typed[index] && typed[index] !== char }">
                        {{ char }}
                    </span>
                </div>
                <input v-model="typed" @input="handleInput" class="w-full p-2 border rounded mt-4" ref="input" :disabled="isTestCompleted" autofocus />
                <VirtualKeyboard :language="language" :typed="typed" :text="text" />
                <p v-if="isTestCompleted" class="text-green-500 font-bold mt-2">Test completed!</p>
                <router-link v-if="isTestCompleted" to="/" class="bg-blue-500 text-white p-2 rounded mt-2 inline-block">Back to Home</router-link>
            </div>
        </div>
    </div>
</template>

<script lang="ts" setup>
import { ref, onMounted } from 'vue';
import { useRoute } from 'vue-router';
import axios from 'axios';
import VirtualKeyboard from './VirtualKeyboard.vue';

const route = useRoute();
const language = ref(route.params.language as string);
const genre = ref('');
const text = ref('');
const typed = ref('');
const startTime = ref(0);
const time = ref(0);
const errors = ref(0);
const speed = ref(0);
const input = ref<HTMLInputElement | null>(null);
const isTestCompleted = ref(false);

const fetchText = async () => {
    const response = await axios.get('/test/text', { params: { language: language.value, genre: genre.value } });
    text.value = response.data.text;
    typed.value = '';
    startTime.value = 0;
    time.value = 0;
    errors.value = 0;
    speed.value = 0;
    isTestCompleted.value = false;
};

const uploadFile = async (event: Event) => {
    const file = (event.target as HTMLInputElement).files?.[0];
    if (file) {
        const formData = new FormData();
        formData.append('file', file);
        formData.append('language', language.value);
        await axios.post('/test/upload', formData);
        fetchText();
    }
};

const handleInput = async () => {
    if (!startTime.value) {
        startTime.value = Date.now();
    }

    const typedChars = typed.value.split('');
    let errorCount = 0;
    for (let i = 0; i < typedChars.length; i++) {
        if (typedChars[i] !== text.value[i]) {
            errorCount++;
        }
    }
    errors.value = errorCount;

    time.value = Math.round((Date.now() - startTime.value) / 1000);
    const words = typed.value.length / 5;
    speed.value = time.value > 0 ? Math.round((words / time.value) * 60) : 0;

    if (typed.value.length === text.value.length) {
        await axios.post('/test/result', {
            language: language.value,
            speed_wpm: speed.value,
            errors: errors.value,
        });
        isTestCompleted.value = true;
    }
};

onMounted(() => {
    if (input.value) {
        input.value.focus();
    }
});
</script>
Show in sidebar






При вводе заглавных букв и специальных символов необходимо подсвечивать зеленым цветом также и клавиши модификаторов клавиатуры (shift, ctrl, alt  и т.д.). Минимальные изменения. В коде не должно быть комментариев. Выведи обновленный код всех компонентов.




html

Копировать
<template>
    <div class="keyboard flex flex-col gap-2 p-4">
        <div v-for="(row, rowIndex) in keyboardLayout" :key="rowIndex" class="flex justify-center gap-1">
            <button
                v-for="key in row"
                :key="key.value"
                :class="[
                    'p-2 border rounded text-center',
                    isHighlighted(key.value) ? 'bg-green-500 text-white' : 'bg-gray-200',
                    key.width ? `w-${key.width}` : 'w-10'
                ]"
                :style="{ minWidth: key.width ? `${key.width}px` : '40px' }"
            >
                {{ key.display }}
            </button>
        </div>
    </div>
</template>

<script lang="ts" setup>
import { computed } from 'vue';

const props = defineProps<{
    language: string;
    typed: string;
    text: string;
}>();

const keyboardLayouts = {
    en: [
        [
            { value: '`', display: '`' }, { value: '1', display: '1' }, { value: '2', display: '2' }, { value: '3', display: '3' },
            { value: '4', display: '4' }, { value: '5', display: '5' }, { value: '6', display: '6' }, { value: '7', display: '7' },
            { value: '8', display: '8' }, { value: '9', display: '9' }, { value: '0', display: '0' }, { value: '-', display: '-' },
            { value: '=', display: '=' }, { value: 'backspace', display: 'Backspace', width: 80 }
        ],
        [
            { value: 'tab', display: 'Tab', width: 60 }, { value: 'q', display: 'q' }, { value: 'w', display: 'w' },
            { value: 'e', display: 'e' }, { value: 'r', display: 'r' }, { value: 't', display: 't' }, { value: 'y', display: 'y' },
            { value: 'u', display: 'u' }, { value: 'i', display: 'i' }, { value: 'o', display: 'o' }, { value: 'p', display: 'p' },
            { value: '[', display: '[' }, { value: ']', display: ']' }, { value: '\\', display: '\\' }
        ],
        [
            { value: 'capslock', display: 'Caps', width: 70 }, { value: 'a', display: 'a' }, { value: 's', display: 's' },
            { value: 'd', display: 'd' }, { value: 'f', display: 'f' }, { value: 'g', display: 'g' }, { value: 'h', display: 'h' },
            { value: 'j', display: 'j' }, { value: 'k', display: 'k' }, { value: 'l', display: 'l' }, { value: ';', display: ';' },
            { value: '\'', display: '\'' }, { value: 'enter', display: 'Enter', width: 80 }
        ],
        [
            { value: 'shift', display: 'Shift', width: 90 }, { value: 'z', display: 'z' }, { value: 'x', display: 'x' },
            { value: 'c', display: 'c' }, { value: 'v', display: 'v' }, { value: 'b', display: 'b' }, { value: 'n', display: 'n' },
            { value: 'm', display: 'm' }, { value: ',', display: ',' }, { value: '.', display: '.' }, { value: '/', display: '/' },
            { value: 'shift', display: 'Shift', width: 90 }
        ],
        [
            { value: 'ctrl', display: 'Ctrl', width: 60 }, { value: 'alt', display: 'Alt', width: 60 },
            { value: ' ', display: 'Space', width: 200 }, { value: 'alt', display: 'Alt', width: 60 },
            { value: 'ctrl', display: 'Ctrl', width: 60 }
        ]
    ],
    ru: [
        [
            { value: 'ё', display: 'ё' }, { value: '1', display: '1' }, { value: '2', display: '2' }, { value: '3', display: '3' },
            { value: '4', display: '4' }, { value: '5', display: '5' }, { value: '6', display: '6' }, { value: '7', display: '7' },
            { value: '8', display: '8' }, { value: '9', display: '9' }, { value: '0', display: '0' }, { value: '-', display: '-' },
            { value: '=', display: '=' }, { value: 'backspace', display: 'Backspace', width: 80 }
        ],
        [
            { value: 'tab', display: 'Tab', width: 60 }, { value: 'й', display: 'й' }, { value: 'ц', display: 'ц' },
            { value: 'у', display: 'у' }, { value: 'к', display: 'к' }, { value: 'е', display: 'е' }, { value: 'н', display: 'н' },
            { value: 'г', display: 'г' }, { value: 'ш', display: 'ш' }, { value: 'щ', display: 'щ' }, { value: 'з', display: 'з' },
            { value: 'х', display: 'х' }, { value: 'ъ', display: 'ъ' }
        ],
        [
            { value: 'capslock', display: 'Caps', width: 70 }, { value: 'ф', display: 'ф' }, { value: 'ы', display: 'ы' },
            { value: 'в', display: 'в' }, { value: 'а', display: 'а' }, { value: 'п', display: 'п' }, { value: 'р', display: 'р' },
            { value: 'о', display: 'о' }, { value: 'л', display: 'л' }, { value: 'д', display: 'д' }, { value: 'ж', display: 'ж' },
            { value: 'э', display: 'э' }, { value: 'enter', display: 'Enter', width: 80 }
        ],
        [
            { value: 'shift', display: 'Shift', width: 90 }, { value: 'я', display: 'я' }, { value: 'ч', display: 'ч' },
            { value: 'с', display: 'с' }, { value: 'м', display: 'м' }, { value: 'и', display: 'и' }, { value: 'т', display: 'т' },
            { value: 'ь', display: 'ь' }, { value: 'б', display: 'б' }, { value: 'ю', display: 'ю' }, { value: '.', display: '.' },
            { value: 'shift', display: 'Shift', width: 90 }
        ],
        [
            { value: 'ctrl', display: 'Ctrl', width: 60 }, { value: 'alt', display: 'Alt', width: 60 },
            { value: ' ', display: 'Space', width: 200 }, { value: 'alt', display: 'Alt', width: 60 },
            { value: 'ctrl', display: 'Ctrl', width: 60 }
        ]
    ]
};

const keyboardLayout = computed(() => keyboardLayouts[props.language] || keyboardLayouts.en);

const nextChar = computed(() => {
    return props.typed.length < props.text.length ? props.text[props.typed.length] : '';
});

const isHighlighted = (keyValue: string) => {
    if (keyValue === ' ') return nextChar.value === ' ';
    if (keyValue === 'enter') return nextChar.value === '\n';
    if (keyValue === 'shift') {
        return nextChar.value.match(/[A-ZА-Я~!@#$%^&*()_+{}|:"<>?]/);
    }
    if (['ctrl', 'alt', 'capslock'].includes(keyValue)) {
        return nextChar.value.match(/[\x00-\x1F\x7F]/);
    }
    return nextChar.value.toLowerCase() === keyValue.toLowerCase();
};
</script>
Show in sidebar
html

Копировать
<template>
    <div class="min-h-screen bg-gray-100 p-8">
        <div class="max-w-4xl mx-auto bg-white p-6 rounded shadow-md">
            <h2 class="text-2xl font-bold mb-4">Lesson {{ lesson.number }} ({{ language }})</h2>
            <p><strong>New Characters:</strong> {{ lesson.new_chars }}</p>
            <p><strong>Time:</strong> {{ time }}s</p>
            <p><strong>Speed:</strong> {{ speed }} WPM</p>
            <p><strong>Errors:</strong> {{ errors }}</p>
            <div class="mt-4">
                <div class="text-lg font-mono">
                    <span v-for="(char, index) in text" :key="index" :class="{ 'error-char': typed[index] && typed[index] !== char }">
                        {{ char }}
                    </span>
                </div>
                <input
                    v-model="typed"
                    @input="handleInput"
                    class="w-full p-2 border rounded mt-4"
                    CICref="input"
                    autofocus
                    :disabled="isLessonCompleted"
                />
                <VirtualKeyboard :language="language" :typed="typed" :text="text" />
            </div>
            <div v-if="isLessonCompleted" class="mt-4 text-green-600 font-bold">
                Lesson Completed!
            </div>
            <router-link
                v-if="nextLesson && isLessonCompleted"
                :to="`/lesson/${language}/${nextLesson.number}`"
                @click="resetAndLoadNext"
                class="mt-4 inline-block bg-blue-500 text-white p-2 rounded"
            >
                Next Lesson
            </router-link>
            <router-link
                v-else-if="isLessonCompleted"
                :to="`/test/${language}`"
                class="mt-4 inline-block bg-green-500 text-white p-2 rounded"
            >
                Take Final Test
            </router-link>
        </div>
    </div>
</template>

<script lang="ts" setup>
import { ref, computed, onMounted } from 'vue';
import { useRoute } from 'vue-router';
import axios from 'axios';
import VirtualKeyboard from './VirtualKeyboard.vue';

const route = useRoute();
const language = route.params.language as string;
const lessonNumber = ref(parseInt(route.params.number as string));
const lesson = ref<{ id: number; number: number; new_chars: string }>({ id: 0, number: lessonNumber.value, new_chars: '' });
const text = ref('');
const typed = ref('');
const startTime = ref(0);
const time = ref(0);
const errors = ref(0);
const speed = ref(0);
const input = ref<HTMLInputElement | null>(null);
const lessons = ref<any[]>([]);
const isLessonCompleted = ref(false);

const nextLesson = computed(() => lessons.value.find(l => l.number === lessonNumber.value + 1));

const resetState = () => {
    text.value = '';
    typed.value = '';
    startTime.value = 0;
    time.value = 0;
    errors.value = 0;
    speed.value = 0;
    isLessonCompleted.value = false;
};

const fetchLesson = async () => {
    const [lessonsRes, textRes] = await Promise.all([
        axios.get(`/lessons/${language}`),
        axios.get(`/lessons/${language}/${lessonNumber.value}/text`),
    ]);

    lessons.value = lessonsRes.data;
    lesson.value = lessonsRes.data.find((l: any) => l.number === lessonNumber.value);
    text.value = textRes.data.text;
};

const handleInput = async () => {
    if (!startTime.value) {
        startTime.value = Date.now();
    }

    const typedChars = typed.value.split('');
    let errorCount = 0;
    for (let i = 0; i < typedChars.length; i++) {
        if (typedChars[i] !== text.value[i]) {
            errorCount++;
        }
    }
    errors.value = errorCount;

    time.value = Math.round((Date.now() - startTime.value) / 1000);
    const words = typed.value.length / 5;
    speed.value = time.value > 0 ? Math.round((words / time.value) * 60) : 0;

    if (typed.value.length === text.value.length) {
        isLessonCompleted.value = true;
        await axios.post('/lessons/progress', {
            lesson_id: lesson.value.id,
            time_seconds: time.value,
            speed_wpm: speed.value,
            errors: errors.value,
        });
    }
};

const resetAndLoadNext = async () => {
    if (!isLessonCompleted.value) return;
    lessonNumber.value++;
    resetState();
    await fetchLesson();
    if (input.value) {
        input.value.focus();
    }
};

onMounted(async () => {
    resetState();
    await fetchLesson();
    if (input.value) {
        input.value.focus();
    }
});
</script>
Show in sidebar
html

Копировать
<template>
    <div class="min-h-screen bg-gray-100 p-8">
        <div class="max-w-4xl mx-auto bg-white p-6 rounded shadow-md">
            <h2 class="text-2xl font-bold mb-4">Final Typing Test ({{ language }})</h2>
            <div class="mb-4">
                <label class="block text-gray-700">Genre (optional)</label>
                <select v-model="genre" class="p-2 border rounded">
                    <option value="">None</option>
                    <option value="fiction">Fiction</option>
                    <option value="non-fiction">Non-fiction</option>
                    <option value="poetry">Poetry</option>
                </select>
            </div>
            <div class="mb-4">
                <label class="block text-gray-700">Upload Text (optional)</label>
                <input type="file" accept=".txt" @change="uploadFile" class="p-2 border rounded" />
            </div>
            <button @click="fetchText" class="bg-blue-500 text-white p-2 rounded mb-4">Start Test</button>
            <p><strong>Time:</strong> {{ time }}s</p>
            <p><strong>Speed:</strong> {{ speed }} WPM</p>
            <p><strong>Errors:</strong> {{ errors }}</p>
            <div v-if="text" class="mt-4">
                <div class="text-lg font-mono">
                    <span v-for="(char, index) in text" :key="index" :class="{ 'error-char': typed[index] && typed[index] !== char }">
                        {{ char }}
                    </span>
                </div>
                <input v-model="typed" @input="handleInput" class="w-full p-2 border rounded mt-4" ref="input" :disabled="isTestCompleted" autofocus />
                <VirtualKeyboard :language="language" :typed="typed" :text="text" />
                <p v-if="isTestCompleted" class="text-green-500 font-bold mt-2">Test completed!</p>
                <router-link v-if="isTestCompleted" to="/" class="bg-blue-500 text-white p-2 rounded mt-2 inline-block">Back to Home</router-link>
            </div>
        </div>
    </div>
</template>

<script lang="ts" setup>
import { ref, onMounted } from 'vue';
import { useRoute } from 'vue-router';
import axios from 'axios';
import VirtualKeyboard from './VirtualKeyboard.vue';

const route = useRoute();
const language = ref(route.params.language as string);
const genre = ref('');
const text = ref('');
const typed = ref('');
const startTime = ref(0);
const time = ref(0);
const errors = ref(0);
const speed = ref(0);
const input = ref<HTMLInputElement | null>(null);
const isTestCompleted = ref(false);

const fetchText = async () => {
    const response = await axios.get('/test/text', { params: { language: language.value, genre: genre.value } });
    text.value = response.data.text;
    typed.value = '';
    startTime.value = 0;
    time.value = 0;
    errors.value = 0;
    speed.value = 0;
    isTestCompleted.value = false;
};

const uploadFile = async (event: Event) => {
    const file = (event.target as HTMLInputElement).files?.[0];
    if (file) {
        const formData = new FormData();
        formData.append('file', file);
        formData.append('language', language.value);
        await axios.post('/test/upload', formData);
        fetchText();
    }
};

const handleInput = async () => {
    if (!startTime.value) {
        startTime.value = Date.now();
    }

    const typedChars = typed.value.split('');
    let errorCount = 0;
    for (let i = 0; i < typedChars.length; i++) {
        if (typedChars[i] !== text.value[i]) {
            errorCount++;
        }
    }
    errors.value = errorCount;

    time.value = Math.round((Date.now() - startTime.value) / 1000);
    const words = typed.value.length / 5;
    speed.value = time.value > 0 ? Math.round((words / time.value) * 60) : 0;

    if (typed.value.length === text.value.length) {
        await axios.post('/test/result', {
            language: language.value,
            speed_wpm: speed.value,
            errors: errors.value,
        });
        isTestCompleted.value = true;
    }
};

onMounted(() => {
    if (input.value) {
        input.value.focus();
    }
});
</script>
Show in sidebar






В resources/js/components/VirtualKeyboard.vue ошибка:const keyboardLayout = computed(() => keyboardLayouts[props.language] || keyboardLayouts.en);Vue: Element implicitly has an any type because expression of type string can't be used to index type. Нужно ее исправить с минимальными изменениями. Выведи обновленный код компонента виртуальной клавиатуры.




html

Копировать
<template>
    <div class="keyboard flex flex-col gap-2 p-4">
        <div v-for="(row, rowIndex) in keyboardLayout" :key="rowIndex" class="flex justify-center gap-1">
            <button
                v-for="key in row"
                :key="key.value"
                :class="[
                    'p-2 border rounded text-center',
                    isHighlighted(key.value) ? 'bg-green-500 text-white' : 'bg-gray-200',
                    key.width ? `w-${key.width}` : 'w-10'
                ]"
                :style="{ minWidth: key.width ? `${key.width}px` : '40px' }"
            >
                {{ key.display }}
            </button>
        </div>
    </div>
</template>

<script lang="ts" setup>
import { computed } from 'vue';

const props = defineProps<{
    language: 'en' | 'ru';
    typed: string;
    text: string;
}>();

const keyboardLayouts: Record<'en' | 'ru', { value: string; display: string; width?: number }[][]> = {
    en: [
        [
            { value: '`', display: '`' }, { value: '1', display: '1' }, { value: '2', display: '2' }, { value: '3', display: '3' },
            { value: '4', display: '4' }, { value: '5', display: '5' }, { value: '6', display: '6' }, { value: '7', display: '7' },
            { value: '8', display: '8' }, { value: '9', display: '9' }, { value: '0', display: '0' }, { value: '-', display: '-' },
            { value: '=', display: '=' }, { value: 'backspace', display: 'Backspace', width: 80 }
        ],
        [
            { value: 'tab', display: 'Tab', width: 60 }, { value: 'q', display: 'q' }, { value: 'w', display: 'w' },
            { value: 'e', display: 'e' }, { value: 'r', display: 'r' }, { value: 't', display: 't' }, { value: 'y', display: 'y' },
            { value: 'u', display: 'u' }, { value: 'i', display: 'i' }, { value: 'o', display: 'o' }, { value: 'p', display: 'p' },
            { value: '[', display: '[' }, { value: ']', display: ']' }, { value: '\\', display: '\\' }
        ],
        [
            { value: 'capslock', display: 'Caps', width: 70 }, { value: 'a', display: 'a' }, { value: 's', display: 's' },
            { value: 'd', display: 'd' }, { value: 'f', display: 'f' }, { value: 'g', display: 'g' }, { value: 'h', display: 'h' },
            { value: 'j', display: 'j' }, { value: 'k', display: 'k' }, { value: 'l', display: 'l' }, { value: ';', display: ';' },
            { value: '\'', display: '\'' }, { value: 'enter', display: 'Enter', width: 80 }
        ],
        [
            { value: 'shift', display: 'Shift', width: 90 }, { value: 'z', display: 'z' }, { value: 'x', display: 'x' },
            { value: 'c', display: 'c' }, { value: 'v', display: 'v' }, { value: 'b', display: 'b' }, { value: 'n', display: 'n' },
            { value: 'm', display: 'm' }, { value: ',', display: ',' }, { value: '.', display: '.' }, { value: '/', display: '/' },
            { value: 'shift', display: 'Shift', width: 90 }
        ],
        [
            { value: 'ctrl', display: 'Ctrl', width: 60 }, { value: 'alt', display: 'Alt', width: 60 },
            { value: ' ', display: 'Space', width: 200 }, { value: 'alt', display: 'Alt', width: 60 },
            { value: 'ctrl', display: 'Ctrl', width: 60 }
        ]
    ],
    ru: [
        [
            { value: 'ё', display: 'ё' }, { value: '1', display: '1' }, { value: '2', display: '2' }, { value: '3', display: '3' },
            { value: '4', display: '4' }, { value: '5', display: '5' }, { value: '6', display: '6' }, { value: '7', display: '7' },
            { value: '8', display: '8' }, { value: '9', display: '9' }, { value: '0', display: '0' }, { value: '-', display: '-' },
            { value: '=', display: '=' }, { value: 'backspace', display: 'Backspace', width: 80 }
        ],
        [
            { value: 'tab', display: 'Tab', width: 60 }, { value: 'й', display: 'й' }, { value: 'ц', display: 'ц' },
            { value: 'у', display: 'у' }, { value: 'к', display: 'к' }, { value: 'е', display: 'е' }, { value: 'н', display: 'н' },
            { value: 'г', display: 'г' }, { value: 'ш', display: 'ш' }, { value: 'щ', display: 'щ' }, { value: 'з', display: 'з' },
            { value: 'х', display: 'х' }, { value: 'ъ', display: 'ъ' }
        ],
        [
            { value: 'capslock', display: 'Caps', width: 70 }, { value: 'ф', display: 'ф' }, { value: 'ы', display: 'ы' },
            { value: 'в', display: 'в' }, { value: 'а', display: 'а' }, { value: 'п', display: 'п' }, { value: 'р', display: 'р' },
            { value: 'о', display: 'о' }, { value: 'л', display: 'л' }, { value: 'д', display: 'д' }, { value: 'ж', display: 'ж' },
            { value: 'э', display: 'э' }, { value: 'enter', display: 'Enter', width: 80 }
        ],
        [
            { value: 'shift', display: 'Shift', width: 90 }, { value: 'я', display: 'я' }, { value: 'ч', display: 'ч' },
            { value: 'с', display: 'с' }, { value: 'м', display: 'м' }, { value: 'и', display: 'и' }, { value: 'т', display: 'т' },
            { value: 'ь', display: 'ь' }, { value: 'б', display: 'б' }, { value: 'ю', display: 'ю' }, { value: '.', display: '.' },
            { value: 'shift', display: 'Shift', width: 90 }
        ],
        [
            { value: 'ctrl', display: 'Ctrl', width: 60 }, { value: 'alt', display: 'Alt', width: 60 },
            { value: ' ', display: 'Space', width: 200 }, { value: 'alt', display: 'Alt', width: 60 },
            { value: 'ctrl', display: 'Ctrl', width: 60 }
        ]
    ]
};

const keyboardLayout = computed(() => keyboardLayouts[props.language]);

const nextChar = computed(() => {
    return props.typed.length < props.text.length ? props.text[props.typed.length] : '';
});

const isHighlighted = (keyValue: string) => {
    if (keyValue === ' ') return nextChar.value === ' ';
    if (keyValue === 'enter') return nextChar.value === '\n';
    if (keyValue === 'shift') {
        return nextChar.value.match(/[A-ZА-Я~!@#$%^&*()_+{}|:"<>?]/);
    }
    if (['ctrl', 'alt', 'capslock'].includes(keyValue)) {
        return nextChar.value.match(/[\x00-\x1F\x7F]/);
    }
    return nextChar.value.toLowerCase() === keyValue.toLowerCase();
};
</script>
Show in sidebar






В resources/js/components/Lesson.vue ошибка:<VirtualKeyboard :language="language" :typed="typed" :text="text" />Vue: Type string is not assignable to type "en" | "ru. Нужно ее исправить с минимальными изменениями кода. Выведи обновленный код компонента урока.




html

Копировать
<template>
    <div class="min-h-screen bg-gray-100 p-8">
        <div class="max-w-4xl mx-auto bg-white p-6 rounded shadow-md">
            <h2 class="text-2xl font-bold mb-4">Lesson {{ lesson.number }} ({{ language }})</h2>
            <p><strong>New Characters:</strong> {{ lesson.new_chars }}</p>
            <p><strong>Time:</strong> {{ time }}s</p>
            <p><strong>Speed:</strong> {{ speed }} WPM</p>
            <p><strong>Errors:</strong> {{ errors }}</p>
            <div class="mt-4">
                <div class="text-lg font-mono">
                    <span v-for="(char, index) in text" :key="index" :class="{ 'error-char': typed[index] && typed[index] !== char }">
                        {{ char }}
                    </span>
                </div>
                <input
                    v-model="typed"
                    @input="handleInput"
                    class="w-full p-2 border rounded mt-4"
                    ref="input"
                    autofocus
                    :disabled="isLessonCompleted"
                />
                <VirtualKeyboard :language="language as 'en' | 'ru'" :typed="typed" :text="text" />
            </div>
            <div v-if="isLessonCompleted" class="mt-4 text-green-600 font-bold">
                Lesson Completed!
            </div>
            <router-link
                v-if="nextLesson && isLessonCompleted"
                :to="`/lesson/${language}/${nextLesson.number}`"
                @click="resetAndLoadNext"
                class="mt-4 inline-block bg-blue-500 text-white p-2 rounded"
            >
                Next Lesson
            </router-link>
            <router-link
                v-else-if="isLessonCompleted"
                :to="`/test/${language}`"
                class="mt-4 inline-block bg-green-500 text-white p-2 rounded"
            >
                Take Final Test
            </router-link>
        </div>
    </div>
</template>

<script lang="ts" setup>
import { ref, computed, onMounted } from 'vue';
import { useRoute } from 'vue-router';
import axios from 'axios';
import VirtualKeyboard from './VirtualKeyboard.vue';

const route = useRoute();
const language = route.params.language as string;
const lessonNumber = ref(parseInt(route.params.number as string));
const lesson = ref<{ id: number; number: number; new_chars: string }>({ id: 0, number: lessonNumber.value, new_chars: '' });
const text = ref('');
const typed = ref('');
const startTime = ref(0);
const time = ref(0);
const errors = ref(0);
const speed = ref(0);
const input = ref<HTMLInputElement | null>(null);
const lessons = ref<any[]>([]);
const isLessonCompleted = ref(false);

const nextLesson = computed(() => lessons.value.find(l => l.number === lessonNumber.value + 1));

const resetState = () => {
    text.value = '';
    typed.value = '';
    startTime.value = 0;
    time.value = 0;
    errors.value = 0;
    speed.value = 0;
    isLessonCompleted.value = false;
};

const fetchLesson = async () => {
    const [lessonsRes, textRes] = await Promise.all([
        axios.get(`/lessons/${language}`),
        axios.get(`/lessons/${language}/${lessonNumber.value}/text`),
    ]);

    lessons.value = lessonsRes.data;
    lesson.value = lessonsRes.data.find((l: any) => l.number === lessonNumber.value);
    text.value = textRes.data.text;
};

const handleInput = async () => {
    if (!startTime.value) {
        startTime.value = Date.now();
    }

    const typedChars = typed.value.split('');
    let errorCount = 0;
    for (let i = 0; i < typedChars.length; i++) {
        if (typedChars[i] !== text.value[i]) {
            errorCount++;
        }
    }
    errors.value = errorCount;

    time.value = Math.round((Date.now() - startTime.value) / 1000);
    const words = typed.value.length / 5;
    speed.value = time.value > 0 ? Math.round((words / time.value) * 60) : 0;

    if (typed.value.length === text.value.length) {
        isLessonCompleted.value = true;
        await axios.post('/lessons/progress', {
            lesson_id: lesson.value.id,
            time_seconds: time.value,
            speed_wpm: speed.value,
            errors: errors.value,
        });
    }
};

const resetAndLoadNext = async () => {
    if (!isLessonCompleted.value) return;
    lessonNumber.value++;
    resetState();
    await fetchLesson();
    if (input.value) {
        input.value.focus();
    }
};

onMounted(async () => {
    resetState();
    await fetchLesson();
    if (input.value) {
        input.value.focus();
    }
});
</script>
Show in sidebar






В resources/js/components/FinalTest.vue ошибка:<VirtualKeyboard :language="language" :typed="typed" :text="text" />Vue: Type string is not assignable to type "en" | "ru". Нужно ее исправить с минимальными изменениями кода. Выведи обновленный код финального теста.




html

Копировать
<template>
    <div class="min-h-screen bg-gray-100 p-8">
        <div class="max-w-4xl mx-auto bg-white p-6 rounded shadow-md">
            <h2 class="text-2xl font-bold mb-4">Final Typing Test ({{ language }})</h2>
            <div class="mb-4">
                <label class="block text-gray-700">Genre (optional)</label>
                <select v-model="genre" class="p-2 border rounded">
                    <option value="">None</option>
                    <option value="fiction">Fiction</option>
                    <option value="non-fiction">Non-fiction</option>
                    <option value="poetry">Poetry</option>
                </select>
            </div>
            <div class="mb-4">
                <label class="block text-gray-700">Upload Text (optional)</label>
                <input type="file" accept=".txt" @change="uploadFile" class="p-2 border rounded" />
            </div>
            <button @click="fetchText" class="bg-blue-500 text-white p-2 rounded mb-4">Start Test</button>
            <p><strong>Time:</strong> {{ time }}s</p>
            <p><strong>Speed:</strong> {{ speed }} WPM</p>
            <p><strong>Errors:</strong> {{ errors }}</p>
            <div v-if="text" class="mt-4">
                <div class="text-lg font-mono">
                    <span v-for="(char, index) in text" :key="index" :class="{ 'error-char': typed[index] && typed[index] !== char }">
                        {{ char }}
                    </span>
                </div>
                <input v-model="typed" @input="handleInput" class="w-full p-2 border rounded mt-4" ref="input" :disabled="isTestCompleted" autofocus />
                <VirtualKeyboard :language="language as 'en' | 'ru'" :typed="typed" :text="text" />
                <p v-if="isTestCompleted" class="text-green-500 font-bold mt-2">Test completed!</p>
                <router-link v-if="isTestCompleted" to="/" class="bg-blue-500 text-white p-2 rounded mt-2 inline-block">Back to Home</router-link>
            </div>
        </div>
    </div>
</template>

<script lang="ts" setup>
import { ref, onMounted } from 'vue';
import { useRoute } from 'vue-router';
import axios from 'axios';
import VirtualKeyboard from './VirtualKeyboard.vue';

const route = useRoute();
const language = ref(route.params.language as string);
const genre = ref('');
const text = ref('');
const typed = ref('');
const startTime = ref(0);
const time = ref(0);
const errors = ref(0);
const speed = ref(0);
const input = ref<HTMLInputElement | null>(null);
const isTestCompleted = ref(false);

const fetchText = async () => {
    const response = await axios.get('/test/text', { params: { language: language.value, genre: genre.value } });
    text.value = response.data.text;
    typed.value = '';
    startTime.value = 0;
    time.value = 0;
    errors.value = 0;
    speed.value = 0;
    isTestCompleted.value = false;
};

const uploadFile = async (event: Event) => {
    const file = (event.target as HTMLInputElement).files?.[0];
    if (file) {
        const formData = new FormData();
        formData.append('file', file);
        formData.append('language', language.value);
        await axios.post('/test/upload', formData);
        fetchText();
    }
};

const handleInput = async () => {
    if (!startTime.value) {
        startTime.value = Date.now();
    }

    const typedChars = typed.value.split('');
    let errorCount = 0;
    for (let i = 0; i < typedChars.length; i++) {
        if (typedChars[i] !== text.value[i]) {
            errorCount++;
        }
    }
    errors.value = errorCount;

    time.value = Math.round((Date.now() - startTime.value) / 1000);
    const words = typed.value.length / 5;
    speed.value = time.value > 0 ? Math.round((words / time.value) * 60) : 0;

    if (typed.value.length === text.value.length) {
        await axios.post('/test/result', {
            language: language.value,
            speed_wpm: speed.value,
            errors: errors.value,
        });
        isTestCompleted.value = true;
    }
};

onMounted(() => {
    if (input.value) {
        input.value.focus();
    }
});
</script>
Show in sidebar






При вводе заглавных букв и специальных символов должен должна подсвечиваться только противоположная клавиша на виртуальной клавиатуре. Например - при вводе заглавной Q подсвечивается правый shift, а при вводе скобки ) подсвечивается левый shift, и т.д. Посмотри информацию про то как делится клавиатура на  правую и левую зоны для правой и левой руки соответственно. При вводе символа из левой зоны должен подсвечиваться модификатор из правой зоны, и наоборот. Выведи измененный код компонента виртуальной клавиатуры.




html

Копировать
<template>
    <div class="keyboard flex flex-col gap-2 p-4">
        <div v-for="(row, rowIndex) in keyboardLayout" :key="rowIndex" class="flex justify-center gap-1">
            <button
                v-for="key in row"
                :key="key.value"
                :class="[
                    'p-2 border rounded text-center',
                    isHighlighted(key.value, key.zone) ? 'bg-green-500 text-white' : 'bg-gray-200',
                    key.width ? `w-${key.width}` : 'w-10'
                ]"
                :style="{ minWidth: key.width ? `${key.width}px` : '40px' }"
            >
                {{ key.display }}
            </button>
        </div>
    </div>
</template>

<script lang="ts" setup>
import { computed } from 'vue';

const props = defineProps<{
    language: 'en' | 'ru';
    typed: string;
    text: string;
}>();

const keyboardLayouts: Record<'en' | 'ru', { value: string; display: string; width?: number; zone?: 'left' | 'right' }[][]> = {
    en: [
        [
            { value: '`', display: '`', zone: 'left' }, { value: '1', display: '1', zone: 'left' }, { value: '2', display: '2', zone: 'left' },
            { value: '3', display: '3', zone: 'left' }, { value: '4', display: '4', zone: 'left' }, { value: '5', display: '5', zone: 'left' },
            { value: '6', display: '6', zone: 'right' }, { value: '7', display: '7', zone: 'right' }, { value: '8', display: '8', zone: 'right' },
            { value: '9', display: '9', zone: 'right' }, { value: '0', display: '0', zone: 'right' }, { value: '-', display: '-', zone: 'right' },
            { value: '=', display: '=', zone: 'right' }, { value: 'backspace', display: 'Backspace', width: 80, zone: 'right' }
        ],
        [
            { value: 'tab', display: 'Tab', width: 60, zone: 'left' }, { value: 'q', display: 'q', zone: 'left' },
            { value: 'w', display: 'w', zone: 'left' }, { value: 'e', display: 'e', zone: 'left' }, { value: 'r', display: 'r', zone: 'left' },
            { value: 't', display: 't', zone: 'left' }, { value: 'y', display: 'y', zone: 'right' }, { value: 'u', display: 'u', zone: 'right' },
            { value: 'i', display: 'i', zone: 'right' }, { value: 'o', display: 'o', zone: 'right' }, { value: 'p', display: 'p', zone: 'right' },
            { value: '[', display: '[', zone: 'right' }, { value: ']', display: ']', zone: 'right' }, { value: '\\', display: '\\', zone: 'right' }
        ],
        [
            { value: 'capslock', display: 'Caps', width: 70, zone: 'left' }, { value: 'a', display: 'a', zone: 'left' },
            { value: 's', display: 's', zone: 'left' }, { value: 'd', display: 'd', zone: 'left' }, { value: 'f', display: 'f', zone: 'left' },
            { value: 'g', display: 'g', zone: 'left' }, { value: 'h', display: 'h', zone: 'right' }, { value: 'j', display: 'j', zone: 'right' },
            { value: 'k', display: 'k', zone: 'right' }, { value: 'l', display: 'l', zone: 'right' }, { value: ';', display: ';', zone: 'right' },
            { value: '\'', display: '\'', zone: 'right' }, { value: 'enter', display: 'Enter', width: 80, zone: 'right' }
        ],
        [
            { value: 'shift', display: 'Shift', width: 90, zone: 'left' }, { value: 'z', display: 'z', zone: 'left' },
            { value: 'x', display: 'x', zone: 'left' }, { value: 'c', display: 'c', zone: 'left' }, { value: 'v', display: 'v', zone: 'left' },
            { value: 'b', display: 'b', zone: 'left' }, { value: 'n', display: 'n', zone: 'right' }, { value: 'm', display: 'm', zone: 'right' },
            { value: ',', display: ',', zone: 'right' }, { value: '.', display: '.', zone: 'right' }, { value: '/', display: '/', zone: 'right' },
            { value: 'shift', display: 'Shift', width: 90, zone: 'right' }
        ],
        [
            { value: 'ctrl', display: 'Ctrl', width: 60, zone: 'left' }, { value: 'alt', display: 'Alt', width: 60, zone: 'left' },
            { value: ' ', display: 'Space', width: 200 }, { value: 'alt', display: 'Alt', width: 60, zone: 'right' },
            { value: 'ctrl', display: 'Ctrl', width: 60, zone: 'right' }
        ]
    ],
    ru: [
        [
            { value: 'ё', display: 'ё', zone: 'left' }, { value: '1', display: '1', zone: 'left' }, { value: '2', display: '2', zone: 'left' },
            { value: '3', display: '3', zone: 'left' }, { value: '4', display: '4', zone: 'left' }, { value: '5', display: '5', zone: 'left' },
            { value: '6', display: '6', zone: 'right' }, { value: '7', display: '7', zone: 'right' }, { value: '8', display: '8', zone: 'right' },
            { value: '9', display: '9', zone: 'right' }, { value: '0', display: '0', zone: 'right' }, { value: '-', display: '-', zone: 'right' },
            { value: '=', display: '=', zone: 'right' }, { value: 'backspace', display: 'Backspace', width: 80, zone: 'right' }
        ],
        [
            { value: 'tab', display: 'Tab', width: 60, zone: 'left' }, { value: 'й', display: 'й', zone: 'left' },
            { value: 'ц', display: 'ц', zone: 'left' }, { value: 'у', display: 'у', zone: 'left' }, { value: 'к', display: 'к', zone: 'left' },
            { value: 'е', display: 'е', zone: 'left' }, { value: 'н', display: 'н', zone: 'right' }, { value: 'г', display: 'г', zone: 'right' },
            { value: 'ш', display: 'ш', zone: 'right' }, { value: 'щ', display: 'щ', zone: 'right' }, { value: 'з', display: 'з', zone: 'right' },
            { value: 'х', display: 'х', zone: 'right' }, { value: 'ъ', display: 'ъ', zone: 'right' }
        ],
        [
            { value: 'capslock', display: 'Caps', width: 70, zone: 'left' }, { value: 'ф', display: 'ф', zone: 'left' },
            { value: 'ы', display: 'ы', zone: 'left' }, { value: 'в', display: 'в', zone: 'left' }, { value: 'а', display: 'а', zone: 'left' },
            { value: 'п', display: 'п', zone: 'left' }, { value: 'р', display: 'р', zone: 'right' }, { value: 'о', display: 'о', zone: 'right' },
            { value: 'л', display: 'л', zone: 'right' }, { value: 'д', display: 'д', zone: 'right' }, { value: 'ж', display: 'ж', zone: 'right' },
            { value: 'э', display: 'э', zone: 'right' }, { value: 'enter', display: 'Enter', width: 80, zone: 'right' }
        ],
        [
            { value: 'shift', display: 'Shift', width: 90, zone: 'left' }, { value: 'я', display: 'я', zone: 'left' },
            { value: 'ч', display: 'ч', zone: 'left' }, { value: 'с', display: 'с', zone: 'left' }, { value: 'м', display: 'м', zone: 'left' },
            { value: 'и', display: 'и', zone: 'left' }, { value: 'т', display: 'т', zone: 'right' }, { value: 'ь', display: 'ь', zone: 'right' },
            { value: 'б', display: 'б', zone: 'right' }, { value: 'ю', display: 'ю', zone: 'right' }, { value: '.', display: '.', zone: 'right' },
            { value: 'shift', display: 'Shift', width: 90, zone: 'right' }
        ],
        [
            { value: 'ctrl', display: 'Ctrl', width: 60, zone: 'left' }, { value: 'alt', display: 'Alt', width: 60, zone: 'left' },
            { value: ' ', display: 'Space', width: 200 }, { value: 'alt', display: 'Alt', width: 60, zone: 'right' },
            { value: 'ctrl', display: 'Ctrl', width: 60, zone: 'right' }
        ]
    ]
};

const keyboardLayout = computed(() => keyboardLayouts[props.language]);

const nextChar = computed(() => {
    return props.typed.length < props.text.length ? props.text[props.typed.length] : '';
});

const isHighlighted = (keyValue: string, zone?: 'left' | 'right') => {
    if (keyValue === ' ') return nextChar.value === ' ';
    if (keyValue === 'enter') return nextChar.value === '\n';

    const isUpperOrSpecial = nextChar.value.match(/[A-ZА-Я~!@#$%^&*()_+{}|:"<>?]/);
    const isControlChar = nextChar.value.match(/[\x00-\x1F\x7F]/);

    if (keyValue === 'shift') {
        if (!isUpperOrSpecial) return false;
        const keyZone = keyboardLayout.value.flat().find(k => k.value.toLowerCase() === nextChar.value.toLowerCase())?.zone;
        return keyZone === 'left' ? zone === 'right' : zone === 'left';
    }

    if (['ctrl', 'alt', 'capslock'].includes(keyValue)) {
        if (!isControlChar) return false;
        const keyZone = keyboardLayout.value.flat().find(k => k.value.toLowerCase() === nextChar.value.toLowerCase())?.zone;
        return keyZone === 'left' ? zone === 'right' : zone === 'left';
    }

    return nextChar.value.toLowerCase() === keyValue.toLowerCase();
};
</script>
Show in sidebar






Нужно добавить отображение всех специальных символов для каждого языка (в цифровом ряде клавиш вместе с цифрами, в левом верхнем или правом верхнем углу клавиши, как на реальных клавиатурах в зависимости от текущей раскладки языка клавиатуры), соответственно раскладке урока или теста, и подсвечивать их тоже зеленым цветом, когда пользователь должен нажать клавишу. Выведи обновленный код виртуальной клавиатуры.




html

Копировать
<template>
    <div class="keyboard flex flex-col gap-2 p-4">
        <div v-for="(row, rowIndex) in keyboardLayout" :key="rowIndex" class="flex justify-center gap-1">
            <button
                v-for="key in row"
                :key="key.value"
                :class="[
                    'p-2 border rounded text-center relative',
                    isHighlighted(key.value, key.zone) || isHighlighted(key.special, key.zone) ? 'bg-green-500 text-white' : 'bg-gray-200',
                    key.width ? `w-${key.width}` : 'w-10'
                ]"
                :style="{ minWidth: key.width ? `${key.width}px` : '40px' }"
            >
                <span class="block">{{ key.display }}</span>
                <span v-if="key.special" class="absolute text-xs" :class="key.specialPosition === 'top-left' ? 'top-0 left-1' : 'top-0 right-1'">
                    {{ key.special }}
                </span>
            </button>
        </div>
    </div>
</template>

<script lang="ts" setup>
import { computed } from 'vue';

const props = defineProps<{
    language: 'en' | 'ru';
    typed: string;
    text: string;
}>();

const keyboardLayouts: Record<'en' | 'ru', { value: string; display: string; special?: string; specialPosition?: 'top-left' | 'top-right'; width?: number; zone?: 'left' | 'right' }[][]> = {
    en: [
        [
            { value: '`', display: '`', special: '~', specialPosition: 'top-left', zone: 'left' },
            { value: '1', display: '1', special: '!', specialPosition: 'top-left', zone: 'left' },
            { value: '2', display: '2', special: '@', specialPosition: 'top-left', zone: 'left' },
            { value: '3', display: '3', special: '#', specialPosition: 'top-left', zone: 'left' },
            { value: '4', display: '4', special: '$', specialPosition: 'top-left', zone: 'left' },
            { value: '5', display: '5', special: '%', specialPosition: 'top-left',  zone: 'left' },
            { value: '6', display: '6', special: '^', specialPosition: 'top-left', zone: 'right' },
            { value: '7', display: '7', special: '&', specialPosition: 'top-left', zone: 'right' },
            { value: '8', display: '8', special: '*', specialPosition: 'top-left', zone: 'right' },
            { value: '9', display: '9', special: '(', specialPosition: 'top-left', zone: 'right' },
            { value: '0', display: '0', special: ')', specialPosition: 'top-left', zone: 'right' },
            { value: '-', display: '-', special: '_', specialPosition: 'top-left', zone: 'right' },
            { value: '=', display: '=', special: '+', specialPosition: 'top-left', zone: 'right' },
            { value: 'backspace', display: 'Backspace', width: 80, zone: 'right' }
        ],
        [
            { value: 'tab', display: 'Tab', width: 60, zone: 'left' },
            { value: 'q', display: 'q', zone: 'left' },
            { value: 'w', display: 'w', zone: 'left' },
            { value: 'e', display: 'e', zone: 'left' },
            { value: 'r', display: 'r', zone: 'left' },
            { value: 't', display: 't', zone: 'left' },
            { value: 'y', display: 'y', zone: 'right' },
            { value: 'u', display: 'u', zone: 'right' },
            { value: 'i', display: 'i', zone: 'right' },
            { value: 'o', display: 'o', zone: 'right' },
            { value: 'p', display: 'p', zone: 'right' },
            { value: '[', display: '[', special: '{', specialPosition: 'top-left', zone: 'right' },
            { value: ']', display: ']', special: '}', specialPosition: 'top-left', zone: 'right' },
            { value: '\\', display: '\\', special: '|', specialPosition: 'top-left', zone: 'right' }
        ],
        [
            { value: 'capslock', display: 'Caps', width: 70, zone: 'left' },
            { value: 'a', display: 'a', zone: 'left' },
            { value: 's', display: 's', zone: 'left' },
            { value: 'd', display: 'd', zone: 'left' },
            { value: 'f', display: 'f', zone: 'left' },
            { value: 'g', display: 'g', zone: 'left' },
            { value: 'h', display: 'h', zone: 'right' },
            { value: 'j', display: 'j', zone: 'right' },
            { value: 'k', display: 'k', zone: 'right' },
            { value: 'l', display: 'l', zone: 'right' },
            { value: ';', display: ';', special: ':', specialPosition: 'top-left', zone: 'right' },
            { value: '\'', display: '\'', special: '"', specialPosition: 'top-left', zone: 'right' },
            { value: 'enter', display: 'Enter', width: 80, zone: 'right' }
        ],
        [
            { value: 'shift', display: 'Shift', width: 90, zone: 'left' },
            { value: 'z', display: 'z', zone: 'left' },
            { value: 'x', display: 'x', zone: 'left' },
            { value: 'c', display: 'c', zone: 'left' },
            { value: 'v', display: 'v', zone: 'left' },
            { value: 'b', display: 'b', zone: 'left' },
            { value: 'n', display: 'n', zone: 'right' },
            { value: 'm', display: 'm', zone: 'right' },
            { value: ',', display: ',', special: '<', specialPosition: 'top-left', zone: 'right' },
            { value: '.', display: '.', special: '>', specialPosition: 'top-left', zone: 'right' },
            { value: '/', display: '/', special: '?', specialPosition: 'top-left', zone: 'right' },
            { value: 'shift', display: 'Shift', width: 90, zone: 'right' }
        ],
        [
            { value: 'ctrl', display: 'Ctrl', width: 60, zone: 'left' },
            { value: 'alt', display: 'Alt', width: 60, zone: 'left' },
            { value: ' ', display: 'Space', width: 200 },
            { value: 'alt', display: 'Alt', width: 60, zone: 'right' },
            { value: 'ctrl', display: 'Ctrl', width: 60, zone: 'right' }
        ]
    ],
    ru: [
        [
            { value: 'ё', display: 'ё', special: 'Ё', specialPosition: 'top-left', zone: 'left' },
            { value: '1', display: '1', special: '!', specialPosition: 'top-left', zone: 'left' },
            { value: '2', display: '2', special: '"', specialPosition: 'top-left', zone: 'left' },
            { value: '3', display: '3', special: '№', specialPosition: 'top-left', zone: 'left' },
            { value: '4', display: '4', special: ';', specialPosition: 'top-left', zone: 'left' },
            { value: '5', display: '5', special: '%', specialPosition: 'top-left', zone: 'left' },
            { value: '6', display: '6', special: ':', specialPosition: 'top-left', zone: 'right' },
            { value: '7', display: '7', special: '?', specialPosition: 'top-left', zone: 'right' },
            { value: '8', display: '8', special: '*', specialPosition: 'top-left', zone: 'right' },
            { value: '9', display: '9', special: '(', specialPosition: 'top-left', zone: 'right' },
            { value: '0', display: '0', special: ')', specialPosition: 'top-left', zone: 'right' },
            { value: '-', display: '-', special: '_', specialPosition: 'top-left', zone: 'right' },
            { value: '=', display: '=', special: '+', specialPosition: 'top-left', zone: 'right' },
            { value: 'backspace', display: 'Backspace', width: 80, zone: 'right' }
        ],
        [
            { value: 'tab', display: 'Tab', width: 60, zone: 'left' },
            { value: 'й', display: 'й', zone: 'left' },
            { value: 'ц', display: 'ц', zone: 'left' },
            { value: 'у', display: 'у', zone: 'left' },
            { value: 'к', display: 'к', zone: 'left' },
            { value: 'е', display: 'е', zone: 'left' },
            { value: 'н', display: 'н', zone: 'right' },
            { value: 'г', display: 'г', zone: 'right' },
            { value: 'ш', display: 'ш', zone: 'right' },
            { value: 'щ', display: 'щ', zone: 'right' },
            { value: 'з', display: 'з', zone: 'right' },
            { value: 'х', display: 'х', zone: 'right' },
            { value: 'ъ', display: 'ъ', zone: 'right' }
        ],
        [
            { value: 'capslock', display: 'Caps', width: 70, zone: 'left' },
            { value: 'ф', display: 'ф', zone: 'left' },
            { value: 'ы', display: 'ы', zone: 'left' },
            { value: 'в', display: 'в', zone: 'left' },
            { value: 'а', display: 'а', zone: 'left' },
            { value: 'п', display: 'п', zone: 'left' },
            { value: 'р', display: 'р', zone: 'right' },
            { value: 'о', display: 'о', zone: 'right' },
            { value: 'л', display: 'л', zone: 'right' },
            { value: 'д', display: 'д', zone: 'right' },
            { value: 'ж', display: 'ж', zone: 'right' },
            { value: 'э', display: 'э', zone: 'right' },
            { value: 'enter', display: 'Enter', width: 80, zone: 'right' }
        ],
        [
            { value: 'shift', display: 'Shift', width: 90, zone: 'left' },
            { value: 'я', display: 'я', zone: 'left' },
            { value: 'ч', display: 'ч', zone: 'left' },
            { value: 'с', display: 'с', zone: 'left' },
            { value: 'м', display: 'м', zone: 'left' },
            { value: 'и', display: 'и', zone: 'left' },
            { value: 'т', display: 'т', zone: 'right' },
            { value: 'ь', display: 'ь', zone: 'right' },
            { value: 'б', display: 'б', zone: 'right' },
            { value: 'ю', display: 'ю', zone: 'right' },
            { value: '.', display: '.', special: ',', specialPosition: 'top-left', zone: 'right' },
            { value: 'shift', display: 'Shift', width: 90, zone: 'right' }
        ],
        [
            { value: 'ctrl', display: 'Ctrl', width: 60, zone: 'left' },
            { value: 'alt', display: 'Alt', width: 60, zone: 'left' },
            { value: ' ', display: 'Space', width: 200 },
            { value: 'alt', display: 'Alt', width: 60, zone: 'right' },
            { value: 'ctrl', display: 'Ctrl', width: 60, zone: 'right' }
        ]
    ]
};

const keyboardLayout = computed(() => keyboardLayouts[props.language]);

const nextChar = computed(() => {
    return props.typed.length < props.text.length ? props.text[props.typed.length] : '';
});

const isHighlighted = (keyValue: string | undefined, zone?: 'left' | 'right') => {
    if (!keyValue) return false;
    if (keyValue === ' ') return nextChar.value === ' ';
    if (keyValue === 'enter') return nextChar.value === '\n';

    const isUpperOrSpecial = nextChar.value.match(/[A-ZА-Я~!@#$%^&*()_+{}|:"<>?]/);
    const isControlChar = nextChar.value.match(/[\x00-\x1F\x7F]/);

    if (keyValue === 'shift') {
        if (!isUpperOrSpecial) return false;
        const keyZone = keyboardLayout.value.flat().find(k =>
            k.value.toLowerCase() === nextChar.value.toLowerCase() ||
            (k.special && k.special.toLowerCase() === nextChar.value.toLowerCase())
        )?.zone;
        return keyZone === 'left' ? zone === 'right' : zone === 'left';
    }

    if (['ctrl', 'alt', 'capslock'].includes(keyValue)) {
        if (!isControlChar) return false;
        const keyZone = keyboardLayout.value.flat().find(k =>
            k.value.toLowerCase() === nextChar.value.toLowerCase() ||
            (k.special && k.special.toLowerCase() === nextChar.value.toLowerCase())
        )?.zone;
        return keyZone === 'left' ? zone === 'right' : zone === 'left';
    }

    return nextChar.value.toLowerCase() === keyValue.toLowerCase();
};
</script>
Show in sidebar






В русской раскладке не подсвечивается shift для заглавной Ё (в цифровом ряду). Проверь все остальные похожие варианты и исправь с минимальными изменениями в коде. Комментариев быть не должно. Выведи обновленный компонент виртуальной клавиатуры.




html

Копировать
<template>
    <div class="keyboard flex flex-col gap-2 p-4">
        <div v-for="(row, rowIndex) in keyboardLayout" :key="rowIndex" class="flex justify-center gap-1">
            <button
                v-for="key in row"
                :key="key.value"
                :class="[
                    'p-2 border rounded text-center relative',
                    isHighlighted(key.value, key.zone) || isHighlighted(key.special, key.zone) ? 'bg-green-500 text-white' : 'bg-gray-200',
                    key.width ? `w-${key.width}` : 'w-10'
                ]"
                :style="{ minWidth: key.width ? `${key.width}px` : '40px' }"
            >
                <span class="block">{{ key.display }}</span>
                <span v-if="key.special" class="absolute text-xs" :class="key.specialPosition === 'top-left' ? 'top-0 left-1' : 'top-0 right-1'">
                    {{ key.special }}
                </span>
            </button>
        </div>
    </div>
</template>

<script lang="ts" setup>
import { computed } from 'vue';

const props = defineProps<{
    language: 'en' | 'ru';
    typed: string;
    text: string;
}>();

const keyboardLayouts: Record<'en' | 'ru', { value: string; display: string; special?: string; specialPosition?: 'top-left' | 'top-right'; width?: number; zone?: 'left' | 'right' }[][]> = {
    en: [
        [
            { value: '`', display: '`', special: '~', specialPosition: 'top-left', zone: 'left' },
            { value: '1', display: '1', special: '!', specialPosition: 'top-left', zone: 'left' },
            { value: '2', display: '2', special: '@', specialPosition: 'top-left', zone: 'left' },
            { value: '3', display: '3', special: '#', specialPosition: 'top-left', zone: 'left' },
            { value: '4', display: '4', special: '$', specialPosition: 'top-left', zone: 'left' },
            { value: '5', display: '5', special: '%', specialPosition: 'top-left',  zone: 'left' },
            { value: '6', display: '6', special: '^', specialPosition: 'top-left', zone: 'right' },
            { value: '7', display: '7', special: '&', specialPosition: 'top-left', zone: 'right' },
            { value: '8', display: '8', special: '*', specialPosition: 'top-left', zone: 'right' },
            { value: '9', display: '9', special: '(', specialPosition: 'top-left', zone: 'right' },
            { value: '0', display: '0', special: ')', specialPosition: 'top-left', zone: 'right' },
            { value: '-', display: '-', special: '_', specialPosition: 'top-left', zone: 'right' },
            { value: '=', display: '=', special: '+', specialPosition: 'top-left', zone: 'right' },
            { value: 'backspace', display: 'Backspace', width: 80, zone: 'right' }
        ],
        [
            { value: 'tab', display: 'Tab', width: 60, zone: 'left' },
            { value: 'q', display: 'q', zone: 'left' },
            { value: 'w', display: 'w', zone: 'left' },
            { value: 'e', display: 'e', zone: 'left' },
            { value: 'r', display: 'r', zone: 'left' },
            { value: 't', display: 't', zone: 'left' },
            { value: 'y', display: 'y', zone: 'right' },
            { value: 'u', display: 'u', zone: 'right' },
            { value: 'i', display: 'i', zone: 'right' },
            { value: 'o', display: 'o', zone: 'right' },
            { value: 'p', display: 'p', zone: 'right' },
            { value: '[', display: '[', special: '{', specialPosition: 'top-left', zone: 'right' },
            { value: ']', display: ']', special: '}', specialPosition: 'top-left', zone: 'right' },
            { value: '\\', display: '\\', special: '|', specialPosition: 'top-left', zone: 'right' }
        ],
        [
            { value: 'capslock', display: 'Caps', width: 70, zone: 'left' },
            { value: 'a', display: 'a', zone: 'left' },
            { value: 's', display: 's', zone: 'left' },
            { value: 'd', display: 'd', zone: 'left' },
            { value: 'f', display: 'f', zone: 'left' },
            { value: 'g', display: 'g', zone: 'left' },
            { value: 'h', display: 'h', zone: 'right' },
            { value: 'j', display: 'j', zone: 'right' },
            { value: 'k', display: 'k', zone: 'right' },
            { value: 'l', display: 'l', zone: 'right' },
            { value: ';', display: ';', special: ':', specialPosition: 'top-left', zone: 'right' },
            { value: '\'', display: '\'', special: '"', specialPosition: 'top-left', zone: 'right' },
            { value: 'enter', display: 'Enter', width: 80, zone: 'right' }
        ],
        [
            { value: 'shift', display: 'Shift', width: 90, zone: 'left' },
            { value: 'z', display: 'z', zone: 'left' },
            { value: 'x', display: 'x', zone: 'left' },
            { value: 'c', display: 'c', zone: 'left' },
            { value: 'v', display: 'v', zone: 'left' },
            { value: 'b', display: 'b', zone: 'left' },
            { value: 'n', display: 'n', zone: 'right' },
            { value: 'm', display: 'm', zone: 'right' },
            { value: ',', display: ',', special: '<', specialPosition: 'top-left', zone: 'right' },
            { value: '.', display: '.', special: '>', specialPosition: 'top-left', zone: 'right' },
            { value: '/', display: '/', special: '?', specialPosition: 'top-left', zone: 'right' },
            { value: 'shift', display: 'Shift', width: 90, zone: 'right' }
        ],
        [
            { value: 'ctrl', display: 'Ctrl', width: 60, zone: 'left' },
            { value: 'alt', display: 'Alt', width: '60', zone: 'left' },
            { value: ' ', display: 'Space', width: 200 },
            { value: 'alt', display: 'Alt', width: 60, zone: 'right' },
            { value: 'ctrl', display: 'Ctrl', width: 60, zone: 'right' }
        ]
    ],
    ru: [
        [
            { value: 'ё', display: 'ё', special: 'Ё', specialPosition: 'top-left', zone: 'left' },
            { value: '1', display: '1', special: '!', specialPosition: 'top-left', zone: 'left' },
            { value: '2', display: '2', special: '"', specialPosition: 'top-left', zone: 'left' },
            { value: '3', display: '3', special: '№', specialPosition: 'top-left', zone: 'left' },
            { value: '4', display: '4', special: ';', specialPosition: 'top-left', zone: 'left' },
            { value: '5', display: '5', special: '%', specialPosition: 'top-left', zone: 'left' },
            { value: '6', display: '6', special: ':', specialPosition: 'top-left', zone: 'right' },
            { value: '7', display: '7', special: '?', specialPosition: 'top-left', zone: 'right' },
            { value: '8', display: '8', special: '*', specialPosition: 'top-left', zone: 'right' },
            { value: '9', display: '9', special: '(', specialPosition: 'top-left', zone: 'right' },
            { value: '0', display: '0', special: ')', specialPosition: 'top-left', zone: 'right' },
            { value: '-', display: '-', special: '_', specialPosition: 'top-left', zone: 'right' },
            { value: '=', display: '=', special: '+', specialPosition: 'top-left', zone: 'right' },
            { value: 'backspace', display: 'Backspace', width: 80, zone: 'right' }
        ],
        [
            { value: 'tab', display: 'Tab', width: 60, zone: 'left' },
            { value: 'й', display: 'й', zone: 'left' },
            { value: 'ц', display: 'ц', zone: 'left' },
            { value: 'у', display: 'у', zone: 'left' },
            { value: 'к', display: 'к', zone: 'left' },
            { value: 'е', display: 'е', zone: 'left' },
            { value: 'н', display: 'н', zone: 'right' },
            { value: 'г', display: 'г', zone: 'right' },
            { value: 'ш', display: 'ш', zone: 'right' },
            { value: 'щ', display: 'щ', zone: 'right' },
            { value: 'з', display: 'з', zone: 'right' },
            { value: 'х', display: 'х', zone: 'right' },
            { value: 'ъ', display: 'ъ', zone: 'right' }
        ],
        [
            { value: 'capslock', display: 'Caps', width: 70, zone: 'left' },
            { value: 'ф', display: 'ф', zone: 'left' },
            { value: 'ы', display: 'ы', zone: 'left' },
            { value: 'в', display: 'в', zone: 'left' },
            { value: 'а', display: 'а', zone: 'left' },
            { value: 'п', display: 'п', zone: 'left' },
            { value: 'р', display: 'р', zone: 'right' },
            { value: 'о', display: 'о', zone: 'right' },
            { value: 'л', display: 'л', zone: 'right' },
            { value: 'д', display: 'д', zone: 'right' },
            { value: 'ж', display: 'ж', zone: 'right' },
            { value: 'э', display: 'э', zone: 'right' },
            { value: 'enter', display: 'Enter', width: 80, zone: 'right' }
        ],
        [
            { value: 'shift', display: 'Shift', width: 90, zone: 'left' },
            { value: 'я', display: 'я', zone: 'left' },
            { value: 'ч', display: 'ч', zone: 'left' },
            { value: 'с', display: 'с', zone: 'left' },
            { value: 'м', display: 'м', zone: 'left' },
            { value: 'и', display: 'и', zone: 'left' },
            { value: 'т', display: 'т', zone: 'right' },
            { value: 'ь', display: 'ь', zone: 'right' },
            { value: 'б', display: 'б', zone: 'right' },
            { value: 'ю', display: 'ю', zone: 'right' },
            { value: '.', display: '.', special: ',', specialPosition: 'top-left', zone: 'right' },
            { value: 'shift', display: 'Shift', width: 90, zone: 'right' }
        ],
        [
            { value: 'ctrl', display: 'Ctrl', width: 60, zone: 'left' },
            { value: 'alt', display: 'Alt', width: 60, zone: 'left' },
            { value: ' ', display: 'Space', width: 200 },
            { value: 'alt', display: 'Alt', width: 60, zone: 'right' },
            { value: 'ctrl', display: 'Ctrl', width: 60, zone: 'right' }
        ]
    ]
};

const keyboardLayout = computed(() => keyboardLayouts[props.language]);

const nextChar = computed(() => {
    return props.typed.length < props.text.length ? props.text[props.typed.length] : '';
});

const isHighlighted = (keyValue: string | undefined, zone?: 'left' | 'right') => {
    if (!keyValue) return false;
    if (keyValue === ' ') return nextChar.value === ' ';
    if (keyValue === 'enter') return nextChar.value === '\n';

    const isUpperOrSpecial = nextChar.value.match(/[A-ZА-ЯЁ~!@#$%^&*()_+{}|:"<>?]/);
    const isControlChar = nextChar.value.match(/[\x00-\x1F\x7F]/);

    if (keyValue === 'shift') {
        if (!isUpperOrSpecial) return false;
        const keyZone = keyboardLayout.value.flat().find(k =>
            k.value === nextChar.value ||
            (k.special && k.special === nextChar.value) ||
            k.value.toLowerCase() === nextChar.value.toLowerCase() ||
            (k.special && k.special.toLowerCase() === nextChar.value.toLowerCase())
        )?.zone;
        return keyZone === 'left' ? zone === 'right' : zone === 'left';
    }

    if (['ctrl', 'alt', 'capslock'].includes(keyValue)) {
        if (!isControlChar) return false;
        const keyZone = keyboardLayout.value.flat().find(k =>
            k.value === nextChar.value ||
            (k.special && k.special === nextChar.value) ||
            k.value.toLowerCase() === nextChar.value.toLowerCase() ||
            (k.special && k.special.toLowerCase() === nextChar.value.toLowerCase())
        )?.zone;
        return keyZone === 'left' ? zone === 'right' : zone === 'left';
    }

    return nextChar.value === keyValue || nextChar.value.toLowerCase() === keyValue.toLowerCase();
};
</script>
Show in sidebar






Нужно добавить специальные символы и скобки ко всем клавишам по аналогии как сделано в цифровом ряду. Отсутствует кнопка для вертикальной черты | /\ в зависимости от раскладки клавиатуры. Посмотри про нее информацию, как она сделана на реальной клавиатуре и добавь ее в соответствующей уроку или тесту языковой раскладке, с подсветкой тоже зеленым цветом, если пользователю необходимо ее нажать. Минимальные изменения. Комментариев в коде не должно быть. Выведи обновленный компонент виртуальной клавиатуры.




html

Копировать
<template>
    <div class="keyboard flex flex-col gap-2 p-4">
        <div v-for="(row, rowIndex) in keyboardLayout" :key="rowIndex" class="flex justify-center gap-1">
            <button
                v-for="key in row"
                :key="key.value"
                :class="[
                    'p-2 border rounded text-center relative',
                    isHighlighted(key.value, key.zone) || isHighlighted(key.special, key.zone) ? 'bg-green-500 text-white' : 'bg-gray-200',
                    key.width ? `w-${key.width}` : 'w-10'
                ]"
                :style="{ minWidth: key.width ? `${key.width}px` : '40px' }"
            >
                <span class="block">{{ key.display }}</span>
                <span v-if="key.special" class="absolute text-xs" :class="key.specialPosition === 'top-left' ? 'top-0 left-1' : 'top-0 right-1'">
                    {{ key.special }}
                </span>
            </button>
        </div>
    </div>
</template>

<script lang="ts" setup>
import { computed } from 'vue';

const props = defineProps<{
    language: 'en' | 'ru';
    typed: string;
    text: string;
}>();

const keyboardLayouts: Record<'en' | 'ru', { value: string; display: string; special?: string; specialPosition?: 'top-left' | 'top-right'; width?: number; zone?: 'left' | 'right' }[][]> = {
    en: [
        [
            { value: '`', display: '`', special: '~', specialPosition: 'top-left', zone: 'left' },
            { value: '1', display: '1', special: '!', specialPosition: 'top-left', zone: 'left' },
            { value: '2', display: '2', special: '@', specialPosition: 'top-left', zone: 'left' },
            { value: '3', display: '3', special: '#', specialPosition: 'top-left', zone: 'left' },
            { value: '4', display: '4', special: '$', specialPosition: 'top-left', zone: 'left' },
            { value: '5', display: '5', special: '%', specialPosition: 'top-left', zone: 'left' },
            { value: '6', display: '6', special: '^', specialPosition: 'top-left', zone: 'right' },
            { value: '7', display: '7', special: '&', specialPosition: 'top-left', zone: 'right' },
            { value: '8', display: '8', special: '*', specialPosition: 'top-left', zone: 'right' },
            { value: '9', display: '9', special: '(', specialPosition: 'top-left', zone: 'right' },
            { value: '0', display: '0', special: ')', specialPosition: 'top-left', zone: 'right' },
            { value: '-', display: '-', special: '_', specialPosition: 'top-left', zone: 'right' },
            { value: '=', display: '=', special: '+', specialPosition: 'top-left', zone: 'right' },
            { value: 'backspace', display: 'Backspace', width: 80, zone: 'right' }
        ],
        [
            { value: 'tab', display: 'Tab', width: 60, zone: 'left' },
            { value: 'q', display: 'q', special: 'Q', specialPosition: 'top-left', zone: 'left' },
            { value: 'w', display: 'w', special: 'W', specialPosition: 'top-left', zone: 'left' },
            { value: 'e', display: 'e', special: 'E', specialPosition: 'top-left', zone: 'left' },
            { value: 'r', display: 'r', special: 'R', specialPosition: 'top-left', zone: 'left' },
            { value: 't', display: 't', special: 'T', specialPosition: 'top-left', zone: 'left' },
            { value: 'y', display: 'y', special: 'Y', specialPosition: 'top-left', zone: 'right' },
            { value: 'u', display: 'u', special: 'U', specialPosition: 'top-left', zone: 'right' },
            { value: 'i', display: 'i', special: 'I', specialPosition: 'top-left', zone: 'right' },
            { value: 'o', display: 'o', special: 'O', specialPosition: 'top-left', zone: 'right' },
            { value: 'p', display: 'p', special: 'P', specialPosition: 'top-left', zone: 'right' },
            { value: '[', display: '[', special: '{', specialPosition: 'top-left', zone: 'right' },
            { value: ']', display: ']', special: '}', specialPosition: 'top-left', zone: 'right' },
            { value: '\\', display: '\\', special: '|', specialPosition: 'top-left', zone: 'right' }
        ],
        [
            { value: 'capslock', display: 'Caps', width: 70, zone: 'left' },
            { value: 'a', display: 'a', special: 'A', specialPosition: 'top-left', zone: 'left' },
            { value: 's', display: 's', special: 'S', specialPosition: 'top-left', zone: 'left' },
            { value: 'd', display: 'd', special: 'D', specialPosition: 'top-left', zone: 'left' },
            { value: 'f', display: 'f', special: 'F', specialPosition: 'top-left', zone: 'left' },
            { value: 'g', display: 'g', special: 'G', specialPosition: 'top-left', zone: 'left' },
            { value: 'h', display: 'h', special: 'H', specialPosition: 'top-left', zone: 'right' },
            { value: 'j', display: 'j', special: 'J', specialPosition: 'top-left', zone: 'right' },
            { value: 'k', display: 'k', special: 'K', specialPosition: 'top-left', zone: 'right' },
            { value: 'l', display: 'l', special: 'L', specialPosition: 'top-left', zone: 'right' },
            { value: ';', display: ';', special: ':', specialPosition: 'top-left', zone: 'right' },
            { value: '\'', display: '\'', special: '"', specialPosition: 'top-left', zone: 'right' },
            { value: 'enter', display: 'Enter', width: 80, zone: 'right' }
        ],
        [
            { value: 'shift', display: 'Shift', width: 90, zone: 'left' },
            { value: 'z', display: 'z', special: 'Z', specialPosition: 'top-left', zone: 'left' },
            { value: 'x', display: 'x', special: 'X', specialPosition: 'top-left', zone: 'left' },
            { value: 'c', display: 'c', special: 'C', specialPosition: 'top-left', zone: 'left' },
            { value: 'v', display: 'v', special: 'V', specialPosition: 'top-left', zone: 'left' },
            { value: 'b', display: 'b', special: 'B', specialPosition: 'top-left', zone: 'left' },
            { value: 'n', display: 'n', special: 'N', specialPosition: 'top-left', zone: 'right' },
            { value: 'm', display: 'm', special: 'M', specialPosition: 'top-left', zone: 'right' },
            { value: ',', display: ',', special: '<', specialPosition: 'top-left', zone: 'right' },
            { value: '.', display: '.', special: '>', specialPosition: 'top-left', zone: 'right' },
            { value: '/', display: '/', special: '?', specialPosition: 'top-left', zone: 'right' },
            { value: 'shift', display: 'Shift', width: 90, zone: 'right' }
        ],
        [
            { value: 'ctrl', display: 'Ctrl', width: 60, zone: 'left' },
            { value: 'alt', display: 'Alt', width: 60, zone: 'left' },
            { value: ' ', display: 'Space', width: 200 },
            { value: 'alt', display: 'Alt', width: 60, zone: 'right' },
            { value: 'ctrl', display: 'Ctrl', width: 60, zone: 'right' }
        ]
    ],
    ru: [
        [
            { value: 'ё', display: 'ё', special: 'Ё', specialPosition: 'top-left', zone: 'left' },
            { value: '1', display: '1', special: '!', specialPosition: 'top-left', zone: 'left' },
            { value: '2', display: '2', special: '"', specialPosition: 'top-left', zone: 'left' },
            { value: '3', display: '3', special: '№', specialPosition: 'top-left', zone: 'left' },
            { value: '4', display: '4', special: ';', specialPosition: 'top-left', zone: 'left' },
            { value: '5', display: '5', special: '%', specialPosition: 'top-left', zone: 'left' },
            { value: '6', display: '6', special: ':', specialPosition: 'top-left', zone: 'right' },
            { value: '7', display: '7', special: '?', specialPosition: 'top-left', zone: 'right' },
            { value: '8', display: '8', special: '*', specialPosition: 'top-left', zone: 'right' },
            { value: '9', display: '9', special: '(', specialPosition: 'top-left', zone: 'right' },
            { value: '0', display: '0', special: ')', specialPosition: 'top-left', zone: 'right' },
            { value: '-', display: '-', special: '_', specialPosition: 'top-left', zone: 'right' },
            { value: '=', display: '=', special: '+', specialPosition: 'top-left', zone: 'right' },
            { value: 'backspace', display: 'Backspace', width: 80, zone: 'right' }
        ],
        [
            { value: 'tab', display: 'Tab', width: 60, zone: 'left' },
            { value: 'й', display: 'й', special: 'Й', specialPosition: 'top-left', zone: 'left' },
            { value: 'ц', display: 'ц', special: 'Ц', specialPosition: 'top-left', zone: 'left' },
            { value: 'у', display: 'у', special: 'У', specialPosition: 'top-left', zone: 'left' },
            { value: 'к', display: 'к', special: 'К', specialPosition: 'top-left', zone: 'left' },
            { value: 'е', display: 'е', special: 'Е', specialPosition: 'top-left', zone: 'left' },
            { value: 'н', display: 'н', special: 'Н', specialPosition: 'top-left', zone: 'right' },
            { value: 'г', display: 'г', special: 'Г', specialPosition: 'top-left', zone: 'right' },
            { value: 'ш', display: 'ш', special: 'Ш', specialPosition: 'top-left', zone: 'right' },
            { value: 'щ', display: 'щ', special: 'Щ', specialPosition: 'top-left', zone: 'right' },
            { value: 'з', display: 'з', special: 'З', specialPosition: 'top-left', zone: 'right' },
            { value: 'х', display: 'х', special: 'Х', specialPosition: 'top-left', zone: 'right' },
            { value: 'ъ', display: 'ъ', special: 'Ъ', specialPosition: 'top-left', zone: 'right' },
            { value: '/', display: '/', special: '|', specialPosition: 'top-left', zone: 'right' }
        ],
        [
            { value: 'capslock', display: 'Caps', width: 70, zone: 'left' },
            { value: 'ф', display: 'ф', special: 'Ф', specialPosition: 'top-left', zone: 'left' },
            { value: 'ы', display: 'ы', special: 'Ы', specialPosition: 'top-left', zone: 'left' },
            { value: 'в', display: 'в', special: 'В', specialPosition: 'top-left', zone: 'left' },
            { value: 'а', display: 'а', special: 'А', specialPosition: 'top-left', zone: 'left' },
            { value: 'п', display: 'п', special: 'П', specialPosition: 'top-left', zone: 'left' },
            { value: 'р', display: 'р', special: 'Р', specialPosition: 'top-left', zone: 'right' },
            { value: 'о', display: 'о', special: 'О', specialPosition: 'top-left', zone: 'right' },
            { value: 'л', display: 'л', special: 'Л', specialPosition: 'top-left', zone: 'right' },
            { value: 'д', display: 'д', special: 'Д', specialPosition: 'top-left', zone: 'right' },
            { value: 'ж', display: 'ж', special: 'Ж', specialPosition: 'top-left', zone: 'right' },
            { value: 'э', display: 'э', special: 'Э', specialPosition: 'top-left', zone: 'right' },
            { value: 'enter', display: 'Enter', width: 80, zone: 'right' }
        ],
        [
            { value: 'shift', display: 'Shift', width: 90, zone: 'left' },
            { value: 'я', display: 'я', special: 'Я', specialPosition: 'top-left', zone: 'left' },
            { value: 'ч', display: 'ч', special: 'Ч', specialPosition: 'top-left', zone: 'left' },
            { value: 'с', display: 'с', special: 'С', specialPosition: 'top-left', zone: 'left' },
            { value: 'м', display: 'м', special: 'М', specialPosition: 'top-left', zone: 'left' },
            { value: 'и', display: 'и', special: 'И', specialPosition: 'top-left', zone: 'left' },
            { value: 'т', display: 'т', special: 'Т', specialPosition: 'top-left', zone: 'right' },
            { value: 'ь', display: 'ь', special: 'Ь', specialPosition: 'top-left', zone: 'right' },
            { value: 'б', display: 'б', special: 'Б', specialPosition: 'top-left', zone: 'right' },
            { value: 'ю', display: 'ю', special: 'Ю', specialPosition: 'top-left', zone: 'right' },
            { value: '.', display: '.', special: ',', specialPosition: 'top-left', zone: 'right' },
            { value: 'shift', display: 'Shift', width: 90, zone: 'right' }
        ],
        [
            { value: 'ctrl', display: 'Ctrl', width: 60, zone: 'left' },
            { value: 'alt', display: 'Alt', width: 60, zone: 'left' },
            { value: ' ', display: 'Space', width: 200 },
            { value: 'alt', display: 'Alt', width: 60, zone: 'right' },
            { value: 'ctrl', display: 'Ctrl', width: 60, zone: 'right' }
        ]
    ]
};

const keyboardLayout = computed(() => keyboardLayouts[props.language]);

const nextChar = computed(() => {
    return props.typed.length < props.text.length ? props.text[props.typed.length] : '';
});

const isHighlighted = (keyValue: string | undefined, zone?: 'left' | 'right') => {
    if (!keyValue) return false;
    if (keyValue === ' ') return nextChar.value === ' ';
    if (keyValue === 'enter') return nextChar.value === '\n';

    const isUpperOrSpecial = nextChar.value.match(/[A-ZА-ЯЁ~!@#$%^&*()_+{}|:"<>?]/);
    const isControlChar = nextChar.value.match(/[\x00-\x1F\x7F]/);

    if (keyValue === 'shift') {
        if (!isUpperOrSpecial) return false;
        const keyZone = keyboardLayout.value.flat().find(k =>
            k.value === nextChar.value ||
            (k.special && k.special === nextChar.value) ||
            k.value.toLowerCase() === nextChar.value.toLowerCase() ||
            (k.special && k.special.toLowerCase() === nextChar.value.toLowerCase())
        )?.zone;
        return keyZone === 'left' ? zone === 'right' : zone === 'left';
    }

    if (['ctrl', 'alt', 'capslock'].includes(keyValue)) {
        if (!isControlChar) return false;
        const keyZone = keyboardLayout.value.flat().find(k =>
            k.value === nextChar.value ||
            (k.special && k.special === nextChar.value) ||
            k.value.toLowerCase() === nextChar.value.toLowerCase() ||
            (k.special && k.special.toLowerCase() === nextChar.value.toLowerCase())
        )?.zone;
        return keyZone === 'left' ? zone === 'right' : zone === 'left';
    }

    return nextChar.value === keyValue || nextChar.value.toLowerCase() === keyValue.toLowerCase();
};
</script>
Show in sidebar





Чем я могу помочь?


DeepSearch


Think

Grok 3

Something went wrong
