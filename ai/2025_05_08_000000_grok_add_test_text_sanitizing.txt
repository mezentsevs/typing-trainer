В веб приложении для тренировки навыка слепой печати есть финальный тест, текст для него получают с помощью сервиса:
app/Services/TestService.php
<?php

namespace App\Services;

use App\Models\TestText;
use Exception;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Storage;

class TestService
{
    public function getTestText(int $userId, string $language, ?string $genre = null): string
    {
        $filePath = "uploads/test_{$userId}_{$language}.txt";

        if (Storage::disk('public')->exists($filePath)) {
            if (Storage::disk('public')->lastModified($filePath) < now()->subMinute()->timestamp) {
                Storage::disk('public')->delete($filePath);
            } else {
                return Storage::disk('public')->get($filePath);
            }
        }

        if (config('services.grok.key') && $genre) {
            try {
                $response = Http::withHeaders([
                    'Authorization' => 'Bearer ' . config('services.grok.key'),
                ])->post('https://api.x.ai/v1/generate', [
                    'prompt' => "Generate a 500-word text in $language for typing practice in the $genre genre.",
                ]);

                if ($response->successful()) {
                    return $response->json()['text'];
                }
            } catch (Exception $e) {
                logger()->error($e->getMessage());
            }
        }

        $query = TestText::where('language', $language);

        if ($genre) {
            $query->where('genre', $genre);
        }

        $text = $query->inRandomOrder()->first();

        return $text ? $text->text : 'No text available for the selected language and genre.';
    }
}
Сейчас, в случае, когда текст берется из файла, загруженного пользователем метод возвращает текст сырым, как есть в файле. Нужно это исправить. Нужно убедиться, что кодировка текста UTF-8, а если нет - то преобразовать кодировку. Нужно добавить защиту от XSS-атак, чтобы злоумышленник не смог бы через файл внедрить свой код на страницу приложения. Нужно вырезать все теги и преобразовать специальные символы, чтобы они не смогли сломать html страницы теста. Изучи лучшие практики, используемые в PHP 8.4 и Laravel 12 для решения подобных задач. Основной код должен остаться без изменений. Минимальные изменения. Код не должен содержать комментариев. Выведи полный обновлённый код сервиса.




php

Копировать
<?php

namespace App\Services;

use App\Models\TestText;
use Exception;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Storage;

class TestService
{
    public function getTestText(int $userId, string $language, ?string $genre = null): string
    {
        $filePath = "uploads/test_{$userId}_{$language}.txt";

        if (Storage::disk('public')->exists($filePath)) {
            if (Storage::disk('public')->lastModified($filePath) < now()->subMinute()->timestamp) {
                Storage::disk('public')->delete($filePath);
            } else {
                $rawText = Storage::disk('public')->get($filePath);
                $encoding = mb_detect_encoding($rawText, ['UTF-8', 'Windows-1251', 'ISO-8859-1'], true);
                $text = $encoding !== 'UTF-8' ? mb_convert_encoding($rawText, 'UTF-8', $encoding) : $rawText;
                $text = strip_tags($text);
                return htmlspecialchars($text, ENT_QUOTES | ENT_HTML5, 'UTF-8');
            }
        }

        if (config('services.grok.key') && $genre) {
            try {
                $response = Http::withHeaders([
                    'Authorization' => 'Bearer ' . config('services.grok.key'),
                ])->post('https://api.x.ai/v1/generate', [
                    'prompt' => "Generate a 500-word text in $language for typing practice in the $genre genre.",
                ]);

                if ($response->successful()) {
                    return $response->json()['text'];
                }
            } catch (Exception $e) {
                logger()->error($e->getMessage());
            }
        }

        $query = TestText::where('language', $language);

        if ($genre) {
            $query->where('genre', $genre);
        }

        $text = $query->inRandomOrder()->first();

        return $text ? $text->text : 'No text available for the selected language and genre.';
    }
}
Показать в боковой панели







Набор кодировок ['UTF-8', 'Windows-1251', 'ISO-8859-1'] очень ограничен. Кодировка может быть любая у файла. Нужно это исправить. Нужно сделать так, чтобы определялась любая кодировка, а не только из какого-то определенного набора кодировок. Минимальные изменения. Код не должен содержать комментариев. Выведи полный обновленный код всего файла.


php

Копировать
<?php

namespace App\Services;

use App\Models\TestText;
use Exception;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Storage;

class TestService
{
    public function getTestText(int $userId, string $language, ?string $genre = null): string
    {
        $filePath = "uploads/test_{$userId}_{$language}.txt";

        if (Storage::disk('public')->exists($filePath)) {
            if (Storage::disk('public')->lastModified($filePath) < now()->subMinute()->timestamp) {
                Storage::disk('public')->delete($filePath);
            } else {
                $rawText = Storage::disk('public')->get($filePath);
                $encoding = mb_detect_encoding($rawText, mb_list_encodings(), true);
                $text = $encoding !== 'UTF-8' ? mb_convert_encoding($rawText, 'UTF-8', $encoding) : $rawText;
                $text = strip_tags($text);
                return htmlspecialchars($text, ENT_QUOTES | ENT_HTML5, 'UTF-8');
            }
        }

        if (config('services.grok.key') && $genre) {
            try {
                $response = Http::withHeaders([
                    'Authorization' => 'Bearer ' . config('services.grok.key'),
                ])->post('https://api.x.ai/v1/generate', [
                    'prompt' => "Generate a 500-word text in $language for typing practice in the $genre genre.",
                ]);

                if ($response->successful()) {
                    return $response->json()['text'];
                }
            } catch (Exception $e) {
                logger()->error($e->getMessage());
            }
        }

        $query = TestText::where('language', $language);

        if ($genre) {
            $query->where('genre', $genre);
        }

        $text = $query->inRandomOrder()->first();

        return $text ? $text->text : 'No text available for the selected language and genre.';
    }
}
Показать в боковой панели








Чем я могу помочь?


DeepSearch


Think

Grok 3
