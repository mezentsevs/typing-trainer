Нужно написать web-приложение для тренировки навыка слепой печати на английском и русском языках, c возможностью добавлять другие языки. Называться будет - Typing trainer. В приложении должны быть уроки. На каждом из уроков добавляется несколько новых символов (сначала - буквы, потом - цифры, потом - все специальные символы). Количество уроков, необходимых для освоения всех допустимых символов на клавиатуре задает пользователь. Количество новых символов, добавляемых на каждом уроке вычисляется автоматически. На каждом уроке должны быть следующие индикаторы - номер урока, добавленные новые символы, время прохождения урока, скорость печати, количество допущенных ошибок. Ошибки должны подсвечиваться красным цветом. После завершения всех уроков пользователю должен предлагаться итоговый тест скорости печати. Контент для этого теста, при наличии связи и доступного количества запросов, должен предоставлять Grok, с выбором из списка нескольких тем по литературным жанрам, а при отсутствии - контент получается из заранее созданных заготовок рандомно произвольно автоматически, или обязательно дать возможность пользователю загрузить текстовый файл. Стек - PHP 8.4, Laravel 12, авторизация Sanctum, MySQL, Rest API, TypeScript, Vue, Pinia, Axios, Tailwindcss. Код должен быть максимально полным, со всеми необходимыми импортами. Интерфейс должен быть максимально простым. Приложение должно разворачиваться в Docker контейнере с помощью Laravel Sail. Обязательно добавь тесты основных пользовательских сценариев работы с приложением на PHPUnit, и с пользовательским интерфейсом на Cypress.



Это довольно обширный запрос, требующий создания полноценного веб-приложения с бэкендом, фронтендом, тестами и контейнеризацией. Предоставлю полное решение с кодом для всех компонентов, включая структуру проекта, Docker-конфигурацию, тесты и документацию. Для компактности я сосредоточусь на ключевых файлах и логике, избегая избыточного повторения кода, но при этом обеспечу полноту для запуска приложения.

Обзор решения
Typing Trainer — это веб-приложение для тренировки слепой печати на английском и русском языках с поддержкой добавления других языков. Оно включает уроки с постепенным добавлением символов, индикаторы прогресса, подсветку ошибок и итоговый тест скорости печати. Стек технологий: PHP 8.4, Laravel 12, MySQL, Sanctum для авторизации, TypeScript, Vue 3, Pinia, Axios, Tailwind CSS. Приложение разворачивается в Docker с помощью Laravel Sail. Тесты написаны на PHPUnit (бэкенд) и Cypress (фронтенд).

Структура проекта
text

Копировать
typing-trainer/
├── app/
│   ├── Http/
│   │   ├── Controllers/
│   │   ├── Middleware/
│   │   ├── Requests/
│   ├── Models/
│   ├── Services/
├── database/
│   ├── migrations/
│   ├── seeders/
├── resources/
│   ├── js/
│   │   ├── components/
│   │   ├── stores/
│   │   ├── types/
│   ├── views/
├── routes/
├── tests/
│   ├── Feature/
│   ├── cypress/
├── docker/
├── public/
├── .env.example
├── composer.json
├── package.json
├── vite.config.ts
├── sail
├── phpunit.xml
├── cypress.config.ts
├── Dockerfile
├── docker-compose.yml
Шаг 1: Настройка окружения
1.1. Laravel Sail и Docker
Создадим проект с помощью Laravel Sail, который упрощает настройку Docker.

bash

Копировать
curl -s "https://laravel.build/typing-trainer" | bash
cd typing-trainer
./vendor/bin/sail up -d
1.2. .env
Настроим .env для подключения к MySQL и API-ключа Grok (если доступен).

env

Копировать
APP_NAME="Typing Trainer"
APP_ENV=local
APP_KEY=
APP_DEBUG=true
APP_URL=http://localhost

DB_CONNECTION=mysql
DB_HOST=mysql
DB_PORT=3306
DB_DATABASE=typing_trainer
DB_USERNAME=sail
DB_PASSWORD=password

SANCTUM_STATEFUL_DOMAINS=localhost:8080
SESSION_DOMAIN=localhost
GROK_API_KEY=your_grok_api_key_here
1.3. Dockerfile
Настроим кастомный Dockerfile для PHP 8.4.

dockerfile

Копировать
FROM php:8.4-fpm

RUN apt-get update && apt-get install -y \
    libpng-dev libjpeg-dev libfreetype6-dev \
    zip unzip git && \
    docker-php-ext-configure gd --with-freetype --with-jpeg && \
    docker-php-ext-install gd pdo pdo_mysql

RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer

WORKDIR /var/www
COPY . .
RUN composer install

EXPOSE 9000
CMD ["php-fpm"]
1.4. docker-compose.yml
Настроим сервисы для Laravel Sail.

yaml

Копировать
version: '3'
services:
  laravel.test:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:80"
    environment:
      - APP_ENV=local
    volumes:
      - .:/var/www
    depends_on:
      - mysql
  mysql:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: typing_trainer
      MYSQL_USER: sail
      MYSQL_PASSWORD: password
    ports:
      - "3306:3306"
Шаг 2: Бэкенд (Laravel)
2.1. Модели и миграции
Создадим модели User, Lesson, LessonProgress, TestResult и соответствующие миграции.

database/migrations/2025_04_14_000001_create_lessons_table.php

php

Копировать
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration {
    public function up(): void
    {
        Schema::create('lessons', function (Blueprint $table) {
            $table->id();
            $table->unsignedInteger('number');
            $table->string('language');
            $table->string('new_chars');
            $table->timestamps();
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('lessons');
    }
};
database/migrations/2025_04_14_000002_create_lesson_progresses_table.php

php

Копировать
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration {
    public function up(): void
    {
        Schema::create('lesson_progresses', function (Blueprint $table) {
            $table->id();
            $table->foreignId('user_id')->constrained()->onDelete('cascade');
            $table->foreignId('lesson_id')->constrained()->onDelete('cascade');
            $table->unsignedInteger('time_seconds');
            $table->unsignedInteger('speed_wpm');
            $table->unsignedInteger('errors');
            $table->timestamps();
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('lesson_progresses');
    }
};
database/migrations/2025_04_14_000003_create_test_results_table.php

php

Копировать
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration {
    public function up(): void
    {
        Schema::create('test_results', function (Blueprint $table) {
            $table->id();
            $table->foreignId('user_id')->constrained()->onDelete('cascade');
            $table->string('language');
            $table->unsignedInteger('speed_wpm');
            $table->unsignedInteger('errors');
            $table->timestamps();
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('test_results');
    }
};
app/Models/Lesson.php

php

Копировать
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Lesson extends Model
{
    use HasFactory;

    protected $fillable = ['number', 'language', 'new_chars'];

    public function progresses()
    {
        return $this->hasMany(LessonProgress::class);
    }
}
app/Models/LessonProgress.php

php

Копировать
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class LessonProgress extends Model
{
    use HasFactory;

    protected $fillable = ['user_id', 'lesson_id', 'time_seconds', 'speed_wpm', 'errors'];

    public function user()
    {
        return $this->belongsTo(User::class);
    }

    public function lesson()
    {
        return $this->belongsTo(Lesson::class);
    }
}
app/Models/TestResult.php

php

Копировать
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class TestResult extends Model
{
    use HasFactory;

    protected $fillable = ['user_id', 'language', 'speed_wpm', 'errors'];

    public function user()
    {
        return $this->belongsTo(User::class);
    }
}
2.2. Сервис для генерации уроков
app/Services/LessonService.php

php

Копировать
<?php

namespace App\Services;

use App\Models\Lesson;

class LessonService
{
    protected $charSets = [
        'en' => 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=[]{}|;:,.<>?',
        'ru' => 'абвгдеёжзийклмнопрстуфхцчшщъыьэюяАБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ0123456789!@#$%^&*()_+-=[]{}|;:,.<>?',
    ];

    public function generateLessons(string $language, int $lessonCount): void
    {
        $chars = str_split($this->charSets[$language] ?? $this->charSets['en']);
        $charsPerLesson = ceil(count($chars) / $lessonCount);

        Lesson::where('language', $language)->delete();

        for ($i = 0; $i < $lessonCount; $i++) {
            $start = $i * $charsPerLesson;
            $newChars = array_slice($chars, $start, $charsPerLesson);
            if ($newChars) {
                Lesson::create([
                    'number' => $i + 1,
                    'language' => $language,
                    'new_chars' => implode('', $newChars),
                ]);
            }
        }
    }

    public function generateLessonText(string $language, int $lessonNumber, int $length = 100): string
    {
        $lesson = Lesson::where('language', $language)->where('number', $lessonNumber)->firstOrFail();
        $availableChars = '';
        foreach (Lesson::where('language', $language)->where('number', '<=', $lessonNumber)->get() as $l) {
            $availableChars .= $l->new_chars;
        }

        $text = '';
        for ($i = 0; $i < $length; $i++) {
            $text .= $availableChars[random_int(0, strlen($availableChars) - 1)];
        }

        return $text;
    }
}
2.3. Сервис для финального теста
app/Services/TestService.php

php

Копировать
<?php

namespace App\Services;

use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Storage;

class TestService
{
    protected $fallbackTexts = [
        'en' => [
            'The quick brown fox jumps over the lazy dog.',
            'A journey of a thousand miles begins with a single step.',
        ],
        'ru' => [
            'Быстрая лиса перепрыгнула через ленивую собаку.',
            'Путешествие в тысячу миль начинается с одного шага.',
        ],
    ];

    public function getTestText(string $language, ?string $genre = null): string
    {
        if (env('GROK_API_KEY') && $genre) {
            try {
                $response = Http::withHeaders([
                    'Authorization' => 'Bearer ' . env('GROK_API_KEY'),
                ])->post('https://api.x.ai/v1/generate', [
                    'prompt' => "Generate a 100-word text in $language for typing practice in the $genre genre.",
                ]);

                if ($response->successful()) {
                    return $response->json()['text'];
                }
            } catch (\Exception $e) {
                // Fallback to local text
            }
        }

        // Use fallback text or user-uploaded file
        $userFile = Storage::disk('public')->exists("uploads/test_$language.txt")
            ? Storage::disk('public')->get("uploads/test_$language.txt")
            : null;

        return $userFile ?? $this->fallbackTexts[$language][array_rand($this->fallbackTexts[$language])];
    }
}
2.4. Контроллеры
app/Http/Controllers/AuthController.php

php

Копировать
<?php

namespace App\Http\Controllers;

use App\Models\User;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Auth;

class AuthController extends Controller
{
    public function register(Request $request)
    {
        $request->validate([
            'name' => 'required|string|max:255',
            'email' => 'required|string|email|max:255|unique:users',
            'password' => 'required|string|min:8|confirmed',
        ]);

        $user = User::create([
            'name' => $request->name,
            'email' => $request->email,
            'password' => Hash::make($request->password),
        ]);

        $token = $user->createToken('auth_token')->plainTextToken;

        return response()->json(['token' => $token, 'user' => $user], 201);
    }

    public function login(Request $request)
    {
        $request->validate([
            'email' => 'required|string|email',
            'password' => 'required|string',
        ]);

        if (!Auth::attempt($request->only('email', 'password'))) {
            return response()->json(['message' => 'Invalid credentials'], 401);
        }

        $user = Auth::user();
        $token = $user->createToken('auth_token')->plainTextToken;

        return response()->json(['token' => $token, 'user' => $user]);
    }

    public function logout()
    {
        Auth::user()->tokens()->delete();
        return response()->json(['message' => 'Logged out']);
    }
}
app/Http/Controllers/LessonController.php

php

Копировать
<?php

namespace App\Http\Controllers;

use App\Models\Lesson;
use App\Models\LessonProgress;
use App\Services\LessonService;
use Illuminate\Http\Request;

class LessonController extends Controller
{
    protected $lessonService;

    public function __construct(LessonService $lessonService)
    {
        $this->lessonService = $lessonService;
    }

    public function generate(Request $request)
    {
        $request->validate([
            'language' => 'required|string',
            'lesson_count' => 'required|integer|min:1',
        ]);

        $this->lessonService->generateLessons($request->language, $request->lesson_count);

        return response()->json(['message' => 'Lessons generated']);
    }

    public function index(string $language)
    {
        $lessons = Lesson::where('language', $language)->get();
        return response()->json($lessons);
    }

    public function getText(string $language, int $lessonNumber)
    {
        $text = $this->lessonService->generateLessonText($language, $lessonNumber);
        return response()->json(['text' => $text]);
    }

    public function saveProgress(Request $request)
    {
        $request->validate([
            'lesson_id' => 'required|exists:lessons,id',
            'time_seconds' => 'required|integer',
            'speed_wpm' => 'required|integer',
            'errors' => 'required|integer',
        ]);

        $progress = LessonProgress::create([
            'user_id' => auth()->id(),
            'lesson_id' => $request->lesson_id,
            'time_seconds' => $request->time_seconds,
            'speed_wpm' => $request->speed_wpm,
            'errors' => $request->errors,
        ]);

        return response()->json($progress);
    }
}
app/Http/Controllers/TestController.php

php

Копировать
<?php

namespace App\Http\Controllers;

use App\Models\TestResult;
use App\Services\TestService;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Storage;

class TestController extends Controller
{
    protected $testService;

    public function __construct(TestService $testService)
    {
        $this->testService = $testService;
    }

    public function getTestText(Request $request)
    {
        $request->validate([
            'language' => 'required|string',
            'genre' => 'nullable|string',
        ]);

        $text = $this->testService->getTestText($request->language, $request->genre);
        return response()->json(['text' => $text]);
    }

    public function uploadText(Request $request)
    {
        $request->validate([
            'language' => 'required|string',
            'file' => 'required|file|mimes:txt',
        ]);

        $path = $request->file('file')->storeAs('uploads', "test_{$request->language}.txt", 'public');
        return response()->json(['message' => 'File uploaded', 'path' => $path]);
    }

    public function saveResult(Request $request)
    {
        $request->validate([
            'language' => 'required|string',
            'speed_wpm' => 'required|integer',
            'errors' => 'required|integer',
        ]);

        $result = TestResult::create([
            'user_id' => auth()->id(),
            'language' => $request->language,
            'speed_wpm' => $request->speed_wpm,
            'errors' => $request->errors,
        ]);

        return response()->json($result);
    }
}
2.5. Маршруты
routes/api.php

php

Копировать
<?php

use App\Http\Controllers\AuthController;
use App\Http\Controllers\LessonController;
use App\Http\Controllers\TestController;
use Illuminate\Support\Facades\Route;

Route::post('/register', [AuthController::class, 'register']);
Route::post('/login', [AuthController::class, 'login']);

Route::middleware('auth:sanctum')->group(function () {
    Route::post('/logout', [AuthController::class, 'logout']);

    Route::prefix('lessons')->group(function () {
        Route::post('/generate', [LessonController::class, 'generate']);
        Route::get('/{language}', [LessonController::class, 'index']);
        Route::get('/{language}/{lessonNumber}/text', [LessonController::class, 'getText']);
        Route::post('/progress', [LessonController::class, 'saveProgress']);
    });

    Route::prefix('test')->group(function () {
        Route::get('/text', [TestController::class, 'getTestText']);
        Route::post('/upload', [TestController::class, 'uploadText']);
        Route::post('/result', [TestController::class, 'saveResult']);
    });
});
Шаг 3: Фронтенд (Vue 3, TypeScript, Pinia)
3.1. Настройка Vite
vite.config.ts

typescript

Копировать
import { defineConfig } from 'vite';
import laravel from 'laravel-vite-plugin';
import vue from '@vitejs/plugin-vue';

export default defineConfig({
    plugins: [
        laravel({
            input: ['resources/js/app.ts'],
            refresh: true,
        }),
        vue(),
    ],
    resolve: {
        alias: {
            '@': '/resources/js',
        },
    },
});
3.2. package.json
json

Копировать
{
    "private": true,
    "scripts": {
        "dev": "vite",
        "build": "vite build",
        "test:cypress": "cypress run"
    },
    "devDependencies": {
        "@vitejs/plugin-vue": "^5.0.0",
        "axios": "^1.7.0",
        "cypress": "^13.6.0",
        "laravel-vite-plugin": "^1.0.0",
        "tailwindcss": "^3.4.0",
        "typescript": "^5.4.0",
        "vite": "^5.0.0",
        "vue": "^3.4.0"
    },
    "dependencies": {
        "pinia": "^2.1.7",
        "vue-router": "^4.3.0"
    }
}
3.3. Основной файл приложения
resources/js/app.ts

typescript

Копировать
import { createApp } from 'vue';
import { createPinia } from 'pinia';
import App from '@/App.vue';
import router from '@/router';
import axios from 'axios';
import '@/assets/tailwind.css';

axios.defaults.baseURL = '/api';
const token = localStorage.getItem('token');
if (token) {
    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;
}

const app = createApp(App);
app.use(createPinia());
app.use(router);
app.mount('#app');
3.4. Tailwind CSS
resources/js/assets/tailwind.css

css

Копировать
@tailwind base;
@tailwind components;
@tailwind utilities;

.error-char {
    @apply bg-red-200 text-red-800;
}
tailwind.config.js

javascript

Копировать
/** @type {import('tailwindcss').Config} */
module.exports = {
    content: [
        './resources/**/*.vue',
        './resources/**/*.js',
        './resources/**/*.ts',
    ],
    theme: {
        extend: {},
    },
    plugins: [],
};
3.5. Роутинг
resources/js/router/index.ts

typescript

Копировать
import { createRouter, createWebHistory } from 'vue-router';
import Home from '@/components/Home.vue';
import Login from '@/components/Login.vue';
import Register from '@/components/Register.vue';
import LessonSetup from '@/components/LessonSetup.vue';
import Lesson from '@/components/Lesson.vue';
import FinalTest from '@/components/FinalTest.vue';

const routes = [
    { path: '/', component: Home, meta: { requiresAuth: true } },
    { path: '/login', component: Login },
    { path: '/register', component: Register },
    { path: '/setup', component: LessonSetup, meta: { requiresAuth: true } },
    { path: '/lesson/:language/:number', component: Lesson, meta: { requiresAuth: true } },
    { path: '/test', component: FinalTest, meta: { requiresAuth: true } },
];

const router = createRouter({
    history: createWebHistory(),
    routes,
});

router.beforeEach((to, from, next) => {
    const token = localStorage.getItem('token');
    if (to.meta.requiresAuth && !token) {
        next('/login');
    } else {
        next();
    }
});

export default router;
3.6. Хранилище Pinia
resources/js/stores/auth.ts

typescript

Копировать
import { defineStore } from 'pinia';
import axios from 'axios';

export const useAuthStore = defineStore('auth', {
    state: () => ({
        user: null as { id: number; name: string; email: string } | null,
        token: localStorage.getItem('token') || null,
    }),
    actions: {
        async login(email: string, password: string) {
            const response = await axios.post('/login', { email, password });
            this.token = response.data.token;
            this.user = response.data.user;
            localStorage.setItem('token', this.token!);
            axios.defaults.headers.common['Authorization'] = `Bearer ${this.token}`;
        },
        async register(name: string, email: string, password: string, password_confirmation: string) {
            const response = await axios.post('/register', { name, email, password, password_confirmation });
            this.token = response.data.token;
            this.user = response.data.user;
            localStorage.setItem('token', this.token!);
            axios.defaults.headers.common['Authorization'] = `Bearer ${this.token}`;
        },
        async logout() {
            await axios.post('/logout');
            this.token = null;
            this.user = null;
            localStorage.removeItem('token');
            delete axios.defaults.headers.common['Authorization'];
        },
    },
});
3.7. Компоненты Vue
resources/js/components/Login.vue

vue

Копировать
<template>
    <div class="min-h-screen flex items-center justify-center bg-gray-100">
        <div class="bg-white p-8 rounded shadow-md w-full max-w-md">
            <h2 class="text-2xl font-bold mb-6">Login</h2>
            <form @submit.prevent="login">
                <div class="mb-4">
                    <label class="block text-gray-700">Email</label>
                    <input v-model="form.email" type="email" class="w-full p-2 border rounded" required />
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Password</label>
                    <input v-model="form.password" type="password" class="w-full p-2 border rounded" required />
                </div>
                <button type="submit" class="w-full bg-blue-500 text-white p-2 rounded">Login</button>
            </form>
            <p class="mt-4">
                Don't have an account? <router-link to="/register" class="text-blue-500">Register</router-link>
            </p>
        </div>
    </div>
</template>

<script lang="ts" setup>
import { ref } from 'vue';
import { useRouter } from 'vue-router';
import { useAuthStore } from '@/stores/auth';

const authStore = useAuthStore();
const router = useRouter();
const form = ref({ email: '', password: '' });

const login = async () => {
    try {
        await authStore.login(form.value.email, form.value.password);
        router.push('/');
    } catch (error) {
        alert('Login failed');
    }
};
</script>
resources/js/components/Register.vue

vue

Копировать
<template>
    <div class="min-h-screen flex items-center justify-center bg-gray-100">
        <div class="bg-white p-8 rounded shadow-md w-full max-w-md">
            <h2 class="text-2xl font-bold mb-6">Register</h2>
            <form @submit.prevent="register">
                <div class="mb-4">
                    <label class="block text-gray-700">Name</label>
                    <input v-model="form.name" type="text" class="w-full p-2 border rounded" required />
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Email</label>
                    <input v-model="form.email" type="email" class="w-full p-2 border rounded" required />
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Password</label>
                    <input v-model="form.password" type="password" class="w-full p-2 border rounded" required />
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Confirm Password</label>
                    <input v-model="form.password_confirmation" type="password" class="w-full p-2 border rounded" required />
                </div>
                <button type="submit" class="w-full bg-blue-500 text-white p-2 rounded">Register</button>
            </form>
            <p class="mt-4">
                Already have an account? <router-link to="/login" class="text-blue-500">Login</router-link>
            </p>
        </div>
    </div>
</template>

<script lang="ts" setup>
import { ref } from 'vue';
import { useRouter } from 'vue-router';
import { useAuthStore } from '@/stores/auth';

const authStore = useAuthStore();
const router = useRouter();
const form = ref({ name: '', email: '', password: '', password_confirmation: '' });

const register = async () => {
    try {
        await authStore.register(form.value.name, form.value.email, form.value.password, form.value.password_confirmation);
        router.push('/');
    } catch (error) {
        alert('Registration failed');
    }
};
</script>
resources/js/components/Home.vue

vue

Копировать
<template>
    <div class="min-h-screen bg-gray-100 p-8">
        <div class="max-w-4xl mx-auto">
            <h1 class="text-3xl font-bold mb-6">Typing Trainer</h1>
            <button @click="logout" class="mb-4 bg-red-500 text-white p-2 rounded">Logout</button>
            <router-link to="/setup" class="bg-blue-500 text-white p-2 rounded">Start New Lesson</router-link>
        </div>
    </div>
</template>

<script lang="ts" setup>
import { useRouter } from 'vue-router';
import { useAuthStore } from '@/stores/auth';

const authStore = useAuthStore();
const router = useRouter();

const logout = async () => {
    await authStore.logout();
    router.push('/login');
};
</script>
resources/js/components/LessonSetup.vue

vue

Копировать
<template>
    <div class="min-h-screen flex items-center justify-center bg-gray-100">
        <div class="bg-white p-8 rounded shadow-md w-full max-w-md">
            <h2 class="text-2xl font-bold mb-6">Setup Lessons</h2>
            <form @submit.prevent="generateLessons">
                <div class="mb-4">
                    <label class="block text-gray-700">Language</label>
                    <select v-model="form.language" class="w-full p-2 border rounded" required>
                        <option value="en">English</option>
                        <option value="ru">Russian</option>
                    </select>
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700">Number of Lessons</label>
                    <input v-model.number="form.lesson_count" type="number" min="1" class="w-full p-2 border rounded" required />
                </div>
                <button type="submit" class="w-full bg-blue-500 text-white p-2 rounded">Generate Lessons</button>
            </form>
        </div>
    </div>
</template>

<script lang="ts" setup>
import { ref } from 'vue';
import { useRouter } from 'vue-router';
import axios from 'axios';

const router = useRouter();
const form = ref({ language: 'en', lesson_count: 10 });

const generateLessons = async () => {
    try {
        await axios.post('/lessons/generate', form.value);
        router.push(`/lesson/${form.value.language}/1`);
    } catch (error) {
        alert('Failed to generate lessons');
    }
};
</script>
resources/js/components/Lesson.vue

vue

Копировать
<template>
    <div class="min-h-screen bg-gray-100 p-8">
        <div class="max-w-4xl mx-auto bg-white p-6 rounded shadow-md">
            <h2 class="text-2xl font-bold mb-4">Lesson {{ lesson.number }} ({{ language }})</h2>
            <p><strong>New Characters:</strong> {{ lesson.new_chars }}</p>
            <p><strong>Time:</strong> {{ time }}s</p>
            <p><strong>Speed:</strong> {{ speed }} WPM</p>
            <p><strong>Errors:</strong> {{ errors }}</p>
            <div class="mt-4">
                <div class="text-lg font-mono">
                    <span v-for="(char, index) in text" :key="index" :class="{ 'error-char': typed[index] && typed[index] !== char }">
                        {{ char }}
                    </span>
                </div>
                <input v-model="typed" @input="handleInput" class="w-full p-2 border rounded mt-4" ref="input" autofocus />
            </div>
            <router-link v-if="nextLesson" :to="`/lesson/${language}/${nextLesson.number}`" class="mt-4 inline-block bg-blue-500 text-white p-2 rounded">
                Next Lesson
            </router-link>
            <router-link v-else to="/test" class="mt-4 inline-block bg-green-500 text-white p-2 rounded">
                Take Final Test
            </router-link>
        </div>
    </div>
</template>

<script lang="ts" setup>
import { ref, computed, onMounted } from 'vue';
import { useRoute, useRouter } from 'vue-router';
import axios from 'axios';

const route = useRoute();
const router = useRouter();
const language = route.params.language as string;
const lessonNumber = parseInt(route.params.number as string);
const lesson = ref<{ number: number; new_chars: string }>({ number: lessonNumber, new_chars: '' });
const text = ref('');
const typed = ref('');
const startTime = ref(0);
const time = ref(0);
const errors = ref(0);
const speed = ref(0);
const input = ref<HTMLInputElement | null>(null);
const lessons = ref<any[]>([]);

const nextLesson = computed(() => lessons.value.find(l => l.number === lessonNumber + 1));

const fetchLesson = async () => {
    const [lessonRes, textRes, lessonsRes] = await Promise.all([
        axios.get(`/lessons/${language}/${lessonNumber}`),
        axios.get(`/lessons/${language}/${lessonNumber}/text`),
        axios.get(`/lessons/${language}`),
    ]);
    lesson.value = lessonsRes.data.find((l: any) => l.number === lessonNumber);
    text.value = textRes.data.text;
    lessons.value = lessonsRes.data;
};

const handleInput = async () => {
    if (!startTime.value) {
        startTime.value = Date.now();
    }

    const typedChars = typed.value.split('');
    let errorCount = 0;
    for (let i = 0; i < typedChars.length; i++) {
        if (typedChars[i] !== text.value[i]) {
            errorCount++;
        }
    }
    errors.value = errorCount;

    time.value = Math.round((Date.now() - startTime.value) / 1000);
    const words = typed.value.length / 5;
    speed.value = time.value > 0 ? Math.round((words / time.value) * 60) : 0;

    if (typed.value === text.value) {
        await axios.post('/lessons/progress', {
            lesson_id: lesson.value.id,
            time_seconds: time.value,
            speed_wpm: speed.value,
            errors: errors.value,
        });
        if (!nextLesson.value) {
            router.push('/test');
        }
    }
};

onMounted(() => {
    fetchLesson();
    if (input.value) {
        input.value.focus();
    }
});
</script>
resources/js/components/FinalTest.vue

vue

Копировать
<template>
    <div class="min-h-screen bg-gray-100 p-8">
        <div class="max-w-4xl mx-auto bg-white p-6 rounded shadow-md">
            <h2 class="text-2xl font-bold mb-4">Final Typing Test</h2>
            <div class="mb-4">
                <label class="block text-gray-700">Language</label>
                <select v-model="language" class="p-2 border rounded">
                    <option value="en">English</option>
                    <option value="ru">Russian</option>
                </select>
            </div>
            <div class="mb-4">
                <label class="block text-gray-700">Genre (optional)</label>
                <select v-model="genre" class="p-2 border rounded">
                    <option value="">None</option>
                    <option value="fiction">Fiction</option>
                    <option value="non-fiction">Non-fiction</option>
                    <option value="poetry">Poetry</option>
                </select>
            </div>
            <div class="mb-4">
                <label class="block text-gray-700">Upload Text (optional)</label>
                <input type="file" accept=".txt" @change="uploadFile" class="p-2 border rounded" />
            </div>
            <button @click="fetchText" class="bg-blue-500 text-white p-2 rounded mb-4">Start Test</button>
            <p><strong>Time:</strong> {{ time }}s</p>
            <p><strong>Speed:</strong> {{ speed }} WPM</p>
            <p><strong>Errors:</strong> {{ errors }}</p>
            <div v-if="text" class="mt-4">
                <div class="text-lg font-mono">
                    <span v-for="(char, index) in text" :key="index" :class="{ 'error-char': typed[index] && typed[index] !== char }">
                        {{ char }}
                    </span>
                </div>
                <input v-model="typed" @input="handleInput" class="w-full p-2 border rounded mt-4" ref="input" autofocus />
            </div>
        </div>
    </div>
</template>

<script lang="ts" setup>
import { ref, onMounted } from 'vue';
import axios from 'axios';

const language = ref('en');
const genre = ref('');
const text = ref('');
const typed = ref('');
const startTime = ref(0);
const time = ref(0);
const errors = ref(0);
const speed = ref(0);
const input = ref<HTMLInputElement | null>(null);

const fetchText = async () => {
    const response = await axios.get('/test/text', { params: { language: language.value, genre: genre.value } });
    text.value = response.data.text;
    typed.value = '';
    startTime.value = 0;
    time.value = 0;
    errors.value = 0;
    speed.value = 0;
};

const uploadFile = async (event: Event) => {
    const file = (event.target as HTMLInputElement).files?.[0];
    if (file) {
        const formData = new FormData();
        formData.append('file', file);
        formData.append('language', language.value);
        await axios.post('/test/upload', formData);
        fetchText();
    }
};

const handleInput = async () => {
    if (!startTime.value) {
        startTime.value = Date.now();
    }

    const typedChars = typed.value.split('');
    let errorCount = 0;
    for (let i = 0; i < typedChars.length; i++) {
        if (typedChars[i] !== text.value[i]) {
            errorCount++;
        }
    }
    errors.value = errorCount;

    time.value = Math.round((Date.now() - startTime.value) / 1000);
    const words = typed.value.length / 5;
    speed.value = time.value > 0 ? Math.round((words / time.value) * 60) : 0;

    if (typed.value === text.value) {
        await axios.post('/test/result', {
            language: language.value,
            speed_wpm: speed.value,
            errors: errors.value,
        });
        alert('Test completed!');
        text.value = '';
    }
};

onMounted(() => {
    if (input.value) {
        input.value.focus();
    }
});
</script>
resources/js/App.vue

vue

Копировать
<template>
    <router-view />
</template>

<script lang="ts" setup>
</script>
resources/views/app.blade.php

php

Копировать
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Typing Trainer</title>
    @vite('resources/js/app.ts')
</head>
<body>
    <div id="app"></div>
</body>
</html>
Шаг 4: Тестирование
4.1. PHPUnit (бэкенд)
tests/Feature/AuthTest.php

php

Копировать
<?php

namespace Tests\Feature;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class AuthTest extends TestCase
{
    use RefreshDatabase;

    public function test_user_can_register()
    {
        $response = $this->postJson('/api/register', [
            'name' => 'Test User',
            'email' => 'test@example.com',
            'password' => 'password',
            'password_confirmation' => 'password',
        ]);

        $response->assertStatus(201)
            ->assertJsonStructure(['token', 'user']);
    }

    public function test_user_can_login()
    {
        $user = \App\Models\User::factory()->create([
            'email' => 'test@example.com',
            'password' => bcrypt('password'),
        ]);

        $response = $this->postJson('/api/login', [
            'email' => 'test@example.com',
            'password' => 'password',
        ]);

        $response->assertStatus(200)
            ->assertJsonStructure(['token', 'user']);
    }

    public function test_user_can_logout()
    {
        $user = \App\Models\User::factory()->create();
        $token = $user->createToken('test')->plainTextToken;

        $response = $this->withHeaders(['Authorization' => "Bearer $token"])
            ->postJson('/api/logout');

        $response->assertStatus(200)
            ->assertJson(['message' => 'Logged out']);
    }
}
tests/Feature/LessonTest.php

php

Копировать
<?php

namespace Tests\Feature;

use App\Models\Lesson;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class LessonTest extends TestCase
{
    use RefreshDatabase;

    public function test_user_can_generate_lessons()
    {
        $user = User::factory()->create();
        $token = $user->createToken('test')->plainTextToken;

        $response = $this->withHeaders(['Authorization' => "Bearer $token"])
            ->postJson('/api/lessons/generate', [
                'language' => 'en',
                'lesson_count' => 5,
            ]);

        $response->assertStatus(200);
        $this->assertCount(5, Lesson::where('language', 'en')->get());
    }

    public function test_user_can_get_lesson_text()
    {
        $user = User::factory()->create();
        $token = $user->createToken('test')->plainTextToken;
        Lesson::create(['number' => 1, 'language' => 'en', 'new_chars' => 'abc']);

        $response = $this->withHeaders(['Authorization' => "Bearer $token"])
            ->getJson('/api/lessons/en/1/text');

        $response->assertStatus(200)
            ->assertJsonStructure(['text']);
    }
}
tests/Feature/TestTest.php

php

Копировать
<?php

namespace Tests\Feature;

use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class TestTest extends TestCase
{
    use RefreshDatabase;

    public function test_user_can_get_test_text()
    {
        $user = User::factory()->create();
        $token = $user->createToken('test')->plainTextToken;

        $response = $this->withHeaders(['Authorization' => "Bearer $token"])
            ->getJson('/api/test/text?language=en');

        $response->assertStatus(200)
            ->assertJsonStructure(['text']);
    }

    public function test_user_can_save_test_result()
    {
        $user = User::factory()->create();
        $token = $user->createToken('test')->plainTextToken;

        $response = $this->withHeaders(['Authorization' => "Bearer $token"])
            ->postJson('/api/test/result', [
                'language' => 'en',
                'speed_wpm' => 50,
                'errors' => 2,
            ]);

        $response->assertStatus(200)
            ->assertJsonStructure(['id', 'user_id', 'language', 'speed_wpm', 'errors']);
    }
}
4.2. Cypress (фронтенд)
cypress.config.ts

typescript

Копировать
import { defineConfig } from 'cypress';

export default defineConfig({
    e2e: {
        baseUrl: 'http://localhost:8080',
        specPattern: 'tests/cypress/e2e/**/*.cy.{js,jsx,ts,tsx}',
    },
});
tests/cypress/e2e/auth.cy.ts

typescript

Копировать
describe('Authentication', () => {
    it('allows a user to register', () => {
        cy.visit('/register');
        cy.get('input[placeholder="Name"]').type('Test User');
        cy.get('input[placeholder="Email"]').type('test@example.com');
        cy.get('input[placeholder="Password"]').type('password');
        cy.get('input[placeholder="Confirm Password"]').type('password');
        cy.get('button').contains('Register').click();
        cy.url().should('eq', 'http://localhost:8080/');
    });

    it('allows a user to login', () => {
        cy.request('POST', '/api/register', {
            name: 'Test User',
            email: 'test@example.com',
            password: 'password',
            password_confirmation: 'password',
        });
        cy.visit('/login');
        cy.get('input[placeholder="Email"]').type('test@example.com');
        cy.get('input[placeholder="Password"]').type('password');
        cy.get('button').contains('Login').click();
        cy.url().should('eq', 'http://localhost:8080/');
    });
});
tests/cypress/e2e/lesson.cy.ts

typescript

Копировать
describe('Lessons', () => {
    beforeEach(() => {
        cy.request('POST', '/api/register', {
            name: 'Test User',
            email: 'test@example.com',
            password: 'password',
            password_confirmation: 'password',
        });
        cy.request('POST', '/api/login', {
            email: 'test@example.com',
            password: 'password',
        }).then((response) => {
            localStorage.setItem('token', response.body.token);
        });
    });

    it('allows a user to generate and complete a lesson', () => {
        cy.visit('/setup');
        cy.get('select').select('English');
        cy.get('input[type="number"]').type('2');
        cy.get('button').contains('Generate Lessons').click();
        cy.url().should('include', '/lesson/en/1');
        cy.get('input').type('abc');
        cy.get('.error-char').should('not.exist');
        cy.get('a').contains('Next Lesson').click();
    });
});
tests/cypress/e2e/test.cy.ts

typescript

Копировать
describe('Final Test', () => {
    beforeEach(() => {
        cy.request('POST', '/api/register', {
            name: 'Test User',
            email: 'test@example.com',
            password: 'password',
            password_confirmation: 'password',
        });
        cy.request('POST', '/api/login', {
            email: 'test@example.com',
            password: 'password',
        }).then((response) => {
            localStorage.setItem('token', response.body.token);
        });
    });

    it('allows a user to take the final test', () => {
        cy.visit('/test');
        cy.get('select').first().select('English');
        cy.get('button').contains('Start Test').click();
        cy.get('input').type('The quick brown fox');
        cy.get('.error-char').should('not.exist');
    });
});
Шаг 5: Запуск приложения
Установите зависимости:
bash

Копировать
./vendor/bin/sail composer install
./vendor/bin/sail npm install
Выполните миграции:
bash

Копировать
./vendor/bin/sail artisan migrate
Запустите сервер:
bash

Копировать
./vendor/bin/sail up -d
./vendor/bin/sail npm run dev
Откройте приложение в браузере: http://localhost:8080.
Шаг 6: Запуск тестов
PHPUnit:
bash

Копировать
./vendor/bin/sail artisan test
Cypress:
bash

Копировать
./vendor/bin/sail npm run test:cypress
Особенности реализации
Уроки: Генерируются автоматически на основе выбранного языка и количества уроков. Новые символы добавляются равномерно.
Индикаторы: Отображаются номер урока, новые символы, время, скорость (WPM), ошибки. Ошибки подсвечиваются красным.
Финальный тест: Поддерживает выбор жанра и загрузку пользовательского текста. При отсутствии связи с Grok используются заготовки.
Интерфейс: Минималистичный, с использованием Tailwind CSS.
Тесты: Покрывают авторизацию, генерацию уроков, прохождение уроков и финальный тест.
Контейнеризация: Полностью настроен Docker с Laravel Sail.
Рекомендации по доработке
Добавить поддержку других языков через конфигурацию в админ-панели.
Реализовать прогресс-бар для отслеживания завершения уроков.
Добавить локализацию интерфейса.
Расширить тесты для покрытия всех граничных случаев (например, некорректные файлы).
Если нужно что-то уточнить или доработать, дайте знать!






Чем я могу помочь?


DeepSearch


Think

Grok 3

